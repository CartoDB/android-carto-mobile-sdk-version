/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.ui;

import com.carto.ui.MapClickInfo;
import com.carto.ui.MapInteractionInfo;

/**
 * Listener for events like map clicks etc.
 */
@com.carto.utils.DontObfuscate public class MapEventListener {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public MapEventListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(MapEventListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MapEventListenerModuleJNI.delete_MapEventListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    MapEventListenerModuleJNI.MapEventListener_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    MapEventListenerModuleJNI.MapEventListener_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.ui.MapEventListener swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.ui.MapEventListenerModuleJNI.MapEventListener_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.ui.MapEventListener) director;
    }

    String objClassName = com.carto.ui.MapEventListenerModuleJNI.MapEventListener_swigGetClassName(cPtr, null);
    com.carto.ui.MapEventListener objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.ui." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.ui.MapEventListener) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Listener method that gets called at the end of the rendering process when the<br>
 * map view needs no further refreshing.<br>
 * Note that there can still be background processes (tile loading) that may change<br>
 * the map view but these may take long time.<br>
 * This method is called from GL renderer thread, not from main thread.
 */
  public void onMapIdle() {
    if (getClass() == MapEventListener.class) MapEventListenerModuleJNI.MapEventListener_onMapIdle(swigCPtr, this); else MapEventListenerModuleJNI.MapEventListener_onMapIdleSwigExplicitMapEventListener(swigCPtr, this);
  }

/**
 * Listener method that gets called when the map is panned, rotated, tilted or zoomed.<br>
 * The callback is used for both UI events and map changes resulting from API calls.<br>
 * It is recommended to use onMapInteraction callback instead of onMapMoved, if possible.<br>
 * Doing any calls to update MapView state from this method is potentially dangerous and may<br>
 * result in deadlocks or crashes.<br>
 * The thread this method is called from may vary.
 */
  public void onMapMoved() {
    if (getClass() == MapEventListener.class) MapEventListenerModuleJNI.MapEventListener_onMapMoved(swigCPtr, this); else MapEventListenerModuleJNI.MapEventListener_onMapMovedSwigExplicitMapEventListener(swigCPtr, this);
  }

/**
 * Listener method that gets called when map is in 'stable' state - map animations have finished,<br>
 * user has lifted fingers from the screen. This method is similar to onMapIdle, but is called less<br>
 * frequently and takes account touch state.<br>
 * The thread this method is called from may vary.
 */
  public void onMapStable() {
    if (getClass() == MapEventListener.class) MapEventListenerModuleJNI.MapEventListener_onMapStable(swigCPtr, this); else MapEventListenerModuleJNI.MapEventListener_onMapStableSwigExplicitMapEventListener(swigCPtr, this);
  }

/**
 * Listener method that gets called when user has interacted with the map. The callback<br>
 * includes info about interaction type (panning, zooming, etc).<br>
 * @param mapInteractionInfo A container that provides information about the interaction.
 */
  public void onMapInteraction(MapInteractionInfo mapInteractionInfo) {
    if (getClass() == MapEventListener.class) MapEventListenerModuleJNI.MapEventListener_onMapInteraction(swigCPtr, this, MapInteractionInfo.getCPtr(mapInteractionInfo), mapInteractionInfo); else MapEventListenerModuleJNI.MapEventListener_onMapInteractionSwigExplicitMapEventListener(swigCPtr, this, MapInteractionInfo.getCPtr(mapInteractionInfo), mapInteractionInfo);
  }

/**
 * Listener method that gets called when a click is performed on an empty area of the map.<br>
 * This method will NOT be called from the main thread.<br>
 * @param mapClickInfo A container that provides information about the click.
 */
  public void onMapClicked(MapClickInfo mapClickInfo) {
    if (getClass() == MapEventListener.class) MapEventListenerModuleJNI.MapEventListener_onMapClicked(swigCPtr, this, MapClickInfo.getCPtr(mapClickInfo), mapClickInfo); else MapEventListenerModuleJNI.MapEventListener_onMapClickedSwigExplicitMapEventListener(swigCPtr, this, MapClickInfo.getCPtr(mapClickInfo), mapClickInfo);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return MapEventListenerModuleJNI.MapEventListener_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return MapEventListenerModuleJNI.MapEventListener_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return MapEventListenerModuleJNI.MapEventListener_swigGetDirectorObject(swigCPtr, this);
  }

  public MapEventListener() {
    this(MapEventListenerModuleJNI.new_MapEventListener(), true);
    MapEventListenerModuleJNI.MapEventListener_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

}
