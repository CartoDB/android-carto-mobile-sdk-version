/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.ui;

import com.carto.core.MapPos;
import com.carto.core.MapVec;
import com.carto.core.MapBounds;
import com.carto.core.ScreenPos;
import com.carto.core.ScreenBounds;
import com.carto.components.Options;
import com.carto.components.Layers;
import com.carto.components.LicenseManagerListener;
import com.carto.renderers.MapRenderer;
import com.carto.renderers.RedrawRequestListener;
import com.carto.ui.MapEventListener;

/**
 * A platform independent main view class for all mapping operations.<br>
 * Allows the user to manipulate the map and access various related components.
 */
public class BaseMapView {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public BaseMapView(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(BaseMapView obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BaseMapViewModuleJNI.delete_BaseMapView(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

/**
 * Registers the SDK license. This class method and must be called before<br>
 * creating any actual MapView instances.<br>
 * @param licenseKey The license string provided for this application.<br>
 * @param listener The listener that receives notifications when the license has been updated.<br>
 * @return True if license is valid, false if not.
 */
  public static boolean registerLicense(String licenseKey, LicenseManagerListener listener) {
    return BaseMapViewModuleJNI.BaseMapView_registerLicense(licenseKey, LicenseManagerListener.getCPtr(listener), listener);
  }

/**
 * Returns the SDK version and build info. The result should be used only for reporting purposes.<br>
 * @return The SDK version and build info.
 */
  public static String getSDKVersion() {
    return BaseMapViewModuleJNI.BaseMapView_getSDKVersion();
  }

  public BaseMapView() {
    this(BaseMapViewModuleJNI.new_BaseMapView(), true);
  }

/**
 * Prepares renderers for drawing. Has to be called again if the graphics context was lost.
 */
  public void onSurfaceCreated() {
    BaseMapViewModuleJNI.BaseMapView_onSurfaceCreated(swigCPtr, this);
  }

/**
 * Changes the screen size of the map view. Calling this method before<br>
 * onSurfaceCreated is called results in undefined behaviour.<br>
 * @param width The new width of the map view.<br>
 * @param height The new height of the map view.
 */
  public void onSurfaceChanged(int width, int height) {
    BaseMapViewModuleJNI.BaseMapView_onSurfaceChanged(swigCPtr, this, width, height);
  }

/**
 * Draws a single frame to the current graphics context. Calling this method before<br>
 * onSurfaceCreated and onSurfaceChanged are called results in undefined behaviour.
 */
  public void onDrawFrame() {
    BaseMapViewModuleJNI.BaseMapView_onDrawFrame(swigCPtr, this);
  }

/**
 * Stops renderer. Rendering may resume only after onSurfaceCreated is called again.
 */
  public void onSurfaceDestroyed() {
    BaseMapViewModuleJNI.BaseMapView_onSurfaceDestroyed(swigCPtr, this);
  }

/**
 * Finish all rendering (wait until all rendering commands have finished executing).
 */
  public void finishRendering() {
    BaseMapViewModuleJNI.BaseMapView_finishRendering(swigCPtr, this);
  }

/**
 * Handles a user input event.<br>
 * @param event The event type. First pointer down = 0, second pointer down = 1, either pointer moved = 2, <br>
 *              gesture canceled = 3, first pointer up = 4, second pointer up = 5.<br>
 * @param x1 The x coordinate of the first pointer. -1 if there are no coordinates.<br>
 * @param y1 The y coordinate of the first pointer. -1 if there are no coordinates.<br>
 * @param x2 The x coordinate of the second pointer. -1 if there are no coordinates.<br>
 * @param y2 The y coordinate of the second pointer. -1 if there are no coordinates.
 */
  public void onInputEvent(int event, float x1, float y1, float x2, float y2) {
    BaseMapViewModuleJNI.BaseMapView_onInputEvent(swigCPtr, this, event, x1, y1, x2, y2);
  }

/**
 * Handles a wheel-rotation event.<br>
 * @param delta The number of ticks wheel changed with sign showing the direction of change.<br>
 * @param x The x coordinate of the pointer.<br>
 * @param y The y coordinate of the pointer.
 */
  public void onWheelEvent(int delta, float x, float y) {
    BaseMapViewModuleJNI.BaseMapView_onWheelEvent(swigCPtr, this, delta, x, y);
  }

/**
 * Returns the Layers object, that can be used for adding and removing map layers.<br>
 * @return The Layer object.
 */
  public Layers getLayers() {
    long cPtr = BaseMapViewModuleJNI.BaseMapView_getLayers(swigCPtr, this);
    return (cPtr == 0) ? null : new Layers(cPtr, true);
  }

/**
 * Returns the Options object, that can be used for modifying various map options.<br>
 * @return the Option object.
 */
  public Options getOptions() {
    long cPtr = BaseMapViewModuleJNI.BaseMapView_getOptions(swigCPtr, this);
    return (cPtr == 0) ? null : new Options(cPtr, true);
  }

/**
 * Returns the MapRenderer object, that can be used for controlling rendering options.<br>
 * @return the MapRenderer object.
 */
  public MapRenderer getMapRenderer() {
    long cPtr = BaseMapViewModuleJNI.BaseMapView_getMapRenderer(swigCPtr, this);
    return (cPtr == 0) ? null : new MapRenderer(cPtr, true);
  }

/**
 * Returns the position that the camera is currently looking at.<br>
 * @return The current focus position in the coordinate system of the base projection.
 */
  public MapPos getFocusPos() { return new MapPos(BaseMapViewModuleJNI.BaseMapView_getFocusPos(swigCPtr, this), true); }

/**
 * Returns the map rotation in degrees. 0 means looking north, 90 means west, -90 means east and 180 means south.<br>
 * @return The map rotation in degrees in range of (-180 .. 180].
 */
  public float getRotation() {
    return BaseMapViewModuleJNI.BaseMapView_getRotation(swigCPtr, this);
  }

/**
 * Returns the tilt angle in degrees. 0 means looking directly at the horizon, 90 means looking directly down.<br>
 * @return The tilt angle in degrees.
 */
  public float getTilt() {
    return BaseMapViewModuleJNI.BaseMapView_getTilt(swigCPtr, this);
  }

/**
 * Returns the zoom level. The value returned is never negative, 0 means absolutely zoomed out and all other<br>
 * values describe some level of zoom.<br>
 * @return The zoom level.
 */
  public float getZoom() {
    return BaseMapViewModuleJNI.BaseMapView_getZoom(swigCPtr, this);
  }

/**
 * Pans the view relative to the current focus position. The deltaPos vector is expected to be in <br>
 * the coordinate system of the base projection. The new calculated focus position will be clamped to<br>
 * the world bounds and to the bounds set by Options::setPanBounds.<br>
 * <br>
 * If durationSeconds &gt; 0 the panning operation will be animated over time. If the previous panning animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param deltaPos The relative coordinate shift.<br>
 * @param durationSeconds The duration in which the panning operation will be completed in seconds.
 */
  public void pan(MapVec deltaPos, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_pan(swigCPtr, this, MapVec.getCPtr(deltaPos), deltaPos, durationSeconds);
  }

/**
 * Sets the new absolute focus position. The new focus position is expected to be in<br>
 * the coordinate system of the base projection. The new focus position will be clamped to<br>
 * the world bounds and to the bounds set by Options::setPanBounds.<br>
 * <br>
 * If durationSeconds &gt; 0 the panning operation will be animated over time. If the previous panning animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param pos The new absolute focus position.<br>
 * @param durationSeconds The duration in which the panning operation will be completed in seconds.
 */
  public void setFocusPos(MapPos pos, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_setFocusPos(swigCPtr, this, MapPos.getCPtr(pos), pos, durationSeconds);
  }

/**
 * Rotates the view relative to the current rotation value. Positive values rotate clockwise, negative values counterclockwise.<br>
 * The new calculated rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable <br>
 * is set to false.<br>
 * <br>
 * If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param deltaAngle The delta rotation value in degrees.<br>
 * @param durationSeconds The duration in which the rotation operation will be completed in seconds.
 */
  public void rotate(float deltaAngle, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_rotate__SWIG_0(swigCPtr, this, deltaAngle, durationSeconds);
  }

/**
 * Rotates the view relative to the current rotation value. Positive values rotate clockwise, negative values counterclockwise.<br>
 * The new calculated rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable<br>
 * is set to false.<br>
 * <br>
 * Rotating is done around the specified target position, keeping it at the same location on the screen.<br>
 * <br>
 * If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param deltaAngle The delta angle value in degrees.<br>
 * @param targetPos The zooming target position in the coordinate system of the base projection.<br>
 * @param durationSeconds The duration in which the rotation operation will be completed in seconds.
 */
  public void rotate(float deltaAngle, MapPos targetPos, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_rotate__SWIG_1(swigCPtr, this, deltaAngle, MapPos.getCPtr(targetPos), targetPos, durationSeconds);
  }

/**
 * Sets the new absolute rotation value. 0 means look north, 90 means west, -90 means east and 180 means south.<br>
 * The rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable<br>
 * is set to false.<br>
 * <br>
 * If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param angle The new absolute angle value in degrees.<br>
 * @param durationSeconds The duration in which the rotation operation will be completed in seconds.
 */
  public void setRotation(float angle, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_setRotation__SWIG_0(swigCPtr, this, angle, durationSeconds);
  }

/**
 * Sets the new absolute rotation value. 0 means look north, 90 means west, -90 means east and 180 means south.<br>
 * The rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable <br>
 * is set to false.<br>
 * <br>
 * Rotating is done around the specified target position, keeping it at the same location on the screen.<br>
 * <br>
 * If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param angle The new absolute angle value in degrees.<br>
 * @param targetPos The zooming target position in the coordinate system of the base projection.<br>
 * @param durationSeconds The duration in which the rotation operation will be completed in seconds.
 */
  public void setRotation(float angle, MapPos targetPos, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_setRotation__SWIG_1(swigCPtr, this, angle, MapPos.getCPtr(targetPos), targetPos, durationSeconds);
  }

/**
 * Tilts the view relative to the current tilt value. Positive values tilt the view down towards the map, <br>
 * negative values tilt the view up towards the horizon. The new calculated tilt value will be clamped to<br>
 * the range of [30 .. 90] and to the range set by Options::setZoomRange.<br>
 * <br>
 * If durationSeconds &gt; 0 the tilting operation will be animated over time. If the previous tilting animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param deltaTilt The number of degrees the camera should be tilted by.<br>
 * @param durationSeconds The duration in which the tilting operation will be completed in seconds.
 */
  public void tilt(float deltaTilt, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_tilt(swigCPtr, this, deltaTilt, durationSeconds);
  }

/**
 * Sets the new absolute tilt value. 0 means look directly at the horizon, 90 means look directly down. The<br>
 * minimum tilt angle is 30 degrees and the maximum is 90 degrees. The tilt value can be further constrained<br>
 * by the Options::setTiltRange method. Values exceeding these ranges will be clamped.<br>
 * <br>
 * If durationSeconds &gt; 0 the tilting operation will be animated over time. If the previous tilting animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param tilt The new absolute tilt value in degrees.<br>
 * @param durationSeconds The duration in which the tilting operation will be completed in seconds.
 */
  public void setTilt(float tilt, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_setTilt(swigCPtr, this, tilt, durationSeconds);
  }

/**
 * Zooms the view relative to the current zoom value. Positive values zoom in, negative values zoom out.<br>
 * The new calculated zoom value will be clamped to the range of [0 .. 24] and to the range set by Options::setZoomRange.<br>
 * <br>
 * If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param deltaZoom The delta zoom value.<br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
  public void zoom(float deltaZoom, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_zoom__SWIG_0(swigCPtr, this, deltaZoom, durationSeconds);
  }

/**
 * Zooms the view relative to the current zoom value. Positive values zoom in, negative values zoom out.<br>
 * The new calculated zoom value will be clamped to the range of [0 .. 24] and to the range set by Options::setZoomRange.<br>
 * <br>
 * Zooming is done towards the specified target position, keeping it at the same location on the screen.<br>
 * <br>
 * If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param deltaZoom The delta zoom value.<br>
 * @param targetPos The zooming target position in the coordinate system of the base projection.<br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
  public void zoom(float deltaZoom, MapPos targetPos, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_zoom__SWIG_1(swigCPtr, this, deltaZoom, MapPos.getCPtr(targetPos), targetPos, durationSeconds);
  }

/**
 * Sets the new absolute zoom value. The minimum zoom value is 0, which means absolutely zoomed out and the maximum<br>
 * zoom value is 24. The zoom value can be further constrained by the Options::setZoomRange method. Values<br>
 * exceeding these ranges will be clamped. <br>
 * <br>
 * If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param zoom The new absolute zoom value.<br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
  public void setZoom(float zoom, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_setZoom__SWIG_0(swigCPtr, this, zoom, durationSeconds);
  }

/**
 * Sets the new absolute zoom value. The minimum zoom value is 0, which means absolutely zoomed out and the maximum <br>
 * zoom value is 24. The zoom value can be further constrained by the Options::setZoomRange method. Values <br>
 * exceeding these ranges will be clamped.<br>
 * <br>
 * Zooming is done towards the specified target position, keeping it at the same location on the screen.<br>
 * <br>
 * If durationSeconds &gt; 0, the zooming operation will be animated over time. If the previous zooming animation has not<br>
 * finished by the time this method is called, it will be stopped.<br>
 * @param zoom The new absolute zoom value.<br>
 * @param targetPos The zooming target position in the coordinate system of the base projection.<br>
 * @param durationSeconds The duration in which the zooming operation will be completed in seconds.
 */
  public void setZoom(float zoom, MapPos targetPos, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_setZoom__SWIG_1(swigCPtr, this, zoom, MapPos.getCPtr(targetPos), targetPos, durationSeconds);
  }

/**
 * Animate the view parameters (focus position, tilt, rotation, zoom) so that the specified bounding box becomes fully visible.<br>
 * This method does not work before the screen size is set.<br>
 * @param mapBounds The bounding box on the map to be made visible in the base projection's coordinate system.<br>
 * @param screenBounds The screen bounding box where to fit the map bounding box.<br>
 * @param integerZoom If true, then closest integer zoom level will be used. If false, exact fractional zoom level will be used.<br>
 * @param durationSeconds The duration in which the operation will be completed in seconds.
 */
  public void moveToFitBounds(MapBounds mapBounds, ScreenBounds screenBounds, boolean integerZoom, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_moveToFitBounds__SWIG_0(swigCPtr, this, MapBounds.getCPtr(mapBounds), mapBounds, ScreenBounds.getCPtr(screenBounds), screenBounds, integerZoom, durationSeconds);
  }

/**
 * Animate the view parameters (focus position, tilt, rotation, zoom) so that the specified bounding box becomes fully visible.<br>
 * Also supports resetting the tilt and rotation angles over the course of the animation.<br>
 * This method does not work before the screen size is set.<br>
 * @param mapBounds The bounding box on the map to be made visible in the base projection's coordinate system.<br>
 * @param screenBounds The screen bounding box where to fit the map bounding box.<br>
 * @param integerZoom If true, then closest integer zoom level will be used. If false, exact fractional zoom level will be used.<br>
 * @param resetTilt If true, view will be untilted. If false, current tilt will be kept.<br>
 * @param resetRotation If true, rotation will be reset. If false, current rotation will be kept.<br>
 * @param durationSeconds The duration in which the operation will be completed in seconds.
 */
  public void moveToFitBounds(MapBounds mapBounds, ScreenBounds screenBounds, boolean integerZoom, boolean resetRotation, boolean resetTilt, float durationSeconds) {
    BaseMapViewModuleJNI.BaseMapView_moveToFitBounds__SWIG_1(swigCPtr, this, MapBounds.getCPtr(mapBounds), mapBounds, ScreenBounds.getCPtr(screenBounds), screenBounds, integerZoom, resetRotation, resetTilt, durationSeconds);
  }

/**
 * Returns the map event listener. May be null.<br>
 * @return The map event listener.
 */
  public MapEventListener getMapEventListener() {
  long cPtr = BaseMapViewModuleJNI.BaseMapView_getMapEventListener(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.ui.MapEventListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the map event listener. If a null pointer is passed no map events will be generated. The default is null.<br>
 * @param mapEventListener The new map event listener.
 */
  public void setMapEventListener(MapEventListener mapEventListener) {
    BaseMapViewModuleJNI.BaseMapView_setMapEventListener(swigCPtr, this, MapEventListener.getCPtr(mapEventListener), mapEventListener);
  }

/**
 * Returns the redraw request listener.<br>
 * @return The redraw request listener.
 */
  public RedrawRequestListener getRedrawRequestListener() {
  long cPtr = BaseMapViewModuleJNI.BaseMapView_getRedrawRequestListener(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.renderers.RedrawRequestListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the listener which will notified when the map needs to be redrawn<br>
 * @param listener The redraw listener.
 */
  public void setRedrawRequestListener(RedrawRequestListener listener) {
    BaseMapViewModuleJNI.BaseMapView_setRedrawRequestListener(swigCPtr, this, RedrawRequestListener.getCPtr(listener), listener);
  }

/**
 * Calculates the map position corresponding to a screen position, using the current view parameters.<br>
 * @param screenPos The screen position.<br>
 * @return The calculated map position in base projection coordinate system. If the given screen position is not on the map, NaNs are returned.
 */
  public MapPos screenToMap(ScreenPos screenPos) { return new MapPos(BaseMapViewModuleJNI.BaseMapView_screenToMap(swigCPtr, this, ScreenPos.getCPtr(screenPos), screenPos), true); }

/**
 * Calculates the screen position corresponding to a map position, using the current view parameters.<br>
 * @param mapPos The map position in base projection coordinate system.<br>
 * @return The calculated screen position. Can be off-screen.
 */
  public ScreenPos mapToScreen(MapPos mapPos) { return new ScreenPos(BaseMapViewModuleJNI.BaseMapView_mapToScreen(swigCPtr, this, MapPos.getCPtr(mapPos), mapPos), true); }

/**
 * Cancels all qued tasks such as tile and vector data fetches. Tasks that have already started<br>
 * may continue until they finish. Tasks that are added after this method call are not affected.
 */
  public void cancelAllTasks() {
    BaseMapViewModuleJNI.BaseMapView_cancelAllTasks(swigCPtr, this);
  }

/**
 * Releases the memory occupied by the preloading area. Calling this method releases some<br>
 * memory if preloading is enabled, but means that the area right outside the visible area has to be<br>
 * fetched again.
 */
  public void clearPreloadingCaches() {
    BaseMapViewModuleJNI.BaseMapView_clearPreloadingCaches(swigCPtr, this);
  }

/**
 * Releases memory occupied by all caches. Calling this means that everything has to be fetched again,<br>
 * including the visible area.
 */
  public void clearAllCaches() {
    BaseMapViewModuleJNI.BaseMapView_clearAllCaches(swigCPtr, this);
  }

}
