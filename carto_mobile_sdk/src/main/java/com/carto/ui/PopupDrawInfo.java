/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.ui;

import com.carto.core.ScreenPos;
import com.carto.core.ScreenBounds;
import com.carto.vectorelements.Popup;

/**
 * A container class that provides information how to draw the popup.
 */
public class PopupDrawInfo {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public PopupDrawInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(PopupDrawInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        PopupDrawInfoModuleJNI.delete_PopupDrawInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof PopupDrawInfo) {
      return ((PopupDrawInfo)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs a PopupClickInfo object from a click position and a vector element.<br>
 * @param anchorScreenPos The screen position of the anchor point of this popup in pixels.<br>
 * @param screenBounds The screen bounds for clipping the popup.<br>
 * @param popup The popup on which the click was performed.<br>
 * @param dpToPX The value used for converting display independent pixels (dp) to pixels (px).
 */
  public PopupDrawInfo(ScreenPos anchorScreenPos, ScreenBounds screenBounds, Popup popup, float dpToPX) {
    this(PopupDrawInfoModuleJNI.new_PopupDrawInfo(ScreenPos.getCPtr(anchorScreenPos), anchorScreenPos, ScreenBounds.getCPtr(screenBounds), screenBounds, Popup.getCPtr(popup), popup, dpToPX), true);
  }

/**
 * Returns the screen position of the anchor point of this popup in pixels.<br>
 * @return The screen position of the anchor point of this popup in pixels.
 */
  public ScreenPos getAnchorScreenPos() { return new ScreenPos(PopupDrawInfoModuleJNI.PopupDrawInfo_getAnchorScreenPos(swigCPtr, this), true); }

/**
 * Returns the screen bounds, so that the popup can be clipped if neccessary.<br>
 * @return The screen bounds in pixels.
 */
  public ScreenBounds getScreenBounds() { return new ScreenBounds(PopupDrawInfoModuleJNI.PopupDrawInfo_getScreenBounds(swigCPtr, this), true); }

/**
 * Returns the popup to draw.<br>
 * @return The popup to draw.
 */
  public Popup getPopup() {
  long cPtr = PopupDrawInfoModuleJNI.PopupDrawInfo_getPopup(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.vectorelements.Popup.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the value used for converting display independent pixels (dp) to pixels (px).<br>
 * @return The value used for converting display independent pixels (dp) to pixels (px).
 */
  public float getDPToPX() {
    return PopupDrawInfoModuleJNI.PopupDrawInfo_getDPToPX(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return PopupDrawInfoModuleJNI.PopupDrawInfo_swigGetRawPtr(swigCPtr, this);
  }

}
