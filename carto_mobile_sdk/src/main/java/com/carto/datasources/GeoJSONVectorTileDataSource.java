/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.core.Variant;
import com.carto.datasources.TileDataSource;
import com.carto.datasources.components.TileData;
import com.carto.geometry.FeatureCollection;
import com.carto.projections.Projection;

/**
 * A tile data source that builds vector tiles from GeoJSON inputs.
 */
@com.carto.utils.DontObfuscate public class GeoJSONVectorTileDataSource extends TileDataSource {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public GeoJSONVectorTileDataSource(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(GeoJSONVectorTileDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GeoJSONVectorTileDataSourceModuleJNI.delete_GeoJSONVectorTileDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.GeoJSONVectorTileDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.GeoJSONVectorTileDataSource) director;
    }

    String objClassName = com.carto.datasources.GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.GeoJSONVectorTileDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.GeoJSONVectorTileDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a GeoJSONVectorTileDataSource object.<br>
 * Note: EPSG3857 projection is used.<br>
 * @param minZoom The minimum zoom level supported by this data source.<br>
 * @param maxZoom The maximum zoom level supported by this data source.
 */
  public GeoJSONVectorTileDataSource(int minZoom, int maxZoom) {
    this(GeoJSONVectorTileDataSourceModuleJNI.new_GeoJSONVectorTileDataSource(minZoom, maxZoom), true);
    GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

/**
 * Returns the simplification tolerance in tile pixels.<br>
 * @return The simplification tolerance in tile pixels.
 */
  public float getSimplifyTolerance() {
    return GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_getSimplifyTolerance(swigCPtr, this);
  }

/**
 * Sets the simplification tolerance in tile pixels.<br>
 * @param tolerance The simplification tolerance in tile pixels. The default is 1.0. Use 0.0 to disable simplification.
 */
  public void setSimplifyTolerance(float tolerance) {
    GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_setSimplifyTolerance(swigCPtr, this, tolerance);
  }

/**
 * Returns the default layer buffer in tile pixels.<br>
 * @return The default layer buffer in tile pixels.
 */
  public float getDefaultLayerBuffer() {
    return GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_getDefaultLayerBuffer(swigCPtr, this);
  }

/**
 * Sets the default layer buffer in tile pixels. This buffer value will be used for all layers created afterwards.<br>
 * 
 */
  public void setDefaultLayerBuffer(float tolerance) {
    GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_setDefaultLayerBuffer(swigCPtr, this, tolerance);
  }

/**
 * Creates a new layer with specified name.<br>
 * @param name The name for the layer.<br>
 * @return The layer index of the created layer.<br>
 * @throws java.lang.Exception If an error occured during creation of the layer.
 */
  public int createLayer(String name) throws java.io.IOException {
    return GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_createLayer(swigCPtr, this, name);
  }

/**
 * Sets the features of the specified layer.<br>
 * @param layerIndex The index of the layer. A layer with empty name will be created if it does not exist yet.<br>
 * @param geoJSON A geojson type variant that MUST contain single FeatureColletion element.<br>
 * @throws java.lang.Exception If an error occured during updating the layer.
 */
  public void setLayerGeoJSON(int layerIndex, Variant geoJSON) throws java.io.IOException {
    GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_setLayerGeoJSON(swigCPtr, this, layerIndex, Variant.getCPtr(geoJSON), geoJSON);
  }

/**
 * Sets the feature collection of the specified layer.<br>
 * @param layerIndex The index of the layer. A layer with empty name will be created if it does not exist yet.<br>
 * @param projection Projection for the features in featureCollection. Can be null if the coordinates are based on WGS84.<br>
 * @param featureCollection The feature collection for the specified layer.<br>
 * @throws java.lang.Exception If an error occured during updating the layer.
 */
  public void setLayerFeatureCollection(int layerIndex, Projection projection, FeatureCollection featureCollection) throws java.io.IOException {
    GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_setLayerFeatureCollection(swigCPtr, this, layerIndex, Projection.getCPtr(projection), projection, FeatureCollection.getCPtr(featureCollection), featureCollection);
  }

/**
 * Deletes an existing layer.<br>
 * @param layerIndex The index of layer to delete.
 */
  public void deleteLayer(int layerIndex) {
    GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_deleteLayer(swigCPtr, this, layerIndex);
  }

  public MapBounds getDataExtent() { return new MapBounds((getClass() == GeoJSONVectorTileDataSource.class) ? GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_getDataExtent(swigCPtr, this) : GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_getDataExtentSwigExplicitGeoJSONVectorTileDataSource(swigCPtr, this), true); }

  public TileData loadTile(MapTile mapTile) {
    long cPtr = (getClass() == GeoJSONVectorTileDataSource.class) ? GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_loadTile(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile) : GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_loadTileSwigExplicitGeoJSONVectorTileDataSource(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile);
    return (cPtr == 0) ? null : new TileData(cPtr, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return GeoJSONVectorTileDataSourceModuleJNI.GeoJSONVectorTileDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
