/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapBounds;
import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.core.StringMap;
import com.carto.datasources.CacheTileDataSource;
import com.carto.datasources.TileDownloadListener;
import com.carto.datasources.components.TileData;

/** @hidden */
@com.carto.utils.DontObfuscate public class PersistentCacheTileDataSourceModuleJNI {
  public final static native long new_PersistentCacheTileDataSource(long jarg1, TileDataSource jarg1_, String jarg2);
  public final static native void delete_PersistentCacheTileDataSource(long jarg1);
  public final static native boolean PersistentCacheTileDataSource_isCacheOnlyMode(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native void PersistentCacheTileDataSource_setCacheOnlyMode(long jarg1, PersistentCacheTileDataSource jarg1_, boolean jarg2);
  public final static native void PersistentCacheTileDataSource_startDownloadArea(long jarg1, PersistentCacheTileDataSource jarg1_, long jarg2, MapBounds jarg2_, int jarg3, int jarg4, long jarg5, TileDownloadListener jarg5_);
  public final static native void PersistentCacheTileDataSource_stopAllDownloads(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native boolean PersistentCacheTileDataSource_isOpen(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native void PersistentCacheTileDataSource_close(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native long PersistentCacheTileDataSource_loadTile(long jarg1, PersistentCacheTileDataSource jarg1_, long jarg2, MapTile jarg2_);
  public final static native long PersistentCacheTileDataSource_loadTileSwigExplicitPersistentCacheTileDataSource(long jarg1, PersistentCacheTileDataSource jarg1_, long jarg2, MapTile jarg2_);
  public final static native void PersistentCacheTileDataSource_clear(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native void PersistentCacheTileDataSource_clearSwigExplicitPersistentCacheTileDataSource(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native long PersistentCacheTileDataSource_getCapacity(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native long PersistentCacheTileDataSource_getCapacitySwigExplicitPersistentCacheTileDataSource(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native void PersistentCacheTileDataSource_setCapacity(long jarg1, PersistentCacheTileDataSource jarg1_, long jarg2);
  public final static native void PersistentCacheTileDataSource_setCapacitySwigExplicitPersistentCacheTileDataSource(long jarg1, PersistentCacheTileDataSource jarg1_, long jarg2);
  public final static native long PersistentCacheTileDataSource_swigGetRawPtr(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native String PersistentCacheTileDataSource_swigGetClassName(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native Object PersistentCacheTileDataSource_swigGetDirectorObject(long jarg1, PersistentCacheTileDataSource jarg1_);
  public final static native void PersistentCacheTileDataSource_director_connect(PersistentCacheTileDataSource obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void PersistentCacheTileDataSource_change_ownership(PersistentCacheTileDataSource obj, long cptr, boolean take_or_release);
  public final static native long PersistentCacheTileDataSource_SWIGSmartPtrUpcast(long jarg1);

  public static int SwigDirector_PersistentCacheTileDataSource_getMinZoom(PersistentCacheTileDataSource self) {
    return self.getMinZoom();
  }
  public static int SwigDirector_PersistentCacheTileDataSource_getMaxZoom(PersistentCacheTileDataSource self) {
    return self.getMaxZoom();
  }
  public static long SwigDirector_PersistentCacheTileDataSource_getDataExtent(PersistentCacheTileDataSource self) {
    return MapBounds.getCPtr(self.getDataExtent());
  }
  public static long SwigDirector_PersistentCacheTileDataSource_loadTile(PersistentCacheTileDataSource self, long mapTile) {
    return TileData.getCPtr(self.loadTile(new MapTile(mapTile, true)));
  }
  public static void SwigDirector_PersistentCacheTileDataSource_notifyTilesChanged(PersistentCacheTileDataSource self, boolean removeTiles) {
    self.notifyTilesChanged(removeTiles);
  }
  public static void SwigDirector_PersistentCacheTileDataSource_clear(PersistentCacheTileDataSource self) {
    self.clear();
  }
  public static long SwigDirector_PersistentCacheTileDataSource_getCapacity(PersistentCacheTileDataSource self) {
    return self.getCapacity();
  }
  public static void SwigDirector_PersistentCacheTileDataSource_setCapacity(PersistentCacheTileDataSource self, long capacityInBytes) {
    self.setCapacity(capacityInBytes);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
