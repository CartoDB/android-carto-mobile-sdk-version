/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.core.StringVector;
import com.carto.core.StringMap;
import com.carto.datasources.TileDataSource;
import com.carto.datasources.components.TileData;

/** @hidden */
@com.carto.utils.DontObfuscate public class HTTPTileDataSourceModuleJNI {
  public final static native long new_HTTPTileDataSource(int jarg1, int jarg2, String jarg3);
  public final static native void delete_HTTPTileDataSource(long jarg1);
  public final static native String HTTPTileDataSource_getBaseURL(long jarg1, HTTPTileDataSource jarg1_);
  public final static native void HTTPTileDataSource_setBaseURL(long jarg1, HTTPTileDataSource jarg1_, String jarg2);
  public final static native long HTTPTileDataSource_getSubdomains(long jarg1, HTTPTileDataSource jarg1_);
  public final static native void HTTPTileDataSource_setSubdomains(long jarg1, HTTPTileDataSource jarg1_, long jarg2, StringVector jarg2_);
  public final static native boolean HTTPTileDataSource_isTMSScheme(long jarg1, HTTPTileDataSource jarg1_);
  public final static native void HTTPTileDataSource_setTMSScheme(long jarg1, HTTPTileDataSource jarg1_, boolean jarg2);
  public final static native boolean HTTPTileDataSource_isMaxAgeHeaderCheck(long jarg1, HTTPTileDataSource jarg1_);
  public final static native void HTTPTileDataSource_setMaxAgeHeaderCheck(long jarg1, HTTPTileDataSource jarg1_, boolean jarg2);
  public final static native int HTTPTileDataSource_getTimeout(long jarg1, HTTPTileDataSource jarg1_);
  public final static native void HTTPTileDataSource_setTimeout(long jarg1, HTTPTileDataSource jarg1_, int jarg2);
  public final static native long HTTPTileDataSource_getHTTPHeaders(long jarg1, HTTPTileDataSource jarg1_);
  public final static native void HTTPTileDataSource_setHTTPHeaders(long jarg1, HTTPTileDataSource jarg1_, long jarg2, StringMap jarg2_);
  public final static native long HTTPTileDataSource_loadTile(long jarg1, HTTPTileDataSource jarg1_, long jarg2, MapTile jarg2_);
  public final static native long HTTPTileDataSource_loadTileSwigExplicitHTTPTileDataSource(long jarg1, HTTPTileDataSource jarg1_, long jarg2, MapTile jarg2_);
  public final static native String HTTPTileDataSource_buildTileURL(long jarg1, HTTPTileDataSource jarg1_, String jarg2, long jarg3, MapTile jarg3_);
  public final static native String HTTPTileDataSource_buildTileURLSwigExplicitHTTPTileDataSource(long jarg1, HTTPTileDataSource jarg1_, String jarg2, long jarg3, MapTile jarg3_);
  public final static native long HTTPTileDataSource_swigGetRawPtr(long jarg1, HTTPTileDataSource jarg1_);
  public final static native String HTTPTileDataSource_swigGetClassName(long jarg1, HTTPTileDataSource jarg1_);
  public final static native Object HTTPTileDataSource_swigGetDirectorObject(long jarg1, HTTPTileDataSource jarg1_);
  public final static native void HTTPTileDataSource_director_connect(HTTPTileDataSource obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTTPTileDataSource_change_ownership(HTTPTileDataSource obj, long cptr, boolean take_or_release);
  public final static native long HTTPTileDataSource_SWIGSmartPtrUpcast(long jarg1);

  public static int SwigDirector_HTTPTileDataSource_getMinZoom(HTTPTileDataSource self) {
    return self.getMinZoom();
  }
  public static int SwigDirector_HTTPTileDataSource_getMaxZoom(HTTPTileDataSource self) {
    return self.getMaxZoom();
  }
  public static long SwigDirector_HTTPTileDataSource_getDataExtent(HTTPTileDataSource self) {
    return MapBounds.getCPtr(self.getDataExtent());
  }
  public static long SwigDirector_HTTPTileDataSource_loadTile(HTTPTileDataSource self, long mapTile) {
    return TileData.getCPtr(self.loadTile(new MapTile(mapTile, true)));
  }
  public static void SwigDirector_HTTPTileDataSource_notifyTilesChanged(HTTPTileDataSource self, boolean removeTiles) {
    self.notifyTilesChanged(removeTiles);
  }
  public static String SwigDirector_HTTPTileDataSource_buildTileURL(HTTPTileDataSource self, String baseURL, long tile) {
    return self.buildTileURL(baseURL, new MapTile(tile, true));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
