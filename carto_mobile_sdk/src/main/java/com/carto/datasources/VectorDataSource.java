/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapBounds;
import com.carto.datasources.components.VectorData;
import com.carto.projections.Projection;
import com.carto.renderers.components.CullState;
import com.carto.graphics.ViewState;

/**
 * Abstract base class for envelope based vector data sources. It provides default implementation<br>
 * for listener registration and other common data source methods.<br>
 * Subclasses need to define their own implementations of loadElements method.<br>
 * <br>
 * The draw order of vector elements within the data source is undefined.
 */
@com.carto.utils.DontObfuscate public class VectorDataSource {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public VectorDataSource(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(VectorDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        VectorDataSourceModuleJNI.delete_VectorDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    VectorDataSourceModuleJNI.VectorDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    VectorDataSourceModuleJNI.VectorDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.VectorDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.VectorDataSourceModuleJNI.VectorDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.VectorDataSource) director;
    }

    String objClassName = com.carto.datasources.VectorDataSourceModuleJNI.VectorDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.VectorDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.VectorDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Returns the extent of the data of this data source.<br>
 * The bounds are in coordinate system of the projection of the data source.<br>
 * @return The extent of the data source.
 */
  public MapBounds getDataExtent() { return new MapBounds((getClass() == VectorDataSource.class) ? VectorDataSourceModuleJNI.VectorDataSource_getDataExtent(swigCPtr, this) : VectorDataSourceModuleJNI.VectorDataSource_getDataExtentSwigExplicitVectorDataSource(swigCPtr, this), true); }

/**
 * Returns the projection used by this data source.<br>
 * @return The projection used by this data source.
 */
  public Projection getProjection() {
  long cPtr = VectorDataSourceModuleJNI.VectorDataSource_getProjection(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.projections.Projection.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Loads all the elements within the defined envelope.<br>
 * @param cullState State for describing view parameters and conservative view envelope.<br>
 * @return The vector of loaded vector elements. If no elements are available, null may be returned.
 */
  public VectorData loadElements(CullState cullState) {
    long cPtr = VectorDataSourceModuleJNI.VectorDataSource_loadElements(swigCPtr, this, CullState.getCPtr(cullState), cullState);
    return (cPtr == 0) ? null : new VectorData(cPtr, true);
  }

/**
 * Notifies listeners that all vector elements have changed. This method refreshes all the existing <br>
 * vector elements in the data source.
 */
  public void notifyElementsChanged() {
    VectorDataSourceModuleJNI.VectorDataSource_notifyElementsChanged(swigCPtr, this);
  }

/**
 * Constructs an abstract VectorDataSource object.<br>
 * @param projection The projection used by this data source.
 */
  protected VectorDataSource(Projection projection) {
    this(VectorDataSourceModuleJNI.new_VectorDataSource(Projection.getCPtr(projection), projection), true);
    VectorDataSourceModuleJNI.VectorDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return VectorDataSourceModuleJNI.VectorDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return VectorDataSourceModuleJNI.VectorDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return VectorDataSourceModuleJNI.VectorDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
