/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources.components;

import com.carto.core.BinaryData;

/**
 * A wrapper class for tile data.
 */
public class TileData {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public TileData(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(TileData obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TileDataModuleJNI.delete_TileData(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof TileData) {
      return ((TileData)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs a TileData object from a data blob.<br>
 * @param data The source tile data.
 */
  public TileData(BinaryData data) {
    this(TileDataModuleJNI.new_TileData(BinaryData.getCPtr(data), data), true);
  }

/**
 * Returns the maximum age of the tile data, tile data will expire after that point.<br>
 * @return Tile data maximum age in milliseconds, or -1 if the data does not expire.
 */
  public long getMaxAge() {
    return TileDataModuleJNI.TileData_getMaxAge(swigCPtr, this);
  }

/**
 * Sets the maximum age of tile data, tile data will expire after that point.<br>
 * @param maxAge Tile data maximum age in milliseconds, or -1 if the data does not expire.
 */
  public void setMaxAge(long maxAge) {
    TileDataModuleJNI.TileData_setMaxAge(swigCPtr, this, maxAge);
  }

/**
 * Returns true if the tile should be replaced with parent tile.<br>
 * @return True if the tile should be replaced with parent. False otherwise.
 */
  public boolean isReplaceWithParent() {
    return TileDataModuleJNI.TileData_isReplaceWithParent(swigCPtr, this);
  }

/**
 * Set the parent replacement flag.<br>
 * @param flag True when the tile should be replaced with the parent, false otherwise.
 */
  public void setReplaceWithParent(boolean flag) {
    TileDataModuleJNI.TileData_setReplaceWithParent(swigCPtr, this, flag);
  }

/**
 * Returns tile data as binary data.<br>
 * @return Tile data as binary data.
 */
  public BinaryData getData() {
    long cPtr = TileDataModuleJNI.TileData_getData(swigCPtr, this);
    return (cPtr == 0) ? null : new BinaryData(cPtr, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return TileDataModuleJNI.TileData_swigGetRawPtr(swigCPtr, this);
  }

}
