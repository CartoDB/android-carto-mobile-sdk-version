/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapTile;

/**
 * Listener for tile downloader.
 */
@com.carto.utils.DontObfuscate public class TileDownloadListener {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public TileDownloadListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(TileDownloadListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TileDownloadListenerModuleJNI.delete_TileDownloadListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    TileDownloadListenerModuleJNI.TileDownloadListener_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    TileDownloadListenerModuleJNI.TileDownloadListener_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.TileDownloadListener swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.TileDownloadListenerModuleJNI.TileDownloadListener_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.TileDownloadListener) director;
    }

    String objClassName = com.carto.datasources.TileDownloadListenerModuleJNI.TileDownloadListener_swigGetClassName(cPtr, null);
    com.carto.datasources.TileDownloadListener objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.TileDownloadListener) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Listener method that is called before download has actually started to report the total tile count.<br>
 * @param tileCount The number of tiles that will be downloaded (if not already in the cache).
 */
  public void onDownloadStarting(int tileCount) {
    if (getClass() == TileDownloadListener.class) TileDownloadListenerModuleJNI.TileDownloadListener_onDownloadStarting(swigCPtr, this, tileCount); else TileDownloadListenerModuleJNI.TileDownloadListener_onDownloadStartingSwigExplicitTileDownloadListener(swigCPtr, this, tileCount);
  }

/**
 * Listener method that is called to report about download progress.<br>
 * @param progress The progress of the download, from 0 to 100.
 */
  public void onDownloadProgress(float progress) {
    if (getClass() == TileDownloadListener.class) TileDownloadListenerModuleJNI.TileDownloadListener_onDownloadProgress(swigCPtr, this, progress); else TileDownloadListenerModuleJNI.TileDownloadListener_onDownloadProgressSwigExplicitTileDownloadListener(swigCPtr, this, progress);
  }

/**
 * Listener method that is called when downloading has finished.
 */
  public void onDownloadCompleted() {
    if (getClass() == TileDownloadListener.class) TileDownloadListenerModuleJNI.TileDownloadListener_onDownloadCompleted(swigCPtr, this); else TileDownloadListenerModuleJNI.TileDownloadListener_onDownloadCompletedSwigExplicitTileDownloadListener(swigCPtr, this);
  }

/**
 * Listener method that is called when a tile download fails.<br>
 * @param tile The tile that could not be downloaded.
 */
  public void onDownloadFailed(MapTile tile) {
    if (getClass() == TileDownloadListener.class) TileDownloadListenerModuleJNI.TileDownloadListener_onDownloadFailed(swigCPtr, this, MapTile.getCPtr(tile), tile); else TileDownloadListenerModuleJNI.TileDownloadListener_onDownloadFailedSwigExplicitTileDownloadListener(swigCPtr, this, MapTile.getCPtr(tile), tile);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return TileDownloadListenerModuleJNI.TileDownloadListener_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return TileDownloadListenerModuleJNI.TileDownloadListener_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return TileDownloadListenerModuleJNI.TileDownloadListener_swigGetDirectorObject(swigCPtr, this);
  }

  public TileDownloadListener() {
    this(TileDownloadListenerModuleJNI.new_TileDownloadListener(), true);
    TileDownloadListenerModuleJNI.TileDownloadListener_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

}
