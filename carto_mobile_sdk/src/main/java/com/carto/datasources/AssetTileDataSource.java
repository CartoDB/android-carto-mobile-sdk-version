/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.core.StringMap;
import com.carto.datasources.TileDataSource;
import com.carto.datasources.components.TileData;

/**
 * A tile data source where each map tile is a seperate image file bundled with the application.<br>
 * The requests are generated using a template scheme, where tags in the basePath string are replaced with actual values.<br>
 * The following tags are supported: zoom, x, y, xflipped, yflipped, quadkey.<br>
 * <br>
 * For example, if basePath = "t{zoom}_{x}_{y}.png" and the requested tile has zoom == 2,<br>
 * x == 1 and y == 3, then the tile will be loaded from the following path: "t2_1_2.png".
 */
@com.carto.utils.DontObfuscate public class AssetTileDataSource extends TileDataSource {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public AssetTileDataSource(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(AssetTileDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AssetTileDataSourceModuleJNI.delete_AssetTileDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    AssetTileDataSourceModuleJNI.AssetTileDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    AssetTileDataSourceModuleJNI.AssetTileDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.AssetTileDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.AssetTileDataSourceModuleJNI.AssetTileDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.AssetTileDataSource) director;
    }

    String objClassName = com.carto.datasources.AssetTileDataSourceModuleJNI.AssetTileDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.AssetTileDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.AssetTileDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs an AssetTileDataSource object.<br>
 * @param minZoom The minimum zoom level supported by this data source.<br>
 * @param maxZoom The maximum zoom level supported by this data source.<br>
 * @param basePath The base path containing tags (for example, "t{zoom}_{x}_{y}.png").
 */
  public AssetTileDataSource(int minZoom, int maxZoom, String basePath) {
    this(AssetTileDataSourceModuleJNI.new_AssetTileDataSource(minZoom, maxZoom, basePath), true);
    AssetTileDataSourceModuleJNI.AssetTileDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TileData loadTile(MapTile tile) {
    long cPtr = (getClass() == AssetTileDataSource.class) ? AssetTileDataSourceModuleJNI.AssetTileDataSource_loadTile(swigCPtr, this, MapTile.getCPtr(tile), tile) : AssetTileDataSourceModuleJNI.AssetTileDataSource_loadTileSwigExplicitAssetTileDataSource(swigCPtr, this, MapTile.getCPtr(tile), tile);
    return (cPtr == 0) ? null : new TileData(cPtr, true);
  }

  protected String buildAssetPath(String basePath, MapTile tile) {
    return (getClass() == AssetTileDataSource.class) ? AssetTileDataSourceModuleJNI.AssetTileDataSource_buildAssetPath(swigCPtr, this, basePath, MapTile.getCPtr(tile), tile) : AssetTileDataSourceModuleJNI.AssetTileDataSource_buildAssetPathSwigExplicitAssetTileDataSource(swigCPtr, this, basePath, MapTile.getCPtr(tile), tile);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return AssetTileDataSourceModuleJNI.AssetTileDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return AssetTileDataSourceModuleJNI.AssetTileDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return AssetTileDataSourceModuleJNI.AssetTileDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
