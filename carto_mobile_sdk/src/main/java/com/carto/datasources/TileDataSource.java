/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.core.StringMap;
import com.carto.datasources.components.TileData;
import com.carto.projections.Projection;

/**
 * Abstract base class for tile data sources. It provides default implementation <br>
 * for listener registration and other common tile data source methods.
 */
@com.carto.utils.DontObfuscate public class TileDataSource {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public TileDataSource(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(TileDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TileDataSourceModuleJNI.delete_TileDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    TileDataSourceModuleJNI.TileDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    TileDataSourceModuleJNI.TileDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.TileDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.TileDataSourceModuleJNI.TileDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.TileDataSource) director;
    }

    String objClassName = com.carto.datasources.TileDataSourceModuleJNI.TileDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.TileDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.TileDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Returns the minimum zoom level supported by this data source.<br>
 * @return The minimum zoom level supported (inclusive).
 */
  public int getMinZoom() {
    return (getClass() == TileDataSource.class) ? TileDataSourceModuleJNI.TileDataSource_getMinZoom(swigCPtr, this) : TileDataSourceModuleJNI.TileDataSource_getMinZoomSwigExplicitTileDataSource(swigCPtr, this);
  }

/**
 * Returns the maximum zoom level supported by this data source.<br>
 * @return The maximum zoom level supported (exclusive).
 */
  public int getMaxZoom() {
    return (getClass() == TileDataSource.class) ? TileDataSourceModuleJNI.TileDataSource_getMaxZoom(swigCPtr, this) : TileDataSourceModuleJNI.TileDataSource_getMaxZoomSwigExplicitTileDataSource(swigCPtr, this);
  }

/**
 * Returns the extent of the tiles in this data source.<br>
 * The bounds are in coordinate system of the projection of the data source.<br>
 * @return The extent of the data source.
 */
  public MapBounds getDataExtent() { return new MapBounds((getClass() == TileDataSource.class) ? TileDataSourceModuleJNI.TileDataSource_getDataExtent(swigCPtr, this) : TileDataSourceModuleJNI.TileDataSource_getDataExtentSwigExplicitTileDataSource(swigCPtr, this), true); }

/**
 * Returns the projection of this tile source.<br>
 * @return The projection of this tile source.
 */
  public Projection getProjection() {
  long cPtr = TileDataSourceModuleJNI.TileDataSource_getProjection(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.projections.Projection.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Loads the specified tile.<br>
 * Note: the tile coordinate system used here is vertically flipped relative to layer tile coordinate system.<br>
 * @param tile The tile to load.<br>
 * @return The tile data. If the tile is not available, null may be returned.
 */
  public TileData loadTile(MapTile tile) {
    long cPtr = TileDataSourceModuleJNI.TileDataSource_loadTile(swigCPtr, this, MapTile.getCPtr(tile), tile);
    return (cPtr == 0) ? null : new TileData(cPtr, true);
  }

/**
 * Notifies listeners that the tiles have changed. Action taken depends on the implementation of the<br>
 * listeners, but generally all cached tiles will be reloaded. If the removeTiles flag is set all caches will be cleared<br>
 * prior to reloading, if it's not set then the reloaded tiles will replace the old tiles in caches as they finish loading.<br>
 * @param removeTiles The remove tiles flag.
 */
  public void notifyTilesChanged(boolean removeTiles) {
    if (getClass() == TileDataSource.class) TileDataSourceModuleJNI.TileDataSource_notifyTilesChanged(swigCPtr, this, removeTiles); else TileDataSourceModuleJNI.TileDataSource_notifyTilesChangedSwigExplicitTileDataSource(swigCPtr, this, removeTiles);
  }

/**
 * Constructs an abstract TileDataSource object.<br>
 * Note: EPSG3857 projection is used. minZoom is defined to be 0, maxZoom is defined to be 24.
 */
  protected TileDataSource() {
    this(TileDataSourceModuleJNI.new_TileDataSource__SWIG_0(), true);
    TileDataSourceModuleJNI.TileDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

/**
 * Constructs an abstract TileDataSource object.<br>
 * Note: EPSG3857 projection is used.<br>
 * @param minZoom The minimum zoom level supported by this data source.<br>
 * @param maxZoom The maximum zoom level supported by this data source.
 */
  protected TileDataSource(int minZoom, int maxZoom) {
    this(TileDataSourceModuleJNI.new_TileDataSource__SWIG_1(minZoom, maxZoom), true);
    TileDataSourceModuleJNI.TileDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return TileDataSourceModuleJNI.TileDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return TileDataSourceModuleJNI.TileDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return TileDataSourceModuleJNI.TileDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
