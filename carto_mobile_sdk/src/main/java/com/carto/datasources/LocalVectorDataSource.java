/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapBounds;
import com.carto.datasources.VectorDataSource;
import com.carto.datasources.components.VectorData;
import com.carto.geometry.FeatureCollection;
import com.carto.geometry.GeometrySimplifier;
import com.carto.projections.Projection;
import com.carto.renderers.components.CullState;
import com.carto.styles.Style;
import com.carto.vectorelements.VectorElement;
import com.carto.vectorelements.VectorElementVector;

/**
 * A modifiable vector data source that keeps all the elements in the local memory.<br>
 * Optionally vector elements can be kept in a spatial index and only the visible elements get rendered.<br>
 * There can be a small delay before previously invisible elements become visible after view changes.<br>
 * This makes it suitable for cases where there are a large number of static vector elements.<br>
 * <br>
 * The draw order of vector elements within the data source is undefined.
 */
@com.carto.utils.DontObfuscate public class LocalVectorDataSource extends VectorDataSource {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public LocalVectorDataSource(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(LocalVectorDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LocalVectorDataSourceModuleJNI.delete_LocalVectorDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    LocalVectorDataSourceModuleJNI.LocalVectorDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    LocalVectorDataSourceModuleJNI.LocalVectorDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.LocalVectorDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.LocalVectorDataSourceModuleJNI.LocalVectorDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.LocalVectorDataSource) director;
    }

    String objClassName = com.carto.datasources.LocalVectorDataSourceModuleJNI.LocalVectorDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.LocalVectorDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.LocalVectorDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs an LocalVectorDataSource object with no spatial index.<br>
 * @param projection The projection used by this data source.
 */
  public LocalVectorDataSource(Projection projection) {
    this(LocalVectorDataSourceModuleJNI.new_LocalVectorDataSource__SWIG_0(Projection.getCPtr(projection), projection), true);
    LocalVectorDataSourceModuleJNI.LocalVectorDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

/**
 * Constructs an LocalVectorDataSource object with specified spatial index.<br>
 * @param projection The projection used by this data source.<br>
 * @param spatialIndexType The spatial index type to use.
 */
  public LocalVectorDataSource(Projection projection, LocalSpatialIndexType spatialIndexType) {
    this(LocalVectorDataSourceModuleJNI.new_LocalVectorDataSource__SWIG_1(Projection.getCPtr(projection), projection, spatialIndexType.swigValue()), true);
    LocalVectorDataSourceModuleJNI.LocalVectorDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

/**
 * Clear the data source by removing all elements.
 */
  public void clear() {
    LocalVectorDataSourceModuleJNI.LocalVectorDataSource_clear(swigCPtr, this);
  }

/**
 * Returns all vector elements added to this data source using add() and addAll() methods.<br>
 * @return A vector containing all the vector elements in this data source.
 */
  public VectorElementVector getAll() { return new VectorElementVector(LocalVectorDataSourceModuleJNI.LocalVectorDataSource_getAll(swigCPtr, this), true); }

/**
 * Replaces all vector elements in the data source with the given list of vector elements.<br>
 * @param elements The list of new vector elements
 */
  public void setAll(VectorElementVector elements) {
    LocalVectorDataSourceModuleJNI.LocalVectorDataSource_setAll(swigCPtr, this, VectorElementVector.getCPtr(elements), elements);
  }

/**
 * Adds a vector element to the data source. The vector element's coordinates are expected to be<br>
 * in the data source's projection's coordinate system. The order in which the elements are added has<br>
 * no effect on the order they get rendered.<br>
 * @param element The vector element to be added.
 */
  public void add(VectorElement element) {
    LocalVectorDataSourceModuleJNI.LocalVectorDataSource_add(swigCPtr, this, VectorElement.getCPtr(element), element);
  }

/**
 * Adds multiple vector elements to the data source. The vector elements' coordinates are expected to be<br>
 * in the data source's projection's coordinate system. The order in which the elements are added has<br>
 * no effect on the order they get rendered.<br>
 * @param elements A list of vector elements to be added.
 */
  public void addAll(VectorElementVector elements) {
    LocalVectorDataSourceModuleJNI.LocalVectorDataSource_addAll(swigCPtr, this, VectorElementVector.getCPtr(elements), elements);
  }

/**
 * Removes a vector element from the data source.<br>
 * @param element The vector element to be removed.<br>
 * @return True if the vector element existed in the data source.
 */
  public boolean remove(VectorElement element) {
    return LocalVectorDataSourceModuleJNI.LocalVectorDataSource_remove(swigCPtr, this, VectorElement.getCPtr(element), element);
  }

/**
 * Removes multiple vector elements from the data source.<br>
 * @param elements A list of vector elements to be removed.<br>
 * @return True if all listed elements were removed. False otherwise.
 */
  public boolean removeAll(VectorElementVector elements) {
    return LocalVectorDataSourceModuleJNI.LocalVectorDataSource_removeAll(swigCPtr, this, VectorElementVector.getCPtr(elements), elements);
  }

/**
 * Returns the active geometry simplifier of the data source.<br>
 * @return The current geometry simplifier (can be null)
 */
  public GeometrySimplifier getGeometrySimplifier() {
  long cPtr = LocalVectorDataSourceModuleJNI.LocalVectorDataSource_getGeometrySimplifier(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.geometry.GeometrySimplifier.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Attaches geometry simplifier to the data source. If the specified simplifier is null, detaches any active simplifier.<br>
 * @param simplifier The new geometry simplifier to use (can be null).
 */
  public void setGeometrySimplifier(GeometrySimplifier simplifier) {
    LocalVectorDataSourceModuleJNI.LocalVectorDataSource_setGeometrySimplifier(swigCPtr, this, GeometrySimplifier.getCPtr(simplifier), simplifier);
  }

/**
 * Returns the elements of this data source as a feature collection. The feature collection can be then serialized as a GeoJSON, for example.<br>
 * @return The feature collection containing all data source elements.
 */
  public FeatureCollection getFeatureCollection() {
  long cPtr = LocalVectorDataSourceModuleJNI.LocalVectorDataSource_getFeatureCollection(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.geometry.FeatureCollection.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Loads all vector elements from specified feature collection by applying specified style.<br>
 * @param featureCollection The feature collection to load elements from.<br>
 * @param style The geometry collection style to use. Only elements compatible with style are created.
 */
  public void addFeatureCollection(FeatureCollection featureCollection, Style style) {
    LocalVectorDataSourceModuleJNI.LocalVectorDataSource_addFeatureCollection(swigCPtr, this, FeatureCollection.getCPtr(featureCollection), featureCollection, Style.getCPtr(style), style);
  }

  public MapBounds getDataExtent() { return new MapBounds((getClass() == LocalVectorDataSource.class) ? LocalVectorDataSourceModuleJNI.LocalVectorDataSource_getDataExtent(swigCPtr, this) : LocalVectorDataSourceModuleJNI.LocalVectorDataSource_getDataExtentSwigExplicitLocalVectorDataSource(swigCPtr, this), true); }

  public VectorData loadElements(CullState cullState) {
    long cPtr = (getClass() == LocalVectorDataSource.class) ? LocalVectorDataSourceModuleJNI.LocalVectorDataSource_loadElements(swigCPtr, this, CullState.getCPtr(cullState), cullState) : LocalVectorDataSourceModuleJNI.LocalVectorDataSource_loadElementsSwigExplicitLocalVectorDataSource(swigCPtr, this, CullState.getCPtr(cullState), cullState);
    return (cPtr == 0) ? null : new VectorData(cPtr, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return LocalVectorDataSourceModuleJNI.LocalVectorDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return LocalVectorDataSourceModuleJNI.LocalVectorDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return LocalVectorDataSourceModuleJNI.LocalVectorDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
