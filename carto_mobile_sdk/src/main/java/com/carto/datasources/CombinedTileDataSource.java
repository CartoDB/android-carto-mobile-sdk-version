/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.core.StringMap;
import com.carto.datasources.TileDataSource;
import com.carto.datasources.components.TileData;

/**
 * A tile data source that combines two data sources (usually offline and online) and selects tiles<br>
 * based on zoom level. All requests below specified zoom level are directed to the first data source<br>
 * and all requests at or above specified zoom level are directed to the second data source.
 */
@com.carto.utils.DontObfuscate public class CombinedTileDataSource extends TileDataSource {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public CombinedTileDataSource(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(CombinedTileDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CombinedTileDataSourceModuleJNI.delete_CombinedTileDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    CombinedTileDataSourceModuleJNI.CombinedTileDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    CombinedTileDataSourceModuleJNI.CombinedTileDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.CombinedTileDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.CombinedTileDataSourceModuleJNI.CombinedTileDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.CombinedTileDataSource) director;
    }

    String objClassName = com.carto.datasources.CombinedTileDataSourceModuleJNI.CombinedTileDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.CombinedTileDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.CombinedTileDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a combined tile data source object.<br>
 * @param dataSource1 First data source that is used if requested tile is below given zoomLevel.<br>
 * @param dataSource2 Second data source that is used if requested tile is at or above given zoomLevel.<br>
 * @param zoomLevel Threshold zoom level value.
 */
  public CombinedTileDataSource(TileDataSource dataSource1, TileDataSource dataSource2, int zoomLevel) {
    this(CombinedTileDataSourceModuleJNI.new_CombinedTileDataSource(TileDataSource.getCPtr(dataSource1), dataSource1, TileDataSource.getCPtr(dataSource2), dataSource2, zoomLevel), true);
    CombinedTileDataSourceModuleJNI.CombinedTileDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public int getMinZoom() {
    return (getClass() == CombinedTileDataSource.class) ? CombinedTileDataSourceModuleJNI.CombinedTileDataSource_getMinZoom(swigCPtr, this) : CombinedTileDataSourceModuleJNI.CombinedTileDataSource_getMinZoomSwigExplicitCombinedTileDataSource(swigCPtr, this);
  }

  public int getMaxZoom() {
    return (getClass() == CombinedTileDataSource.class) ? CombinedTileDataSourceModuleJNI.CombinedTileDataSource_getMaxZoom(swigCPtr, this) : CombinedTileDataSourceModuleJNI.CombinedTileDataSource_getMaxZoomSwigExplicitCombinedTileDataSource(swigCPtr, this);
  }

  public MapBounds getDataExtent() { return new MapBounds((getClass() == CombinedTileDataSource.class) ? CombinedTileDataSourceModuleJNI.CombinedTileDataSource_getDataExtent(swigCPtr, this) : CombinedTileDataSourceModuleJNI.CombinedTileDataSource_getDataExtentSwigExplicitCombinedTileDataSource(swigCPtr, this), true); }

  public TileData loadTile(MapTile tile) {
    long cPtr = (getClass() == CombinedTileDataSource.class) ? CombinedTileDataSourceModuleJNI.CombinedTileDataSource_loadTile(swigCPtr, this, MapTile.getCPtr(tile), tile) : CombinedTileDataSourceModuleJNI.CombinedTileDataSource_loadTileSwigExplicitCombinedTileDataSource(swigCPtr, this, MapTile.getCPtr(tile), tile);
    return (cPtr == 0) ? null : new TileData(cPtr, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return CombinedTileDataSourceModuleJNI.CombinedTileDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return CombinedTileDataSourceModuleJNI.CombinedTileDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return CombinedTileDataSourceModuleJNI.CombinedTileDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
