/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.core.StringMap;
import com.carto.datasources.TileDataSource;
import com.carto.datasources.components.TileData;

/**
 * A tile data source that loads tiles from another tile data source and caches them.
 */
@com.carto.utils.DontObfuscate public class CacheTileDataSource extends TileDataSource {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public CacheTileDataSource(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(CacheTileDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CacheTileDataSourceModuleJNI.delete_CacheTileDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    CacheTileDataSourceModuleJNI.CacheTileDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    CacheTileDataSourceModuleJNI.CacheTileDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.CacheTileDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.CacheTileDataSourceModuleJNI.CacheTileDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.CacheTileDataSource) director;
    }

    String objClassName = com.carto.datasources.CacheTileDataSourceModuleJNI.CacheTileDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.CacheTileDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.CacheTileDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


  public int getMinZoom() {
    return (getClass() == CacheTileDataSource.class) ? CacheTileDataSourceModuleJNI.CacheTileDataSource_getMinZoom(swigCPtr, this) : CacheTileDataSourceModuleJNI.CacheTileDataSource_getMinZoomSwigExplicitCacheTileDataSource(swigCPtr, this);
  }

  public int getMaxZoom() {
    return (getClass() == CacheTileDataSource.class) ? CacheTileDataSourceModuleJNI.CacheTileDataSource_getMaxZoom(swigCPtr, this) : CacheTileDataSourceModuleJNI.CacheTileDataSource_getMaxZoomSwigExplicitCacheTileDataSource(swigCPtr, this);
  }

  public MapBounds getDataExtent() { return new MapBounds((getClass() == CacheTileDataSource.class) ? CacheTileDataSourceModuleJNI.CacheTileDataSource_getDataExtent(swigCPtr, this) : CacheTileDataSourceModuleJNI.CacheTileDataSource_getDataExtentSwigExplicitCacheTileDataSource(swigCPtr, this), true); }

  public void notifyTilesChanged(boolean removeTiles) {
    if (getClass() == CacheTileDataSource.class) CacheTileDataSourceModuleJNI.CacheTileDataSource_notifyTilesChanged(swigCPtr, this, removeTiles); else CacheTileDataSourceModuleJNI.CacheTileDataSource_notifyTilesChangedSwigExplicitCacheTileDataSource(swigCPtr, this, removeTiles);
  }

/**
 * Returns the original data source that the cache uses.<br>
 * @return The original data source.
 */
  public TileDataSource getDataSource() {
  long cPtr = CacheTileDataSourceModuleJNI.CacheTileDataSource_getDataSource(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.datasources.TileDataSource.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Clear the cache.
 */
  public void clear() {
    CacheTileDataSourceModuleJNI.CacheTileDataSource_clear(swigCPtr, this);
  }

/**
 * Returns the tile cache capacity.<br>
 * @return The tile cache capacity in bytes.
 */
  public long getCapacity() {
    return CacheTileDataSourceModuleJNI.CacheTileDataSource_getCapacity(swigCPtr, this);
  }

/**
 * Sets the cache capacity.<br>
 * @param capacityInBytes The new tile cache capacity in bytes.
 */
  public void setCapacity(long capacityInBytes) {
    CacheTileDataSourceModuleJNI.CacheTileDataSource_setCapacity(swigCPtr, this, capacityInBytes);
  }

  protected CacheTileDataSource(TileDataSource dataSource) {
    this(CacheTileDataSourceModuleJNI.new_CacheTileDataSource(TileDataSource.getCPtr(dataSource), dataSource), true);
    CacheTileDataSourceModuleJNI.CacheTileDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return CacheTileDataSourceModuleJNI.CacheTileDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return CacheTileDataSourceModuleJNI.CacheTileDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return CacheTileDataSourceModuleJNI.CacheTileDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
