/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapBounds;
import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.core.StringMap;
import com.carto.datasources.CacheTileDataSource;
import com.carto.datasources.TileDownloadListener;
import com.carto.datasources.components.TileData;

/**
 * A tile data source that loads tiles from another tile data source<br>
 * and caches them in an offline sqlite database. Tiles will remain in the database<br>
 * even after the application is closed.<br>
 * The database contains table "persistent_cache" with the following fields:<br>
 * "tileId" (tile id), "compressed" (compressed tile image),<br>
 * "time" (the time the tile was cached in milliseconds from epoch).<br>
 * Default cache capacity is 50MB.
 */
@com.carto.utils.DontObfuscate public class PersistentCacheTileDataSource extends CacheTileDataSource {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public PersistentCacheTileDataSource(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(PersistentCacheTileDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        PersistentCacheTileDataSourceModuleJNI.delete_PersistentCacheTileDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.PersistentCacheTileDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.PersistentCacheTileDataSource) director;
    }

    String objClassName = com.carto.datasources.PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.PersistentCacheTileDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.PersistentCacheTileDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a PersistentCacheTileDataSource object from tile data source<br>
 * and a sqlite database. The sqlite database must be writable, if it doesn't exist, an empty one<br>
 * will be created instead.<br>
 * @param dataSource The datasource to be cached.<br>
 * @param databasePath The path to the sqlite database, where the tiles will be cached.
 */
  public PersistentCacheTileDataSource(TileDataSource dataSource, String databasePath) {
    this(PersistentCacheTileDataSourceModuleJNI.new_PersistentCacheTileDataSource(TileDataSource.getCPtr(dataSource), dataSource, databasePath), true);
    PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

/**
 * Returns the state of cache only mode.<br>
 * @return True when cache only mode is enabled, false otherwise.
 */
  public boolean isCacheOnlyMode() {
    return PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_isCacheOnlyMode(swigCPtr, this);
  }

/**
 * Switches the datasource to 'cache only' mode or switches back from the mode.<br>
 * If enabled, tiles are loaded from the cache only and the original data source is not used.<br>
 * By default, cache only mode is off.<br>
 * @param enabled True when the mode should be enabled, false otherwise.
 */
  public void setCacheOnlyMode(boolean enabled) {
    PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_setCacheOnlyMode(swigCPtr, this, enabled);
  }

/**
 * Starts downloading the specified area. The area will be stored in the cache.<br>
 * Note that is the area is too big or cache is already filled, subsequent downloaded tiles<br>
 * may push existing tile out of the cache.<br>
 * @param mapBounds The bounds of the area to download. The coordinate system of the bounds must be the same as specified in the data source projection.<br>
 * @param minZoom The minimum zoom of the tiles to load.<br>
 * @param maxZoom The maximum zoom of the tiles to load.<br>
 * @param tileDownloadListener The tile download listener to use that will receive download related callbacks.
 */
  public void startDownloadArea(MapBounds mapBounds, int minZoom, int maxZoom, TileDownloadListener tileDownloadListener) {
    PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_startDownloadArea(swigCPtr, this, MapBounds.getCPtr(mapBounds), mapBounds, minZoom, maxZoom, TileDownloadListener.getCPtr(tileDownloadListener), tileDownloadListener);
  }

/**
 * Stops all background downloader processes.
 */
  public void stopAllDownloads() {
    PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_stopAllDownloads(swigCPtr, this);
  }

/**
 * Returns the status of the cache database.<br>
 * @return True if the persistent cache database is open and working, false otherwise.
 */
  public boolean isOpen() {
    return PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_isOpen(swigCPtr, this);
  }

/**
 * Closes the cache database. The datasource will still work afterwards,<br>
 * but all requests will be directed to the original datasource.
 */
  public void close() {
    PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_close(swigCPtr, this);
  }

  public TileData loadTile(MapTile mapTile) {
    long cPtr = (getClass() == PersistentCacheTileDataSource.class) ? PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_loadTile(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile) : PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_loadTileSwigExplicitPersistentCacheTileDataSource(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile);
    return (cPtr == 0) ? null : new TileData(cPtr, true);
  }

  public void clear() {
    if (getClass() == PersistentCacheTileDataSource.class) PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_clear(swigCPtr, this); else PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_clearSwigExplicitPersistentCacheTileDataSource(swigCPtr, this);
  }

  public long getCapacity() {
    return (getClass() == PersistentCacheTileDataSource.class) ? PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_getCapacity(swigCPtr, this) : PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_getCapacitySwigExplicitPersistentCacheTileDataSource(swigCPtr, this);
  }

  public void setCapacity(long capacityInBytes) {
    if (getClass() == PersistentCacheTileDataSource.class) PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_setCapacity(swigCPtr, this, capacityInBytes); else PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_setCapacitySwigExplicitPersistentCacheTileDataSource(swigCPtr, this, capacityInBytes);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return PersistentCacheTileDataSourceModuleJNI.PersistentCacheTileDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
