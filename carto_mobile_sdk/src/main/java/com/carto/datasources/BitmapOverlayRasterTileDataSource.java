/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapTile;
import com.carto.core.MapPos;
import com.carto.core.MapPosVector;
import com.carto.core.MapBounds;
import com.carto.core.ScreenPos;
import com.carto.core.ScreenPosVector;
import com.carto.core.ScreenPosVector;
import com.carto.core.StringMap;
import com.carto.datasources.TileDataSource;
import com.carto.datasources.components.TileData;
import com.carto.projections.Projection;
import com.carto.graphics.Bitmap;

/**
 * Tile data source that uses given bitmap with two, three or four control points define a raster overlay.<br>
 * Note: if two points are given, conformal transformation is calculated. If three points are given, affine transformation is calculated. In case of four points, perspective transformation is used.
 */
@com.carto.utils.DontObfuscate public class BitmapOverlayRasterTileDataSource extends TileDataSource {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public BitmapOverlayRasterTileDataSource(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(BitmapOverlayRasterTileDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitmapOverlayRasterTileDataSourceModuleJNI.delete_BitmapOverlayRasterTileDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.BitmapOverlayRasterTileDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.BitmapOverlayRasterTileDataSource) director;
    }

    String objClassName = com.carto.datasources.BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.BitmapOverlayRasterTileDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.BitmapOverlayRasterTileDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a new bitmap overlay data source.<br>
 * @param minZoom The minimum zoom for generated tiles.<br>
 * @param maxZoom The maximum zoom for generated tiles.<br>
 * @param bitmap The bitmap to use as an overlay.<br>
 * @param projection The projection definining coordinate system of the control points.<br>
 * @param mapPoses The geographical control points. The list must contain either 2, 3 or 4 points.<br>
 * @param bitmapPoses The pixel coordinates in the bitmap corresponding to geographical control points. The number of coordinates must be equal to the number of control points in mapPoses list.<br>
 * @throws java.lang.IllegalArgumentException If the transformation can not be calculated.
 */
  public BitmapOverlayRasterTileDataSource(int minZoom, int maxZoom, Bitmap bitmap, Projection projection, MapPosVector mapPoses, ScreenPosVector bitmapPoses) {
    this(BitmapOverlayRasterTileDataSourceModuleJNI.new_BitmapOverlayRasterTileDataSource(minZoom, maxZoom, Bitmap.getCPtr(bitmap), bitmap, Projection.getCPtr(projection), projection, MapPosVector.getCPtr(mapPoses), mapPoses, ScreenPosVector.getCPtr(bitmapPoses), bitmapPoses), true);
    BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public MapBounds getDataExtent() { return new MapBounds((getClass() == BitmapOverlayRasterTileDataSource.class) ? BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_getDataExtent(swigCPtr, this) : BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_getDataExtentSwigExplicitBitmapOverlayRasterTileDataSource(swigCPtr, this), true); }

  public TileData loadTile(MapTile mapTile) {
    long cPtr = (getClass() == BitmapOverlayRasterTileDataSource.class) ? BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_loadTile(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile) : BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_loadTileSwigExplicitBitmapOverlayRasterTileDataSource(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile);
    return (cPtr == 0) ? null : new TileData(cPtr, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return BitmapOverlayRasterTileDataSourceModuleJNI.BitmapOverlayRasterTileDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
