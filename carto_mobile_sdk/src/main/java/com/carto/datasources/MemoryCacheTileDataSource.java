/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.core.StringMap;
import com.carto.datasources.CacheTileDataSource;
import com.carto.datasources.components.TileData;

/**
 * A tile data source that loads tiles from another tile data source<br>
 * and caches them in memory. This cache is not persistent, tiles <br>
 * will be cleared once the application closes. Default cache capacity is 6MB.
 */
@com.carto.utils.DontObfuscate public class MemoryCacheTileDataSource extends CacheTileDataSource {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public MemoryCacheTileDataSource(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(MemoryCacheTileDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MemoryCacheTileDataSourceModuleJNI.delete_MemoryCacheTileDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.MemoryCacheTileDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.MemoryCacheTileDataSource) director;
    }

    String objClassName = com.carto.datasources.MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.MemoryCacheTileDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.MemoryCacheTileDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a MemoryCacheTileDataSource object from tile data source.<br>
 * @param dataSource The datasource to be cached.
 */
  public MemoryCacheTileDataSource(TileDataSource dataSource) {
    this(MemoryCacheTileDataSourceModuleJNI.new_MemoryCacheTileDataSource(TileDataSource.getCPtr(dataSource), dataSource), true);
    MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TileData loadTile(MapTile mapTile) {
    long cPtr = (getClass() == MemoryCacheTileDataSource.class) ? MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_loadTile(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile) : MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_loadTileSwigExplicitMemoryCacheTileDataSource(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile);
    return (cPtr == 0) ? null : new TileData(cPtr, true);
  }

  public void clear() {
    if (getClass() == MemoryCacheTileDataSource.class) MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_clear(swigCPtr, this); else MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_clearSwigExplicitMemoryCacheTileDataSource(swigCPtr, this);
  }

  public long getCapacity() {
    return (getClass() == MemoryCacheTileDataSource.class) ? MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_getCapacity(swigCPtr, this) : MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_getCapacitySwigExplicitMemoryCacheTileDataSource(swigCPtr, this);
  }

  public void setCapacity(long capacityInBytes) {
    if (getClass() == MemoryCacheTileDataSource.class) MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_setCapacity(swigCPtr, this, capacityInBytes); else MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_setCapacitySwigExplicitMemoryCacheTileDataSource(swigCPtr, this, capacityInBytes);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return MemoryCacheTileDataSourceModuleJNI.MemoryCacheTileDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
