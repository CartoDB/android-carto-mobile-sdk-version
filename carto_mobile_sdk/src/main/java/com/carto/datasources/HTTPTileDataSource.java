/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.datasources;

import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.core.StringVector;
import com.carto.core.StringMap;
import com.carto.datasources.TileDataSource;
import com.carto.datasources.components.TileData;

/**
 * A tile data source that loads tiles using a HTTP connection.<br>
 * The requests are generated using a template scheme, where tags in the baseURL string are replaced with actual values.<br>
 * The following tags are supported: s, z, zoom, x, y, xflipped, yflipped, quadkey, frame.<br>
 * <br>
 * For example, if baseURL = "https://tile.openstreetmap.org/{zoom}/{x}/{y}.png" and the requested tile has zoom = 2,<br>
 * x = 1 and y = 3, then the tile will be loaded from the following URL: "https://tile.openstreetmap.org/2/1/3.png".
 */
@com.carto.utils.DontObfuscate public class HTTPTileDataSource extends TileDataSource {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public HTTPTileDataSource(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(HTTPTileDataSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HTTPTileDataSourceModuleJNI.delete_HTTPTileDataSource(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HTTPTileDataSourceModuleJNI.HTTPTileDataSource_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HTTPTileDataSourceModuleJNI.HTTPTileDataSource_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.datasources.HTTPTileDataSource swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.datasources.HTTPTileDataSourceModuleJNI.HTTPTileDataSource_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.datasources.HTTPTileDataSource) director;
    }

    String objClassName = com.carto.datasources.HTTPTileDataSourceModuleJNI.HTTPTileDataSource_swigGetClassName(cPtr, null);
    com.carto.datasources.HTTPTileDataSource objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.datasources." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.datasources.HTTPTileDataSource) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a HTTPTileDataSource object.<br>
 * @param minZoom The minimum zoom level supported by this data source.<br>
 * @param maxZoom The maximum zoom level supported by this data source.<br>
 * @param baseURL The base URL containing tags (for example, "https://tile.openstreetmap.org/{zoom}/{x}/{y}.png").
 */
  public HTTPTileDataSource(int minZoom, int maxZoom, String baseURL) {
    this(HTTPTileDataSourceModuleJNI.new_HTTPTileDataSource(minZoom, maxZoom, baseURL), true);
    HTTPTileDataSourceModuleJNI.HTTPTileDataSource_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

/**
 * Returns the base URL template containing tags.<br>
 * @return The base URL template.
 */
  public String getBaseURL() {
    return HTTPTileDataSourceModuleJNI.HTTPTileDataSource_getBaseURL(swigCPtr, this);
  }

/**
 * Sets the base URL for the data source.<br>
 * @param baseURL The base URL containing tags (for example, "https://tile.openstreetmap.org/{zoom}/{x}/{y}.png").
 */
  public void setBaseURL(String baseURL) {
    HTTPTileDataSourceModuleJNI.HTTPTileDataSource_setBaseURL(swigCPtr, this, baseURL);
  }

/**
 * Returns the subdomains for {s} tag. The default is ["a", "b", "c", "d"].<br>
 * @return The list of subdomains.
 */
  public StringVector getSubdomains() { return new StringVector(HTTPTileDataSourceModuleJNI.HTTPTileDataSource_getSubdomains(swigCPtr, this), true); }

/**
 * Sets the subdomains for {s} tag.<br>
 * @param subdomains The list of subdomains to use.
 */
  public void setSubdomains(StringVector subdomains) {
    HTTPTileDataSourceModuleJNI.HTTPTileDataSource_setSubdomains(swigCPtr, this, StringVector.getCPtr(subdomains), subdomains);
  }

/**
 * Returns true/false based whether the TMS tiling scheme is used.<br>
 * @return True if TMS tiling scheme is used. False if XYZ scheme is used.
 */
  public boolean isTMSScheme() {
    return HTTPTileDataSourceModuleJNI.HTTPTileDataSource_isTMSScheme(swigCPtr, this);
  }

/**
 * Enables/disables the TMS tiling scheme. In TMS scheme y coordinate of the tile is flipped. The default is disabled.<br>
 * @param tmsScheme True is TMS tiling scheme should be used. False is XYZ should be used.
 */
  public void setTMSScheme(boolean tmsScheme) {
    HTTPTileDataSourceModuleJNI.HTTPTileDataSource_setTMSScheme(swigCPtr, this, tmsScheme);
  }

/**
 * Returns true/false based on whether the max-age header check is used.<br>
 * If this is enabled, SDK will automatically refresh the tiles when tiles have expired.<br>
 * @return True if max-age header check is used. False otherwise.
 */
  public boolean isMaxAgeHeaderCheck() {
    return HTTPTileDataSourceModuleJNI.HTTPTileDataSource_isMaxAgeHeaderCheck(swigCPtr, this);
  }

/**
 * Enables/disables the max-age header check.<br>
 * If this is enabled, SDK will automatically refresh the tiles when tiles have expired. The default is disabled.<br>
 * @param maxAgeCheck True if the check should be enabled, false otherwise.
 */
  public void setMaxAgeHeaderCheck(boolean maxAgeCheck) {
    HTTPTileDataSourceModuleJNI.HTTPTileDataSource_setMaxAgeHeaderCheck(swigCPtr, this, maxAgeCheck);
  }

/**
 * Returns the current timeout value.<br>
 * @return The current timeout value in seconds. If negative, then default platform-specific timeout is used.
 */
  public int getTimeout() {
    return HTTPTileDataSourceModuleJNI.HTTPTileDataSource_getTimeout(swigCPtr, this);
  }

/**
 * Sets the current timeout value.<br>
 * @param timeout The new timeout value in seconds. If negative, then default platform-specific timeout is used.
 */
  public void setTimeout(int timeout) {
    HTTPTileDataSourceModuleJNI.HTTPTileDataSource_setTimeout(swigCPtr, this, timeout);
  }

/**
 * Returns the current set of HTTP headers used. Initially this set is empty and can be changed with setHTTPHeaders.<br>
 * @return The current set of custom HTTP headers.
 */
  public StringMap getHTTPHeaders() { return new StringMap(HTTPTileDataSourceModuleJNI.HTTPTileDataSource_getHTTPHeaders(swigCPtr, this), true); }

/**
 * Sets HTTP headers for all requests. Calling this method will invalidate the datasource and<br>
 * all layers using this data source will be refreshed.<br>
 * @param headers A map of HTTP headers that will be used in subsequent requests.
 */
  public void setHTTPHeaders(StringMap headers) {
    HTTPTileDataSourceModuleJNI.HTTPTileDataSource_setHTTPHeaders(swigCPtr, this, StringMap.getCPtr(headers), headers);
  }

  public TileData loadTile(MapTile mapTile) {
    long cPtr = (getClass() == HTTPTileDataSource.class) ? HTTPTileDataSourceModuleJNI.HTTPTileDataSource_loadTile(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile) : HTTPTileDataSourceModuleJNI.HTTPTileDataSource_loadTileSwigExplicitHTTPTileDataSource(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile);
    return (cPtr == 0) ? null : new TileData(cPtr, true);
  }

  protected String buildTileURL(String baseURL, MapTile tile) {
    return (getClass() == HTTPTileDataSource.class) ? HTTPTileDataSourceModuleJNI.HTTPTileDataSource_buildTileURL(swigCPtr, this, baseURL, MapTile.getCPtr(tile), tile) : HTTPTileDataSourceModuleJNI.HTTPTileDataSource_buildTileURLSwigExplicitHTTPTileDataSource(swigCPtr, this, baseURL, MapTile.getCPtr(tile), tile);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return HTTPTileDataSourceModuleJNI.HTTPTileDataSource_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return HTTPTileDataSourceModuleJNI.HTTPTileDataSource_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return HTTPTileDataSourceModuleJNI.HTTPTileDataSource_swigGetDirectorObject(swigCPtr, this);
  }

}
