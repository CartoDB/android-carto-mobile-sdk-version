/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.layers;

import com.carto.datasources.TileDataSource;
import com.carto.layers.TileLayer;
import com.carto.layers.RasterTileEventListener;

/**
 * A tile layer where each tile is a bitmap. Should be used together with corresponding data source.
 */
@com.carto.utils.DontObfuscate public class RasterTileLayer extends TileLayer {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public RasterTileLayer(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(RasterTileLayer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RasterTileLayerModuleJNI.delete_RasterTileLayer(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.layers.RasterTileLayer swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.layers.RasterTileLayerModuleJNI.RasterTileLayer_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.layers.RasterTileLayer) director;
    }

    String objClassName = com.carto.layers.RasterTileLayerModuleJNI.RasterTileLayer_swigGetClassName(cPtr, null);
    com.carto.layers.RasterTileLayer objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.layers." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.layers.RasterTileLayer) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a RasterTileLayer object from a data source.<br>
 * @param dataSource The data source from which this layer loads data.
 */
  public RasterTileLayer(TileDataSource dataSource) {
    this(RasterTileLayerModuleJNI.new_RasterTileLayer(TileDataSource.getCPtr(dataSource), dataSource), true);
  }

/**
 * Returns the tile texture cache capacity.<br>
 * @return The tile texture cache capacity in bytes.
 */
  public long getTextureCacheCapacity() {
    return RasterTileLayerModuleJNI.RasterTileLayer_getTextureCacheCapacity(swigCPtr, this);
  }

/**
 * Sets the tile texture cache capacity. Texture cache is the primary storage for raster data,<br>
 * all tiles contained within the texture cache are stored as uncompressed openGL textures and can immediately be<br>
 * drawn to the screen. Setting the cache size too small may cause artifacts, such as disappearing tiles.<br>
 * The more tiles are visible on the screen, the larger this cache should be. A single opaque 256x256 tile takes<br>
 * up 192KB of memory, a transparent tile of the same size takes 256KB. The number of tiles on the screen depends<br>
 * on the screen size and density, current rotation and tilt angle, tile draw size parameter and <br>
 * whether or not preloading is enabled.<br>
 * The default is 10MB, which should be enough for most use cases with preloading enabled. If preloading is<br>
 * disabled, the cache size should be reduced by the user to conserve memory.<br>
 * @param capacityInBytes The new tile bitmap cache capacity in bytes.
 */
  public void setTextureCacheCapacity(long capacityInBytes) {
    RasterTileLayerModuleJNI.RasterTileLayer_setTextureCacheCapacity(swigCPtr, this, capacityInBytes);
  }

/**
 * Returns the current tile filter mode.<br>
 * @return The current tile filter mode. The default is bilinear.
 */
  public RasterTileFilterMode getTileFilterMode() {
    return RasterTileFilterMode.swigToEnum(RasterTileLayerModuleJNI.RasterTileLayer_getTileFilterMode(swigCPtr, this));
  }

/**
 * Sets the current tile filter mode.<br>
 * @param filterMode The new tile filter mode.
 */
  public void setTileFilterMode(RasterTileFilterMode filterMode) {
    RasterTileLayerModuleJNI.RasterTileLayer_setTileFilterMode(swigCPtr, this, filterMode.swigValue());
  }

/**
 * Returns the current relative tile blending speed.<br>
 * @return The current relative tile blending speed. Default is 1.0.
 */
  public float getTileBlendingSpeed() {
    return RasterTileLayerModuleJNI.RasterTileLayer_getTileBlendingSpeed(swigCPtr, this);
  }

/**
 * Sets the relative tile blending speed.<br>
 * @param speed The new relative speed value. Default is 1.0. Use zero or negative values to disable blending.
 */
  public void setTileBlendingSpeed(float speed) {
    RasterTileLayerModuleJNI.RasterTileLayer_setTileBlendingSpeed(swigCPtr, this, speed);
  }

/**
 * Returns the raster tile event listener.<br>
 * @return The raster tile event listener.
 */
  public RasterTileEventListener getRasterTileEventListener() {
  long cPtr = RasterTileLayerModuleJNI.RasterTileLayer_getRasterTileEventListener(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.layers.RasterTileEventListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the raster tile event listener.<br>
 * @param eventListener The raster tile event listener.
 */
  public void setRasterTileEventListener(RasterTileEventListener eventListener) {
    RasterTileLayerModuleJNI.RasterTileLayer_setRasterTileEventListener(swigCPtr, this, RasterTileEventListener.getCPtr(eventListener), eventListener);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return RasterTileLayerModuleJNI.RasterTileLayer_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return RasterTileLayerModuleJNI.RasterTileLayer_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return RasterTileLayerModuleJNI.RasterTileLayer_swigGetDirectorObject(swigCPtr, this);
  }

}
