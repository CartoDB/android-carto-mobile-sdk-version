/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.layers;

import com.carto.datasources.LocalVectorDataSource;
import com.carto.layers.VectorLayer;
import com.carto.vectorelements.VectorElement;
import com.carto.layers.ClusterElementBuilder;

/**
 * A vector layer that supports clustering point-type features.<br>
 * A Pairwise centroid hierarchical clustering algorithm is used internally.
 */
@com.carto.utils.DontObfuscate public class ClusteredVectorLayer extends VectorLayer {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public ClusteredVectorLayer(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(ClusteredVectorLayer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ClusteredVectorLayerModuleJNI.delete_ClusteredVectorLayer(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.layers.ClusteredVectorLayer swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.layers.ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.layers.ClusteredVectorLayer) director;
    }

    String objClassName = com.carto.layers.ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_swigGetClassName(cPtr, null);
    com.carto.layers.ClusteredVectorLayer objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.layers." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.layers.ClusteredVectorLayer) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a new ClusteredVectorLayer instance from data source and a special callback.<br>
 * @param dataSource The local data source that contains the elements for clustering.<br>
 * @param clusterElementBuilder The callback for creating and customizing cluster elements.
 */
  public ClusteredVectorLayer(LocalVectorDataSource dataSource, ClusterElementBuilder clusterElementBuilder) {
    this(ClusteredVectorLayerModuleJNI.new_ClusteredVectorLayer(LocalVectorDataSource.getCPtr(dataSource), dataSource, ClusterElementBuilder.getCPtr(clusterElementBuilder), clusterElementBuilder), true);
  }

/**
 * Returns the current callback used for creating cluster elements.<br>
 * @return The associated callback.
 */
  public ClusterElementBuilder getClusterElementBuilder() {
  long cPtr = ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_getClusterElementBuilder(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.layers.ClusterElementBuilder.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the current minimum distance between clusters (in device-independent pixels).<br>
 * @return The current minimum clustering distance.
 */
  public float getMinimumClusterDistance() {
    return ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_getMinimumClusterDistance(swigCPtr, this);
  }

/**
 * Sets the minimum distance between clusters (in device-independent pixels).<br>
 * @param px The new value in device-independent pixels. The default is 100.
 */
  public void setMinimumClusterDistance(float px) {
    ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_setMinimumClusterDistance(swigCPtr, this, px);
  }

/**
 * Returns the maximum zoom level when clusters are shown. If zoom level is greater, then<br>
 * clusters are replaced with individual elements. Default is 24.<br>
 * @return The maximum clustering zoom level.
 */
  public float getMaximumClusterZoom() {
    return ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_getMaximumClusterZoom(swigCPtr, this);
  }

/**
 * Sets the maximum zoom level when clusters are shown. If zoom level is greater, then<br>
 * clusters are replaced with individual elements.<br>
 * @param maxZoom The new maximum clustering zoom level.
 */
  public void setMaximumClusterZoom(float maxZoom) {
    ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_setMaximumClusterZoom(swigCPtr, this, maxZoom);
  }

/**
 * Returns the cluster animation flag value.<br>
 * @return True if animation is enabled, false otherwise.
 */
  public boolean isAnimatedClusters() {
    return ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_isAnimatedClusters(swigCPtr, this);
  }

/**
 * Enables or disables the animation of clusters. By default animations are enabled.<br>
 * @param animated The animated flag.
 */
  public void setAnimatedClusters(boolean animated) {
    ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_setAnimatedClusters(swigCPtr, this, animated);
  }

/**
 * Expands or shrinks the given cluster element. In expanded state,<br>
 * all elements of the cluster are placed at specified distance from the cluster center.<br>
 * @param clusterElement The cluster element to expand or shrink.<br>
 * @param px The distance (in device-independent pixels) between cluster center and expanded elements. Use 0 to shrink already expanded cluster.<br>
 * @return True if the element was found and expanded/shrunk. False otherwise.
 */
  public boolean expandCluster(VectorElement clusterElement, float px) {
    return ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_expandCluster(swigCPtr, this, VectorElement.getCPtr(clusterElement), clusterElement, px);
  }

  public void refresh() {
    ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_refresh(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return ClusteredVectorLayerModuleJNI.ClusteredVectorLayer_swigGetDirectorObject(swigCPtr, this);
  }

}
