/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.layers;

import com.carto.datasources.TileDataSource;
import com.carto.datasources.components.TileData;
import com.carto.layers.TileLayer;
import com.carto.layers.VectorTileEventListener;
import com.carto.vectortiles.VectorTileDecoder;

/**
 * A tile layer where each tile is a bitmap. Should be used together with corresponding data source.
 */
@com.carto.utils.DontObfuscate public class VectorTileLayer extends TileLayer {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public VectorTileLayer(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(VectorTileLayer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        VectorTileLayerModuleJNI.delete_VectorTileLayer(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.layers.VectorTileLayer swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.layers.VectorTileLayerModuleJNI.VectorTileLayer_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.layers.VectorTileLayer) director;
    }

    String objClassName = com.carto.layers.VectorTileLayerModuleJNI.VectorTileLayer_swigGetClassName(cPtr, null);
    com.carto.layers.VectorTileLayer objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.layers." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.layers.VectorTileLayer) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a VectorTileLayer object from a data source and tile decoder.<br>
 * @param dataSource The data source from which this layer loads data.<br>
 * @param decoder The tile decoder that decoder loaded tiles and applies styles.
 */
  public VectorTileLayer(TileDataSource dataSource, VectorTileDecoder decoder) {
    this(VectorTileLayerModuleJNI.new_VectorTileLayer(TileDataSource.getCPtr(dataSource), dataSource, VectorTileDecoder.getCPtr(decoder), decoder), true);
  }

/**
 * Returns the tile decoder assigned to this layer.<br>
 * @return The tile decoder assigned to this layer.
 */
  public VectorTileDecoder getTileDecoder() {
  long cPtr = VectorTileLayerModuleJNI.VectorTileLayer_getTileDecoder(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.vectortiles.VectorTileDecoder.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the tile cache capacity.<br>
 * @return The tile cache capacity in bytes.
 */
  public long getTileCacheCapacity() {
    return VectorTileLayerModuleJNI.VectorTileLayer_getTileCacheCapacity(swigCPtr, this);
  }

/**
 * Sets the vector tile cache capacity. Tile cache is the primary storage for vector data,<br>
 * all tiles contained within the cache are stored as uncompressed vertex buffers and can immediately be<br>
 * drawn to the screen. Setting the cache size too small may cause artifacts, such as disappearing tiles.<br>
 * The more tiles are visible on the screen, the larger this cache should be. <br>
 * The default is 10MB, which should be enough for most use cases with preloading enabled. If preloading is<br>
 * disabled, the cache size should be reduced by the user to conserve memory.<br>
 * @param capacityInBytes The new tile bitmap cache capacity in bytes.
 */
  public void setTileCacheCapacity(long capacityInBytes) {
    VectorTileLayerModuleJNI.VectorTileLayer_setTileCacheCapacity(swigCPtr, this, capacityInBytes);
  }

/**
 * Returns the current display order of the labels.<br>
 * @return The display order of the labels. Default is VECTOR_TILE_RENDER_ORDER_LAYER.
 */
  public VectorTileRenderOrder getLabelRenderOrder() {
    return VectorTileRenderOrder.swigToEnum(VectorTileLayerModuleJNI.VectorTileLayer_getLabelRenderOrder(swigCPtr, this));
  }

/**
 * Sets the current display order of the labels.<br>
 * @param renderOrder The new display order of the labels.
 */
  public void setLabelRenderOrder(VectorTileRenderOrder renderOrder) {
    VectorTileLayerModuleJNI.VectorTileLayer_setLabelRenderOrder(swigCPtr, this, renderOrder.swigValue());
  }

/**
 * Returns the current display order of the buildings.<br>
 * @return The display order of the buildigns. Default is VECTOR_TILE_RENDER_ORDER_LAYER.
 */
  public VectorTileRenderOrder getBuildingRenderOrder() {
    return VectorTileRenderOrder.swigToEnum(VectorTileLayerModuleJNI.VectorTileLayer_getBuildingRenderOrder(swigCPtr, this));
  }

/**
 * Sets the current display order of the buildings.<br>
 * @param renderOrder The new display order of the labels.
 */
  public void setBuildingRenderOrder(VectorTileRenderOrder renderOrder) {
    VectorTileLayerModuleJNI.VectorTileLayer_setBuildingRenderOrder(swigCPtr, this, renderOrder.swigValue());
  }

/**
 * Returns the click radius of vector tile features.<br>
 * Units are screen density independent pixels (DP or DIP).<br>
 * @return The click radius of vector tile features.
 */
  public float getClickRadius() {
    return VectorTileLayerModuleJNI.VectorTileLayer_getClickRadius(swigCPtr, this);
  }

/**
 * Sets the click radius of vector tile features.<br>
 * The click radius is applied as an extra buffer to the vector tile features to make clicking on small features less sensitive.<br>
 * Units are screen density independent pixels (DP or DIP).<br>
 * @param radius The new click radius of vector tile features. The default value is 4.
 */
  public void setClickRadius(float radius) {
    VectorTileLayerModuleJNI.VectorTileLayer_setClickRadius(swigCPtr, this, radius);
  }

/**
 * Returns the current relative layer blending speed.<br>
 * @return The current relative layer blending speed. Default is 1.0.
 */
  public float getLayerBlendingSpeed() {
    return VectorTileLayerModuleJNI.VectorTileLayer_getLayerBlendingSpeed(swigCPtr, this);
  }

/**
 * Sets the relative layer blending speed.<br>
 * @param speed The new relative speed value. Default is 1.0. Use zero or negative values to disable blending.
 */
  public void setLayerBlendingSpeed(float speed) {
    VectorTileLayerModuleJNI.VectorTileLayer_setLayerBlendingSpeed(swigCPtr, this, speed);
  }

/**
 * Returns the current relative label blending speed.<br>
 * @return The current relative label blending speed. Default is 1.0.
 */
  public float getLabelBlendingSpeed() {
    return VectorTileLayerModuleJNI.VectorTileLayer_getLabelBlendingSpeed(swigCPtr, this);
  }

/**
 * Sets the relative label blending speed.<br>
 * @param speed The new relative speed value. Default is 1.0. Use zero or negative values to disable blending.
 */
  public void setLabelBlendingSpeed(float speed) {
    VectorTileLayerModuleJNI.VectorTileLayer_setLabelBlendingSpeed(swigCPtr, this, speed);
  }

/**
 * Returns the renderer layer filter. The filter is given as ECMA regular expression that is applied to qualified layer names.<br>
 * @return The renderer layer filter. Default is empty string, which means no filter is used.
 */
  public String getRendererLayerFilter() {
    return VectorTileLayerModuleJNI.VectorTileLayer_getRendererLayerFilter(swigCPtr, this);
  }

/**
 * Sets the renderer layer filter. The filter is given as ECMA regular expression that is applied to qualified layer names.<br>
 * If non-empty, then only layers that pass the filter are rendered.<br>
 * @param filter The new renderer layer filter.<br>
 * @throws java.lang.Exception If the filter expression is not valid.
 */
  public void setRendererLayerFilter(String filter) {
    VectorTileLayerModuleJNI.VectorTileLayer_setRendererLayerFilter(swigCPtr, this, filter);
  }

/**
 * Returns the click handler layer filter. The filter is given as ECMA regular expression that is applied to qualified layer names.<br>
 * @return The click handler layer filter. Default is empty string, which means no filter is used.
 */
  public String getClickHandlerLayerFilter() {
    return VectorTileLayerModuleJNI.VectorTileLayer_getClickHandlerLayerFilter(swigCPtr, this);
  }

/**
 * Sets the click handler layer filter. The filter is given as ECMA regular expression that is applied to qualified layer names.<br>
 * If non-empty, then only layers that pass the filter are tested when handling clicks.<br>
 * @param filter The new click handler layer filter.<br>
 * @throws java.lang.Exception If the filter expression is not valid.
 */
  public void setClickHandlerLayerFilter(String filter) {
    VectorTileLayerModuleJNI.VectorTileLayer_setClickHandlerLayerFilter(swigCPtr, this, filter);
  }

/**
 * Returns the vector tile event listener.<br>
 * @return The vector tile event listener.
 */
  public VectorTileEventListener getVectorTileEventListener() {
  long cPtr = VectorTileLayerModuleJNI.VectorTileLayer_getVectorTileEventListener(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.layers.VectorTileEventListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the vector tile event listener.<br>
 * @param eventListener The vector tile event listener.
 */
  public void setVectorTileEventListener(VectorTileEventListener eventListener) {
    VectorTileLayerModuleJNI.VectorTileLayer_setVectorTileEventListener(swigCPtr, this, VectorTileEventListener.getCPtr(eventListener), eventListener);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return VectorTileLayerModuleJNI.VectorTileLayer_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return VectorTileLayerModuleJNI.VectorTileLayer_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return VectorTileLayerModuleJNI.VectorTileLayer_swigGetDirectorObject(swigCPtr, this);
  }

}
