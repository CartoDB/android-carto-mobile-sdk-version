/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.layers;

import com.carto.core.MapRange;
import com.carto.core.ScreenPos;
import com.carto.core.Variant;
import com.carto.core.StringVariantMap;
import com.carto.graphics.ViewState;
import com.carto.renderers.components.CullState;
import com.carto.ui.ClickInfo;
import com.carto.ui.ClickType;

/**
 * An abstract base class for all layers.
 */
@com.carto.utils.DontObfuscate public class Layer {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public Layer(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(Layer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LayerModuleJNI.delete_Layer(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.layers.Layer swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.layers.LayerModuleJNI.Layer_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.layers.Layer) director;
    }

    String objClassName = com.carto.layers.LayerModuleJNI.Layer_swigGetClassName(cPtr, null);
    com.carto.layers.Layer objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.layers." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.layers.Layer) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof Layer) {
      return ((Layer)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Returns a copy of the layer meta data map. The changes you make to this map are NOT reflected in the actual meta data of the layer.<br>
 * @return A copy of the layer meta data map.
 */
  public StringVariantMap getMetaData() { return new StringVariantMap(LayerModuleJNI.Layer_getMetaData(swigCPtr, this), true); }

/**
 * Sets a new meta data map for the layer. Old meta data values will be lost.<br>
 * @param metaData The new meta data map for this layer.
 */
  public void setMetaData(StringVariantMap metaData) {
    LayerModuleJNI.Layer_setMetaData(swigCPtr, this, StringVariantMap.getCPtr(metaData), metaData);
  }

/**
 * Returns true if the specified key exists in the layer meta data map.<br>
 * @param key The key to check.<br>
 * @return True if the meta data element exists.
 */
  public boolean containsMetaDataKey(String key) {
    return LayerModuleJNI.Layer_containsMetaDataKey(swigCPtr, this, key);
  }

/**
 * Returns a layer meta data element corresponding to the key. If no value is found null variant is returned.<br>
 * @param key The key to use.<br>
 * @return The value corresponding to the key from the meta data map. If the key does not exist, empty variant is returned.
 */
  public Variant getMetaDataElement(String key) { return new Variant(LayerModuleJNI.Layer_getMetaDataElement(swigCPtr, this, key), true); }

/**
 * Adds a new key-value pair to the layer meta data map. If the key already exists in the map,<br>
 * it's value will be replaced by the new value.<br>
 * @param key The new key.<br>
 * @param element The new value.
 */
  public void setMetaDataElement(String key, Variant element) {
    LayerModuleJNI.Layer_setMetaDataElement(swigCPtr, this, key, Variant.getCPtr(element), element);
  }

/**
 * Returns the layer task priority of this layer.<br>
 * @return The priority level for the tasks of this layer.
 */
  public int getUpdatePriority() {
    return LayerModuleJNI.Layer_getUpdatePriority(swigCPtr, this);
  }

/**
 * Sets the layer task priority. Higher priority layers get to load data before<br>
 * lower priority layers. Normal layers and tile layers have seperate task queues and thus <br>
 * don't compete with each other for task queue access. The default is 0.<br>
 * @param priority The new task priority for this layer, higher values get better access.
 */
  public void setUpdatePriority(int priority) {
    LayerModuleJNI.Layer_setUpdatePriority(swigCPtr, this, priority);
  }

/**
 * Sets the layer culling delay. The culling delay is used to delay layer content rendering in case of user interaction,<br>
 * higher delay improves performance and battery life at the expense of interactivity. Default is 200ms-400ms, depending<br>
 * on layer type.<br>
 * @param delay The new culling delay in milliseconds.
 */
  public void setCullDelay(int delay) {
    LayerModuleJNI.Layer_setCullDelay(swigCPtr, this, delay);
  }

/**
 * Returns the opacity of this layer.<br>
 * @return The opacity of this layer.
 */
  public float getOpacity() {
    return LayerModuleJNI.Layer_getOpacity(swigCPtr, this);
  }

/**
 * Set the opacity of the layer.<br>
 * @param opacity The opacity of the layer in range (0..1). 1.0 is the default value.
 */
  public void setOpacity(float opacity) {
    LayerModuleJNI.Layer_setOpacity(swigCPtr, this, opacity);
  }

/**
 * Returns the visibility of this layer.<br>
 * @return True if the layer is visible.
 */
  public boolean isVisible() {
    return LayerModuleJNI.Layer_isVisible(swigCPtr, this);
  }

/**
 * Sets the visibility of this layer.<br>
 * @param visible The new visibility state of the layer.
 */
  public void setVisible(boolean visible) {
    LayerModuleJNI.Layer_setVisible(swigCPtr, this, visible);
  }

/**
 * Returns the visible zoom range of this layer.<br>
 * @return The visible zoom range of this layer.
 */
  public MapRange getVisibleZoomRange() { return new MapRange(LayerModuleJNI.Layer_getVisibleZoomRange(swigCPtr, this), true); }

/**
 * Sets the visible zoom range for this layer. Current zoom level must be within this range for the layer to be visible.<br>
 * This range is half-open, thus layer is visible if range.min &lt;= ZOOMLEVEL &lt; range.max.<br>
 * @param range new visible zoom range
 */
  public void setVisibleZoomRange(MapRange range) {
    LayerModuleJNI.Layer_setVisibleZoomRange(swigCPtr, this, MapRange.getCPtr(range), range);
  }

/**
 * Tests whether this layer is being currently updated.<br>
 * @return True when the layer is being updated or false when the layer is in steady state.
 */
  public boolean isUpdateInProgress() {
    return LayerModuleJNI.Layer_isUpdateInProgress(swigCPtr, this);
  }

/**
 * Updates the layer using new visibility information. This method is periodically called when the map view moves.<br>
 * The visibilty info is saved, so the data can be refreshed later.<br>
 * @param cullState The new visibilty information.
 */
  public void update(CullState cullState) {
    LayerModuleJNI.Layer_update(swigCPtr, this, CullState.getCPtr(cullState), cullState);
  }

/**
 * Refreshes the layer using old stored visibility information. This method might be called if some of the layer data<br>
 * changes.
 */
  public void refresh() {
    LayerModuleJNI.Layer_refresh(swigCPtr, this);
  }

/**
 * Simulate click on this layer. This may trigger any event listeners attached to the layer.<br>
 * @param clickType The type of the click.<br>
 * @param screenPos The screen position for the simulated click.<br>
 * @param viewState The view state to use.
 */
  public void simulateClick(ClickType clickType, ScreenPos screenPos, ViewState viewState) {
    LayerModuleJNI.Layer_simulateClick(swigCPtr, this, clickType.swigValue(), ScreenPos.getCPtr(screenPos), screenPos, ViewState.getCPtr(viewState), viewState);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return LayerModuleJNI.Layer_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return LayerModuleJNI.Layer_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return LayerModuleJNI.Layer_swigGetDirectorObject(swigCPtr, this);
  }

}
