/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.layers;

import com.carto.core.MapPos;
import com.carto.core.MapTile;
import com.carto.core.MapBounds;
import com.carto.datasources.TileDataSource;
import com.carto.layers.TileLoadListener;
import com.carto.layers.UTFGridEventListener;
import com.carto.layers.Layer;

/**
 * An abstract base class for all tile layers.
 */
@com.carto.utils.DontObfuscate public class TileLayer extends Layer {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public TileLayer(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(TileLayer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TileLayerModuleJNI.delete_TileLayer(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.layers.TileLayer swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.layers.TileLayerModuleJNI.TileLayer_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.layers.TileLayer) director;
    }

    String objClassName = com.carto.layers.TileLayerModuleJNI.TileLayer_swigGetClassName(cPtr, null);
    com.carto.layers.TileLayer objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.layers." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.layers.TileLayer) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Returns the data source assigned to this layer.<br>
 * @return The tile data source assigned to this layer.
 */
  public TileDataSource getDataSource() {
  long cPtr = TileLayerModuleJNI.TileLayer_getDataSource(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.datasources.TileDataSource.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the tile data source of the associated UTF grid. By default this is null.<br>
 * @return The tile data source of the associated UTF grid.
 */
  public TileDataSource getUTFGridDataSource() {
  long cPtr = TileLayerModuleJNI.TileLayer_getUTFGridDataSource(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.datasources.TileDataSource.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the tile data source of the associated UTF grid.<br>
 * @param dataSource The data source to use. Can be null if UTF grid is not used.
 */
  public void setUTFGridDataSource(TileDataSource dataSource) {
    TileLayerModuleJNI.TileLayer_setUTFGridDataSource(swigCPtr, this, TileDataSource.getCPtr(dataSource), dataSource);
  }

/**
 * Returns the current frame number.<br>
 * @return The current frame number.
 */
  public int getFrameNr() {
    return TileLayerModuleJNI.TileLayer_getFrameNr(swigCPtr, this);
  }

/**
 * Sets the frame number, only used for animated tiles. <br>
 * Loading a new frame may take some time, previous frame is shown during loading.<br>
 * @param frameNr The frame number to display.
 */
  public void setFrameNr(int frameNr) {
    TileLayerModuleJNI.TileLayer_setFrameNr(swigCPtr, this, frameNr);
  }

/**
 * Returns the state of the preloading flag of this layer.<br>
 * @return True if preloading is enabled.
 */
  public boolean isPreloading() {
    return TileLayerModuleJNI.TileLayer_isPreloading(swigCPtr, this);
  }

/**
 * Sets the state of preloading for this layer. Preloading allows the downloading of tiles that are not<br>
 * currently visible on screen, but are adjacent to ones that are. This means that the user can pan the map without<br>
 * immediately noticing any missing tiles.<br>
 * <br>
 * Enabling this option might introduce a small performance hit on slower devices. It should also be noted that this<br>
 * will considerably increase network traffic if used with online maps. The default is false.<br>
 * @param preloading The new preloading state of the layer.
 */
  public void setPreloading(boolean preloading) {
    TileLayerModuleJNI.TileLayer_setPreloading(swigCPtr, this, preloading);
  }

/**
 * Returns the state of the synchronized refresh flag.<br>
 * @return The state of the synchronized refresh flag.
 */
  public boolean isSynchronizedRefresh() {
    return TileLayerModuleJNI.TileLayer_isSynchronizedRefresh(swigCPtr, this);
  }

/**
 * Sets the state of the synchronized refresh flag. If disabled all tiles will appear on screen<br>
 * one by one as they finish loading. If enabled the map will wait for all the visible tiles to finish loading<br>
 * and then show them all on screen together. This is useful for animated tiles.<br>
 * @param synchronizedRefresh The new state of the synchronized refresh flag.
 */
  public void setSynchronizedRefresh(boolean synchronizedRefresh) {
    TileLayerModuleJNI.TileLayer_setSynchronizedRefresh(swigCPtr, this, synchronizedRefresh);
  }

/**
 * Returns the current tile substitution policy.<br>
 * @return The current substitution policy. Default is TILE_SUBSTITUTION_POLICY_ALL.
 */
  public TileSubstitutionPolicy getTileSubstitutionPolicy() {
    return TileSubstitutionPolicy.swigToEnum(TileLayerModuleJNI.TileLayer_getTileSubstitutionPolicy(swigCPtr, this));
  }

/**
 * Sets the current tile substitution policy.<br>
 * @param policy The new substitution policy. Default is TILE_SUBSTITUTION_POLICY_ALL.
 */
  public void setTileSubstitutionPolicy(TileSubstitutionPolicy policy) {
    TileLayerModuleJNI.TileLayer_setTileSubstitutionPolicy(swigCPtr, this, policy.swigValue());
  }

/**
 * Gets the current zoom level bias for this layer.<br>
 * @return The current zoom level bias for this layer.
 */
  public float getZoomLevelBias() {
    return TileLayerModuleJNI.TileLayer_getZoomLevelBias(swigCPtr, this);
  }

/**
 * Sets the zoom level bias for this layer.<br>
 * Higher zoom level bias forces SDK to use more detailed tiles for given view compared to lower zoom bias.<br>
 * The default bias is 0.<br>
 * @param bias The new bias value, both positive and negative fractional values are supported.
 */
  public void setZoomLevelBias(float bias) {
    TileLayerModuleJNI.TileLayer_setZoomLevelBias(swigCPtr, this, bias);
  }

/**
 * Gets the current maximum overzoom level for this layer.<br>
 * @return The current maximum overzoom level for this layer.
 */
  public int getMaxOverzoomLevel() {
    return TileLayerModuleJNI.TileLayer_getMaxOverzoomLevel(swigCPtr, this);
  }

/**
 * Sets the maximum overzoom level for this layer.<br>
 * If a tile for the given zoom level Z is not available, SDK will try to use tiles with zoom levels Z-1, ..., Z-MaxOverzoomLevel.<br>
 * The default is 6.<br>
 * @param overzoomLevel The new maximum overzoom value.
 */
  public void setMaxOverzoomLevel(int overzoomLevel) {
    TileLayerModuleJNI.TileLayer_setMaxOverzoomLevel(swigCPtr, this, overzoomLevel);
  }

/**
 * Gets the current maximum underzoom level for this layer.<br>
 * @return The current maximum underzoom level for this layer.
 */
  public int getMaxUnderzoomLevel() {
    return TileLayerModuleJNI.TileLayer_getMaxUnderzoomLevel(swigCPtr, this);
  }

/**
 * Sets the maximum underzoom level for this layer.<br>
 * If a tile for the given zoom level Z is not available, SDK will try to use tiles with zoom levels Z-1, ..., Z-MaxOverzoomLevel and then Z+1, ..., Z+MaxUnderzoomLevel.<br>
 * The default is 3.<br>
 * @param underzoomLevel The new maximum underzoom value.
 */
  public void setMaxUnderzoomLevel(int underzoomLevel) {
    TileLayerModuleJNI.TileLayer_setMaxUnderzoomLevel(swigCPtr, this, underzoomLevel);
  }

/**
 * Calculates the tile corresponding to given geographical coordinates and zoom level.<br>
 * Note: zoom level bias is NOT applied, only discrete zoom level is used.<br>
 * @param mapPos Coordinates of the point in data source projection coordinate system.<br>
 * @param zoom Zoom level to use for the tile.<br>
 * @return The corresponding map tile.
 */
  public MapTile calculateMapTile(MapPos mapPos, int zoom) { return new MapTile(TileLayerModuleJNI.TileLayer_calculateMapTile(swigCPtr, this, MapPos.getCPtr(mapPos), mapPos, zoom), true); }

/**
 * Calculates the origin of given map tile.<br>
 * @param mapTile The map tile to use.<br>
 * @return The corresponding coordinates of the tile origin in data source projection coordinate system.
 */
  public MapPos calculateMapTileOrigin(MapTile mapTile) { return new MapPos(TileLayerModuleJNI.TileLayer_calculateMapTileOrigin(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile), true); }

/**
 * Calculates the bounds of given map tile.<br>
 * @param mapTile The map tile to use.<br>
 * @return The corresponding bounds of the tile origin in data source projection coordinate system.
 */
  public MapBounds calculateMapTileBounds(MapTile mapTile) { return new MapBounds(TileLayerModuleJNI.TileLayer_calculateMapTileBounds(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile), true); }

/**
 * Clears layer tile caches. This will release memory allocated to tiles.<br>
 * @param all True if all tiles should be released, otherwise only preloading (invisible) tiles are released.
 */
  public void clearTileCaches(boolean all) {
    TileLayerModuleJNI.TileLayer_clearTileCaches(swigCPtr, this, all);
  }

/**
 * Returns the tile load listener.<br>
 * @return The tile load listener.
 */
  public TileLoadListener getTileLoadListener() {
  long cPtr = TileLayerModuleJNI.TileLayer_getTileLoadListener(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.layers.TileLoadListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the tile load listener.<br>
 * @param tileLoadListener The tile load listener.
 */
  public void setTileLoadListener(TileLoadListener tileLoadListener) {
    TileLayerModuleJNI.TileLayer_setTileLoadListener(swigCPtr, this, TileLoadListener.getCPtr(tileLoadListener), tileLoadListener);
  }

/**
 * Returns the UTF grid event listener.<br>
 * @return The UTF grid event listener.
 */
  public UTFGridEventListener getUTFGridEventListener() {
  long cPtr = TileLayerModuleJNI.TileLayer_getUTFGridEventListener(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.layers.UTFGridEventListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the UTF grid event listener.<br>
 * @param utfGridEventListener The UTF grid event listener.
 */
  public void setUTFGridEventListener(UTFGridEventListener utfGridEventListener) {
    TileLayerModuleJNI.TileLayer_setUTFGridEventListener(swigCPtr, this, UTFGridEventListener.getCPtr(utfGridEventListener), utfGridEventListener);
  }

  public boolean isUpdateInProgress() {
    return TileLayerModuleJNI.TileLayer_isUpdateInProgress(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return TileLayerModuleJNI.TileLayer_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return TileLayerModuleJNI.TileLayer_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return TileLayerModuleJNI.TileLayer_swigGetDirectorObject(swigCPtr, this);
  }

}
