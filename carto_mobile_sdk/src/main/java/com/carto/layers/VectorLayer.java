/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.layers;

import com.carto.datasources.VectorDataSource;
import com.carto.layers.Layer;
import com.carto.layers.VectorElementEventListener;

/**
 * A vector layer that loads data using an envelope. Should be used together with corresponding data source.
 */
@com.carto.utils.DontObfuscate public class VectorLayer extends Layer {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public VectorLayer(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(VectorLayer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        VectorLayerModuleJNI.delete_VectorLayer(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.layers.VectorLayer swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.layers.VectorLayerModuleJNI.VectorLayer_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.layers.VectorLayer) director;
    }

    String objClassName = com.carto.layers.VectorLayerModuleJNI.VectorLayer_swigGetClassName(cPtr, null);
    com.carto.layers.VectorLayer objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.layers." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.layers.VectorLayer) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a VectorLayer object from a data source.<br>
 * @param dataSource The data source from which this layer loads data.
 */
  public VectorLayer(VectorDataSource dataSource) {
    this(VectorLayerModuleJNI.new_VectorLayer(VectorDataSource.getCPtr(dataSource), dataSource), true);
  }

/**
 * Returns the vector data source of this vector layer.<br>
 * @return The vector data source that was bound to this vector layer on construction.
 */
  public VectorDataSource getDataSource() {
  long cPtr = VectorLayerModuleJNI.VectorLayer_getDataSource(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.datasources.VectorDataSource.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the vector element event listener.<br>
 * @return The vector element event listener.
 */
  public VectorElementEventListener getVectorElementEventListener() {
  long cPtr = VectorLayerModuleJNI.VectorLayer_getVectorElementEventListener(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.layers.VectorElementEventListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the vector element event listener.<br>
 * @param eventListener The vector element event listener.
 */
  public void setVectorElementEventListener(VectorElementEventListener eventListener) {
    VectorLayerModuleJNI.VectorLayer_setVectorElementEventListener(swigCPtr, this, VectorElementEventListener.getCPtr(eventListener), eventListener);
  }

/**
 * Returns true if Z-buffering is enabled for 2D geometry. By default it is disabled and used only for billboards.<br>
 * @return True if Z-buffering is enabled for 2D geometry.
 */
  public boolean isZBuffering() {
    return VectorLayerModuleJNI.VectorLayer_isZBuffering(swigCPtr, this);
  }

/**
 * Sets the Z-buffering flag for 2D geometry. By default it is disabled.<br>
 * @param enabled True if Z-buffering should be enabled.
 */
  public void setZBuffering(boolean enabled) {
    VectorLayerModuleJNI.VectorLayer_setZBuffering(swigCPtr, this, enabled);
  }

  public boolean isUpdateInProgress() {
    return VectorLayerModuleJNI.VectorLayer_isUpdateInProgress(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return VectorLayerModuleJNI.VectorLayer_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return VectorLayerModuleJNI.VectorLayer_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return VectorLayerModuleJNI.VectorLayer_swigGetDirectorObject(swigCPtr, this);
  }

}
