/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.layers;

import com.carto.datasources.TileDataSource;
import com.carto.layers.VectorTileLayer;
import com.carto.utils.AssetPackage;
import com.carto.vectortiles.VectorTileDecoder;

/**
 * Specialized vector tile layer that can use built-in vector tile styles.
 */
@com.carto.utils.DontObfuscate public class CartoVectorTileLayer extends VectorTileLayer {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public CartoVectorTileLayer(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(CartoVectorTileLayer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CartoVectorTileLayerModuleJNI.delete_CartoVectorTileLayer(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.layers.CartoVectorTileLayer swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.layers.CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.layers.CartoVectorTileLayer) director;
    }

    String objClassName = com.carto.layers.CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_swigGetClassName(cPtr, null);
    com.carto.layers.CartoVectorTileLayer objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.layers." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.layers.CartoVectorTileLayer) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a CartoVectorTileLayer object from a specificed base map style.<br>
 * @param dataSource The data source from which this layer loads data.<br>
 * @param style The style to use for the layer.
 */
  public CartoVectorTileLayer(TileDataSource dataSource, CartoBaseMapStyle style) {
    this(CartoVectorTileLayerModuleJNI.new_CartoVectorTileLayer__SWIG_0(TileDataSource.getCPtr(dataSource), dataSource, style.swigValue()), true);
  }

/**
 * Constructs a CartoVectorTileLayer object from a source name and a style asset package.<br>
 * Style asset package defines visual style of the map and must be compatible with the source.<br>
 * @param dataSource The data source from which this layer loads data.<br>
 * @param styleAssetPackage The style asset package (usually a zipped file or an asset)
 */
  public CartoVectorTileLayer(TileDataSource dataSource, AssetPackage styleAssetPackage) {
    this(CartoVectorTileLayerModuleJNI.new_CartoVectorTileLayer__SWIG_1(TileDataSource.getCPtr(dataSource), dataSource, AssetPackage.getCPtr(styleAssetPackage), styleAssetPackage), true);
  }

/**
 * Constructs a CartoVectorTileLayer object from a source name and a style asset package.<br>
 * Style asset package defines visual style of the map and must be compatible with the source.<br>
 * @param dataSource The data source from which this layer loads data.<br>
 * @param styleAssetPackage The style asset package (usually a zipped file or an asset)<br>
 * @param styleName The style to use from the asset package.
 */
  public CartoVectorTileLayer(TileDataSource dataSource, AssetPackage styleAssetPackage, String styleName) {
    this(CartoVectorTileLayerModuleJNI.new_CartoVectorTileLayer__SWIG_2(TileDataSource.getCPtr(dataSource), dataSource, AssetPackage.getCPtr(styleAssetPackage), styleAssetPackage, styleName), true);
  }

/**
 * Returns the current language used for the layer.<br>
 * @return The current language. If the returned string is empty, then 'local' languages are used.
 */
  public String getLanguage() {
    return CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_getLanguage(swigCPtr, this);
  }

/**
 * Sets the current map language.<br>
 * @param lang The new language to use. The default is local language (empty string).
 */
  public void setLanguage(String lang) {
    CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_setLanguage(swigCPtr, this, lang);
  }

/**
 * Returns the current fallback language used for the layer. Fallback language is used when a primary language name is not available.<br>
 * @return The current fallback language. If the returned string is empty, then 'local' languages are used.
 */
  public String getFallbackLanguage() {
    return CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_getFallbackLanguage(swigCPtr, this);
  }

/**
 * Sets the current fallback map language. Fallback language is used when a primary language name is not available.<br>
 * @param lang The new fallback language to use. The default is local language (empty string).
 */
  public void setFallbackLanguage(String lang) {
    CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_setFallbackLanguage(swigCPtr, this, lang);
  }

/**
 * Returns the current render mode for Point-Of-Interest icons.<br>
 * @return The current render mode for for Point-Of-Interest icons.
 */
  public CartoBaseMapPOIRenderMode getPOIRenderMode() {
    return CartoBaseMapPOIRenderMode.swigToEnum(CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_getPOIRenderMode(swigCPtr, this));
  }

/**
 * Sets the current render mode for Point-Of-Interest icons.<br>
 * @param renderMode The new render mode for Point-Of-Interest icons.
 */
  public void setPOIRenderMode(CartoBaseMapPOIRenderMode renderMode) {
    CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_setPOIRenderMode(swigCPtr, this, renderMode.swigValue());
  }

/**
 * Returns the current render mode for buildings.<br>
 * @return The current render mode for buildings.
 */
  public CartoBaseMapBuildingRenderMode getBuildingRenderMode() {
    return CartoBaseMapBuildingRenderMode.swigToEnum(CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_getBuildingRenderMode(swigCPtr, this));
  }

/**
 * Sets the current render mode for buildings.<br>
 * @param renderMode The new render mode for buildings.
 */
  public void setBuildingRenderMode(CartoBaseMapBuildingRenderMode renderMode) {
    CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_setBuildingRenderMode(swigCPtr, this, renderMode.swigValue());
  }

/**
 * Creates a new tile decoder from the specified base map style.<br>
 * @param style The style to use for the decoder.<br>
 * @return The new vector tile decoder configured for the style.
 */
  public static VectorTileDecoder createTileDecoder(CartoBaseMapStyle style) {
  long cPtr = CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_createTileDecoder__SWIG_0(style.swigValue());
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.vectortiles.VectorTileDecoder.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Creates a new tile decoder from the specified asset package.<br>
 * @param styleAssetPackage The style asset package (usually a zipped file or an asset)<br>
 * @return The new vector tile decoder configured for the style.
 */
  public static VectorTileDecoder createTileDecoder(AssetPackage styleAssetPackage) {
  long cPtr = CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_createTileDecoder__SWIG_1(AssetPackage.getCPtr(styleAssetPackage), styleAssetPackage);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.vectortiles.VectorTileDecoder.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Creates a new tile decoder from the specified asset package.<br>
 * @param styleAssetPackage The style asset package (usually a zipped file or an asset)<br>
 * @param styleName The name of the style to use.<br>
 * @return The new vector tile decoder configured for the style.
 */
  public static VectorTileDecoder createTileDecoder(AssetPackage styleAssetPackage, String styleName) {
  long cPtr = CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_createTileDecoder__SWIG_2(AssetPackage.getCPtr(styleAssetPackage), styleAssetPackage, styleName);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.vectortiles.VectorTileDecoder.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return CartoVectorTileLayerModuleJNI.CartoVectorTileLayer_swigGetDirectorObject(swigCPtr, this);
  }

}
