/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.layers;

import com.carto.core.ScreenPos;
import com.carto.geometry.Geometry;
import com.carto.vectorelements.VectorElement;
import com.carto.styles.PointStyle;
import com.carto.ui.VectorElementDragInfo;

/**
 * Listener interface for catching various events<br>
 * during map editing interactions. 
 */
@com.carto.utils.DontObfuscate public class VectorEditEventListener {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public VectorEditEventListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(VectorEditEventListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        VectorEditEventListenerModuleJNI.delete_VectorEditEventListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    VectorEditEventListenerModuleJNI.VectorEditEventListener_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    VectorEditEventListenerModuleJNI.VectorEditEventListener_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.layers.VectorEditEventListener swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.layers.VectorEditEventListenerModuleJNI.VectorEditEventListener_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.layers.VectorEditEventListener) director;
    }

    String objClassName = com.carto.layers.VectorEditEventListenerModuleJNI.VectorEditEventListener_swigGetClassName(cPtr, null);
    com.carto.layers.VectorEditEventListener objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.layers." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.layers.VectorEditEventListener) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Called when element is being selected. Can be used to disallow element selection.<br>
 * @param element The element being selected<br>
 * @return true if the element is selectable, false otherwise
 */
  public boolean onElementSelect(VectorElement element) {
    return (getClass() == VectorEditEventListener.class) ? VectorEditEventListenerModuleJNI.VectorEditEventListener_onElementSelect(swigCPtr, this, VectorElement.getCPtr(element), element) : VectorEditEventListenerModuleJNI.VectorEditEventListener_onElementSelectSwigExplicitVectorEditEventListener(swigCPtr, this, VectorElement.getCPtr(element), element);
  }

/**
 * Called when element is unselected.<br>
 * @param element The element which was unselected
 */
  public void onElementDeselected(VectorElement element) {
    if (getClass() == VectorEditEventListener.class) VectorEditEventListenerModuleJNI.VectorEditEventListener_onElementDeselected(swigCPtr, this, VectorElement.getCPtr(element), element); else VectorEditEventListenerModuleJNI.VectorEditEventListener_onElementDeselectedSwigExplicitVectorEditEventListener(swigCPtr, this, VectorElement.getCPtr(element), element);
  }

/**
 * Called when element is being modified.<br>
 * It the responsibility of the implementation of this method to update actual vector element geometry.<br>
 * The geometry may be modified before updating the vector element, but topology of the element MUST not change!<br>
 * @param element The element that is being edited<br>
 * @param geometry The modified geometry for the element
 */
  public void onElementModify(VectorElement element, Geometry geometry) {
    VectorEditEventListenerModuleJNI.VectorEditEventListener_onElementModify(swigCPtr, this, VectorElement.getCPtr(element), element, Geometry.getCPtr(geometry), geometry);
  }

/**
 * Called when element should be deleted.<br>
 * @param element The element that needs to be deleted
 */
  public void onElementDelete(VectorElement element) {
    VectorEditEventListenerModuleJNI.VectorEditEventListener_onElementDelete(swigCPtr, this, VectorElement.getCPtr(element), element);
  }

/**
 * Called before element or vertex is dragged.<br>
 * @param dragInfo The information about the element or vertex.<br>
 * @return The intended result of dragging.
 */
  public VectorElementDragResult onDragStart(VectorElementDragInfo dragInfo) {
    return VectorElementDragResult.swigToEnum((getClass() == VectorEditEventListener.class) ? VectorEditEventListenerModuleJNI.VectorEditEventListener_onDragStart(swigCPtr, this, VectorElementDragInfo.getCPtr(dragInfo), dragInfo) : VectorEditEventListenerModuleJNI.VectorEditEventListener_onDragStartSwigExplicitVectorEditEventListener(swigCPtr, this, VectorElementDragInfo.getCPtr(dragInfo), dragInfo));
  }

/**
 * Called when element or vertex is being dragged to specific location.<br>
 * @param dragInfo The information about the element or vertex.<br>
 * @return The intended result of dragging.
 */
  public VectorElementDragResult onDragMove(VectorElementDragInfo dragInfo) {
    return VectorElementDragResult.swigToEnum((getClass() == VectorEditEventListener.class) ? VectorEditEventListenerModuleJNI.VectorEditEventListener_onDragMove(swigCPtr, this, VectorElementDragInfo.getCPtr(dragInfo), dragInfo) : VectorEditEventListenerModuleJNI.VectorEditEventListener_onDragMoveSwigExplicitVectorEditEventListener(swigCPtr, this, VectorElementDragInfo.getCPtr(dragInfo), dragInfo));
  }

/**
 * Called when element or vertex dragging is finished.<br>
 * @param dragInfo The information about the element or vertex.<br>
 * @return The intended result of dragging.
 */
  public VectorElementDragResult onDragEnd(VectorElementDragInfo dragInfo) {
    return VectorElementDragResult.swigToEnum((getClass() == VectorEditEventListener.class) ? VectorEditEventListenerModuleJNI.VectorEditEventListener_onDragEnd(swigCPtr, this, VectorElementDragInfo.getCPtr(dragInfo), dragInfo) : VectorEditEventListenerModuleJNI.VectorEditEventListener_onDragEndSwigExplicitVectorEditEventListener(swigCPtr, this, VectorElementDragInfo.getCPtr(dragInfo), dragInfo));
  }

/**
 * Called when drag point style is needed.<br>
 * @param element The vector element being dragged<br>
 * @param dragPointStyle Drag point style.<br>
 * @return The point style to use for the drag point.
 */
  public PointStyle onSelectDragPointStyle(VectorElement element, VectorElementDragPointStyle dragPointStyle) {
  long cPtr = VectorEditEventListenerModuleJNI.VectorEditEventListener_onSelectDragPointStyle(swigCPtr, this, VectorElement.getCPtr(element), element, dragPointStyle.swigValue());
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.PointStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return VectorEditEventListenerModuleJNI.VectorEditEventListener_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return VectorEditEventListenerModuleJNI.VectorEditEventListener_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return VectorEditEventListenerModuleJNI.VectorEditEventListener_swigGetDirectorObject(swigCPtr, this);
  }

  public VectorEditEventListener() {
    this(VectorEditEventListenerModuleJNI.new_VectorEditEventListener(), true);
    VectorEditEventListenerModuleJNI.VectorEditEventListener_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

}
