/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.components;

/**
 *  Possible panning modes for dual touch user input.
 */
public enum PanningMode {
/**
 * Free panning means that the map panning is unrestricted, user is able to zoom, rotate and <br>
 * pan the map at the same time without any artificial limits.
 */
  PANNING_MODE_FREE,
/**
 * Sticky panning means that the map panning is restricted, user is able to freely pan the map,<br>
 * but zooming and rotating gestures can't be performed at the same time. User is still able to <br>
 * switch between zooming and rotating the map but it takes a bit more effort compared to FREE panning.<br>
 * gesture is performed and
 */
  PANNING_MODE_STICKY,
/**
 * Final sticky panning means that the map panning is restricted, user is able to freely pan the map,<br>
 * but zooming and rotating gestures can't be performed at the same time. Once the gesture type is <br>
 * determined the user is stuck with either zooming or rotating. To switch the gesture the user has to lift<br>
 * at least one the two fingers off the screen.
 */
  PANNING_MODE_STICKY_FINAL;

  public final int swigValue() {
    return swigValue;
  }

  public static PanningMode swigToEnum(int swigValue) {
    PanningMode[] swigValues = PanningMode.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (PanningMode swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + PanningMode.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private PanningMode() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private PanningMode(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private PanningMode(PanningMode swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

