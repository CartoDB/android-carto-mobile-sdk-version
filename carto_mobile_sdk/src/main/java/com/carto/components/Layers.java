/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.components;

import com.carto.layers.Layer;
import com.carto.layers.LayerVector;

/**
 * Container for all raster and vector layers of the map view.<br>
 * <br>
 * The order in which layers are added is important for vector elements like Points, Lines<br>
 * and Polygons. For these elements the layer ordering defines their draw order.<br>
 * Other elements like NMLModels and Polygon3Ds are z ordered and are drawn using the depth buffer.<br>
 * For Billboard elements like Markers and Labels, the layer ordering is unimportant, because<br>
 * they will be sorted from back to front and drawn in that order on top of all other vector elements.
 */
public class Layers {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public Layers(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(Layers obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LayersModuleJNI.delete_Layers(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof Layers) {
      return ((Layers)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Returns the current layer count.<br>
 * @return The layer count.
 */
  public int count() {
    return LayersModuleJNI.Layers_count(swigCPtr, this);
  }

/**
 * Clears the layer stack.
 */
  public void clear() {
    LayersModuleJNI.Layers_clear(swigCPtr, this);
  }

/**
 * Returns the layer at the specified index.<br>
 * @param index The layer index to return. Must be between 0 and count (exclusive).<br>
 * @return The layer at the specified index.<br>
 * @throws java.lang.IndexOutOfBoundsException If the index is out of range.
 */
  public Layer get(int index) {
  long cPtr = LayersModuleJNI.Layers_get(swigCPtr, this, index);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.layers.Layer.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the list of all layers. The layers are in the order in which they were added.<br>
 * @return A vector of all previously added layers.
 */
  public LayerVector getAll() { return new LayerVector(LayersModuleJNI.Layers_getAll(swigCPtr, this), true); }

/**
 * Replaces the layer at the specified index.<br>
 * @param index The layer index to replace. Must be between 0 and count (exclusive).<br>
 * @param layer The new layer.<br>
 * @throws java.lang.IndexOutOfBoundsException If the index is out of range.
 */
  public void set(int index, Layer layer) {
    LayersModuleJNI.Layers_set(swigCPtr, this, index, Layer.getCPtr(layer), layer);
  }

/**
 * Replaces all the layers with the given layer list.<br>
 * @param layers The new list of layers.
 */
  public void setAll(LayerVector layers) {
    LayersModuleJNI.Layers_setAll(swigCPtr, this, LayerVector.getCPtr(layers), layers);
  }

/**
 * Inserts a new layer at the specified position.<br>
 * All previous layers starting from this index will be moved to the next position.<br>
 * @param index The layer index. Must be between 0 and count (inclusive).<br>
 * @param layer The new layer.<br>
 * @throws java.lang.IndexOutOfBoundsException If the index is out of range.
 */
  public void insert(int index, Layer layer) {
    LayersModuleJNI.Layers_insert(swigCPtr, this, index, Layer.getCPtr(layer), layer);
  }

/**
 * Adds a new layer to the layer stack. The new layer will be the last (and topmost) layer.<br>
 * @param layer The layer to be added.
 */
  public void add(Layer layer) {
    LayersModuleJNI.Layers_add(swigCPtr, this, Layer.getCPtr(layer), layer);
  }

/**
 * Adds a a list of layers to the layer stack. The new layers will be the last (and topmost) layers.<br>
 * @param layers The layer list to be added.
 */
  public void addAll(LayerVector layers) {
    LayersModuleJNI.Layers_addAll(swigCPtr, this, LayerVector.getCPtr(layers), layers);
  }

/**
 * Removes a layer from the layer stack.<br>
 * @param layer The layer to be removed.<br>
 * @return True if the layer was removed. False otherwise (layer was not found).
 */
  public boolean remove(Layer layer) {
    return LayersModuleJNI.Layers_remove(swigCPtr, this, Layer.getCPtr(layer), layer);
  }

/**
 * Removes a list of layers from the layer stack.<br>
 * @param layers The list of layers to be removed.<br>
 * @return True if all layer were removed. False otherwise (some layers were not found).
 */
  public boolean removeAll(LayerVector layers) {
    return LayersModuleJNI.Layers_removeAll(swigCPtr, this, LayerVector.getCPtr(layers), layers);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return LayersModuleJNI.Layers_swigGetRawPtr(swigCPtr, this);
  }

}
