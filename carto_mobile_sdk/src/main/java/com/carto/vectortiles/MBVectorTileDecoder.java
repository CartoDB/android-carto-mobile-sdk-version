/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.vectortiles;

import com.carto.core.BinaryData;
import com.carto.core.StringVector;
import com.carto.graphics.Color;
import com.carto.styles.CompiledStyleSet;
import com.carto.styles.CartoCSSStyleSet;
import com.carto.vectortiles.VectorTileDecoder;

/**
 * Decoder for vector tiles in MapBox format.
 */
@com.carto.utils.DontObfuscate public class MBVectorTileDecoder extends VectorTileDecoder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public MBVectorTileDecoder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(MBVectorTileDecoder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MBVectorTileDecoderModuleJNI.delete_MBVectorTileDecoder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.vectortiles.MBVectorTileDecoder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.vectortiles.MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.vectortiles.MBVectorTileDecoder) director;
    }

    String objClassName = com.carto.vectortiles.MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_swigGetClassName(cPtr, null);
    com.carto.vectortiles.MBVectorTileDecoder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.vectortiles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.vectortiles.MBVectorTileDecoder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a decoder for MapBox vector tiles based on specified compiled style set.<br>
 * @param compiledStyleSet The compiled style set for the tiles.<br>
 * @throws java.lang.Exception If the decoder could not be created or there are issues with the style set.
 */
  public MBVectorTileDecoder(CompiledStyleSet compiledStyleSet) {
    this(MBVectorTileDecoderModuleJNI.new_MBVectorTileDecoder__SWIG_0(CompiledStyleSet.getCPtr(compiledStyleSet), compiledStyleSet), true);
  }

/**
 * Constructs a decoder for MapBox vector tiles based on specified CartoCSS style set.<br>
 * @param cartoCSSStyleSet The CartoCSS style set for the tiles.<br>
 * @throws java.lang.Exception If the decoder could not be created or there are issues with the style set.
 */
  public MBVectorTileDecoder(CartoCSSStyleSet cartoCSSStyleSet) {
    this(MBVectorTileDecoderModuleJNI.new_MBVectorTileDecoder__SWIG_1(CartoCSSStyleSet.getCPtr(cartoCSSStyleSet), cartoCSSStyleSet), true);
  }

/**
 * Returns the current compiled style set used by the decoder.<br>
 * If decoder uses non-compiled style set, null is returned.<br>
 * @return The current style set.
 */
  public CompiledStyleSet getCompiledStyleSet() {
    long cPtr = MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_getCompiledStyleSet(swigCPtr, this);
    return (cPtr == 0) ? null : new CompiledStyleSet(cPtr, true);
  }

/**
 * Sets the current compiled style set used by the decoder.<br>
 * @param styleSet The new style set to use.<br>
 * @throws java.lang.Exception If the decoder could not be updated or there are issues with the style set.
 */
  public void setCompiledStyleSet(CompiledStyleSet styleSet) {
    MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_setCompiledStyleSet(swigCPtr, this, CompiledStyleSet.getCPtr(styleSet), styleSet);
  }

/**
 * Returns the current CartoCSS style set used by the decoder.<br>
 * If decoder uses non-CartoCSS style set, null is returned.<br>
 * @return The current style set.
 */
  public CartoCSSStyleSet getCartoCSSStyleSet() {
    long cPtr = MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_getCartoCSSStyleSet(swigCPtr, this);
    return (cPtr == 0) ? null : new CartoCSSStyleSet(cPtr, true);
  }

/**
 * Sets the current CartoCSS style set used by the decoder.<br>
 * @param styleSet The new style set to use.<br>
 * @throws java.lang.Exception If the decoder could not be updated or there are issues with the style set.
 */
  public void setCartoCSSStyleSet(CartoCSSStyleSet styleSet) {
    MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_setCartoCSSStyleSet(swigCPtr, this, CartoCSSStyleSet.getCPtr(styleSet), styleSet);
  }

/**
 * Returns the list of all available style parameters.<br>
 * @return The list of all available style parameters.
 */
  public StringVector getStyleParameters() { return new StringVector(MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_getStyleParameters(swigCPtr, this), true); }

/**
 * Returns the value of the specified style parameter.<br>
 * The style parameter must be declared in the current style.<br>
 * @param param The parameter to return.<br>
 * @return The value of the parameter. If parameter does not exists, empty string is returned.<br>
 * @throws java.lang.IllegalArgumentException If the style parameter does not exist.
 */
  public String getStyleParameter(String param) {
    return MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_getStyleParameter(swigCPtr, this, param);
  }

/**
 * Sets the value of the specified parameter.<br>
 * The style parameter must be declared in the current style.<br>
 * @param param The parameter to set.<br>
 * @param value The value for the parameter.<br>
 * @return True if the parameter was set. False if the style parameter does not exist or could not be set.
 */
  public boolean setStyleParameter(String param, String value) {
    return MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_setStyleParameter(swigCPtr, this, param, value);
  }

/**
 * Returns the value of feature id override flag. This is intended for cases when feature ids in tile are not globally unique.<br>
 * @return The value of feature id override flag.
 */
  public boolean isFeatureIdOverride() {
    return MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_isFeatureIdOverride(swigCPtr, this);
  }

/**
 * Sets the value of feature id override flag. This is intended for cases when feature ids in tile are not globally unique.<br>
 * @param idOverride The value of the flag.
 */
  public void setFeatureIdOverride(boolean idOverride) {
    MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_setFeatureIdOverride(swigCPtr, this, idOverride);
  }

  public void addFallbackFont(BinaryData fontData) {
    MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_addFallbackFont(swigCPtr, this, BinaryData.getCPtr(fontData), fontData);
  }

  public int getMinZoom() {
    return MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_getMinZoom(swigCPtr, this);
  }

  public int getMaxZoom() {
    return MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_getMaxZoom(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return MBVectorTileDecoderModuleJNI.MBVectorTileDecoder_swigGetDirectorObject(swigCPtr, this);
  }

}
