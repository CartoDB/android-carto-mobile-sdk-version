/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.vectortiles;

import com.carto.core.BinaryData;
import com.carto.core.StringVector;
import com.carto.core.StringMap;
import com.carto.graphics.Color;
import com.carto.styles.CartoCSSStyleSet;
import com.carto.styles.StringCartoCSSStyleSetMap;
import com.carto.vectortiles.VectorTileDecoder;

/**
 * Decoder for Carto vector tiles in MapBox format.
 */
@com.carto.utils.DontObfuscate public class CartoVectorTileDecoder extends VectorTileDecoder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public CartoVectorTileDecoder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(CartoVectorTileDecoder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CartoVectorTileDecoderModuleJNI.delete_CartoVectorTileDecoder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.vectortiles.CartoVectorTileDecoder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.vectortiles.CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.vectortiles.CartoVectorTileDecoder) director;
    }

    String objClassName = com.carto.vectortiles.CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_swigGetClassName(cPtr, null);
    com.carto.vectortiles.CartoVectorTileDecoder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.vectortiles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.vectortiles.CartoVectorTileDecoder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a decoder for Carto vector tiles based on specified CartoCSS style set.<br>
 * @param layerIds The list of layer ids.<br>
 * @param layerStyleSets The CartoCSS style sets for the layers.<br>
 * @throws java.lang.Exception If the decoder could not be created or there are issues with the style set.
 */
  public CartoVectorTileDecoder(StringVector layerIds, StringCartoCSSStyleSetMap layerStyleSets) {
    this(CartoVectorTileDecoderModuleJNI.new_CartoVectorTileDecoder(StringVector.getCPtr(layerIds), layerIds, StringCartoCSSStyleSetMap.getCPtr(layerStyleSets), layerStyleSets), true);
  }

/**
 * Returns the list of layer ids used when decoding a tile.<br>
 * @return The list of layer ids used.
 */
  public StringVector getLayerIds() { return new StringVector(CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_getLayerIds(swigCPtr, this), true); }

/**
 * Returns the visibility of the specified layer.<br>
 * @param layerId The layer name to use.<br>
 * @return True if the layer is visible, false otherwise.
 */
  public boolean isLayerVisible(String layerId) {
    return CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_isLayerVisible(swigCPtr, this, layerId);
  }

/**
 * Sets the visibility of the specified layer.<br>
 * @param layerId The layer name to use.<br>
 * @param visible True if the layer should be visible, false if hidden.
 */
  public void setLayerVisible(String layerId, boolean visible) {
    CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_setLayerVisible(swigCPtr, this, layerId, visible);
  }

/**
 * Returns the CartoCSS style set used by the decoder for the specified layer.<br>
 * @param layerId The layer name to use.<br>
 * @return The given layer CartoCSS style.<br>
 * @throws java.lang.IndexOutOfBoundsException If the layer id is not valid.
 */
  public CartoCSSStyleSet getLayerStyleSet(String layerId) {
    long cPtr = CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_getLayerStyleSet(swigCPtr, this, layerId);
    return (cPtr == 0) ? null : new CartoCSSStyleSet(cPtr, true);
  }

/**
 * Sets the CartoCSS style set used by the decoder for the specified layer.<br>
 * @param layerId The layer name to use.<br>
 * @param styleSet The new style set to use.<br>
 * @throws java.lang.Exception If the decoder could not be updated or there are issues with the CartoCSS.<br>
 * @throws java.lang.IndexOutOfBoundsException If the layer id is not valid.
 */
  public void setLayerStyleSet(String layerId, CartoCSSStyleSet styleSet) {
    CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_setLayerStyleSet(swigCPtr, this, layerId, CartoCSSStyleSet.getCPtr(styleSet), styleSet);
  }

  public void addFallbackFont(BinaryData fontData) {
    CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_addFallbackFont(swigCPtr, this, BinaryData.getCPtr(fontData), fontData);
  }

  public int getMinZoom() {
    return CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_getMinZoom(swigCPtr, this);
  }

  public int getMaxZoom() {
    return CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_getMaxZoom(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return CartoVectorTileDecoderModuleJNI.CartoVectorTileDecoder_swigGetDirectorObject(swigCPtr, this);
  }

}
