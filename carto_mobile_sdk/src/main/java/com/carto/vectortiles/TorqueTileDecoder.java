/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.vectortiles;

import com.carto.core.BinaryData;
import com.carto.graphics.Color;
import com.carto.styles.CartoCSSStyleSet;
import com.carto.vectortiles.VectorTileDecoder;

/**
 * A decoder for Torque layer that accepts json-based Torque tiles.
 */
@com.carto.utils.DontObfuscate public class TorqueTileDecoder extends VectorTileDecoder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public TorqueTileDecoder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(TorqueTileDecoder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TorqueTileDecoderModuleJNI.delete_TorqueTileDecoder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.vectortiles.TorqueTileDecoder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.vectortiles.TorqueTileDecoderModuleJNI.TorqueTileDecoder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.vectortiles.TorqueTileDecoder) director;
    }

    String objClassName = com.carto.vectortiles.TorqueTileDecoderModuleJNI.TorqueTileDecoder_swigGetClassName(cPtr, null);
    com.carto.vectortiles.TorqueTileDecoder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.vectortiles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.vectortiles.TorqueTileDecoder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a new TorqueTileDecoder given style.<br>
 * @param styleSet The style set used by decoder.<br>
 * @throws java.lang.Exception If the decoder could not be created or there are issues with the style set.
 */
  public TorqueTileDecoder(CartoCSSStyleSet styleSet) {
    this(TorqueTileDecoderModuleJNI.new_TorqueTileDecoder(CartoCSSStyleSet.getCPtr(styleSet), styleSet), true);
  }

/**
 * Returns the frame count defined in the Torque style.<br>
 * @return The frame count in the animation.
 */
  public int getFrameCount() {
    return TorqueTileDecoderModuleJNI.TorqueTileDecoder_getFrameCount(swigCPtr, this);
  }

/**
 * Returns the tile resolution, in pixels.<br>
 * @return The tile resolution in pixels.
 */
  public int getResolution() {
    return TorqueTileDecoderModuleJNI.TorqueTileDecoder_getResolution(swigCPtr, this);
  }

/**
 * Returns the animation duration, in seconds.<br>
 * @return The animation duration, in seconds.
 */
  public float getAnimationDuration() {
    return TorqueTileDecoderModuleJNI.TorqueTileDecoder_getAnimationDuration(swigCPtr, this);
  }

/**
 * Returns the current style set used by the decoder.<br>
 * @return The current style set.
 */
  public CartoCSSStyleSet getStyleSet() {
    long cPtr = TorqueTileDecoderModuleJNI.TorqueTileDecoder_getStyleSet(swigCPtr, this);
    return (cPtr == 0) ? null : new CartoCSSStyleSet(cPtr, true);
  }

/**
 * Sets the current style set used by the decoder.<br>
 * @param styleSet The new style set to use.<br>
 * @throws java.lang.Exception If the decoder could not be updated or there are issues with the style set.
 */
  public void setStyleSet(CartoCSSStyleSet styleSet) {
    TorqueTileDecoderModuleJNI.TorqueTileDecoder_setStyleSet(swigCPtr, this, CartoCSSStyleSet.getCPtr(styleSet), styleSet);
  }

  public void addFallbackFont(BinaryData fontData) {
    TorqueTileDecoderModuleJNI.TorqueTileDecoder_addFallbackFont(swigCPtr, this, BinaryData.getCPtr(fontData), fontData);
  }

  public int getMinZoom() {
    return TorqueTileDecoderModuleJNI.TorqueTileDecoder_getMinZoom(swigCPtr, this);
  }

  public int getMaxZoom() {
    return TorqueTileDecoderModuleJNI.TorqueTileDecoder_getMaxZoom(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return TorqueTileDecoderModuleJNI.TorqueTileDecoder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return TorqueTileDecoderModuleJNI.TorqueTileDecoder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return TorqueTileDecoderModuleJNI.TorqueTileDecoder_swigGetDirectorObject(swigCPtr, this);
  }

}
