/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.projections;

import com.carto.core.MapBounds;
import com.carto.core.MapPos;

/**
 * An abstract base class for all projections.
 */
@com.carto.utils.DontObfuscate public class Projection {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public Projection(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(Projection obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ProjectionModuleJNI.delete_Projection(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.projections.Projection swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.projections.ProjectionModuleJNI.Projection_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.projections.Projection) director;
    }

    String objClassName = com.carto.projections.ProjectionModuleJNI.Projection_swigGetClassName(cPtr, null);
    com.carto.projections.Projection objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.projections." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.projections.Projection) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof Projection) {
      return ((Projection)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Returns the bounds of this projection.<br>
 * @return The bounds of this projection.
 */
  public MapBounds getBounds() { return new MapBounds(ProjectionModuleJNI.Projection_getBounds(swigCPtr, this), true); }

/**
 * Transforms a position from the WGS84 coordinate system to the coordinate system of this projection.<br>
 * @param pos The position in the WGS84 coordinate system. It should be encoded as longitude-latitude.<br>
 * @return The transformed position in the coordinate system of this projection.
 */
  public MapPos fromWgs84(MapPos pos) { return new MapPos(ProjectionModuleJNI.Projection_fromWgs84(swigCPtr, this, MapPos.getCPtr(pos), pos), true); }

/**
 * Transforms a position from the coordinate system of this projection to the WGS84 coordinate system.<br>
 * @param pos The position in the coordinate system of this projection.<br>
 * @return The transformed position in the WGS84 coordinate system. It is given as longitude-latitude.
 */
  public MapPos toWgs84(MapPos pos) { return new MapPos(ProjectionModuleJNI.Projection_toWgs84(swigCPtr, this, MapPos.getCPtr(pos), pos), true); }

/**
 * Transforms a position given using latitutde-longitude coordinates from the WGS84 coordinate system to the coordinate system of this projection.<br>
 * @param lat The latitude in the WGS84 coordinate system. It should be in range -90..90.<br>
 * @param lng The longitude in the WGS84 coordinate system. It should be in range -180..180.<br>
 * @return The transformed position in the coordinate system of this projection.
 */
  public MapPos fromLatLong(double lat, double lng) { return new MapPos(ProjectionModuleJNI.Projection_fromLatLong(swigCPtr, this, lat, lng), true); }

/**
 * Transforms a position from the coordinate system of this projection to the WGS84 coordinate system latitude-longitute coordinates.<br>
 * @param x The x position in the coordinate system of this projection.<br>
 * @param y The y position in the coordinate system of this projection.<br>
 * @return The transformed position in the WGS84 coordinate system given as latitude-longitude.
 */
  public MapPos toLatLong(double x, double y) { return new MapPos(ProjectionModuleJNI.Projection_toLatLong(swigCPtr, this, x, y), true); }

/**
 * Return name of this projection in Well-Known format. For example, as "EPSG:3857"<br>
 * @return The name of this projection.
 */
  public String getName() {
    return ProjectionModuleJNI.Projection_getName(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return ProjectionModuleJNI.Projection_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return ProjectionModuleJNI.Projection_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return ProjectionModuleJNI.Projection_swigGetDirectorObject(swigCPtr, this);
  }

}
