/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.services;

import com.carto.core.Variant;
import com.carto.core.IntVector;
import com.carto.core.StringVariantMap;
import com.carto.core.StringMap;
import com.carto.core.StringVector;
import com.carto.layers.Layer;
import com.carto.layers.LayerVector;
import com.carto.utils.AssetPackage;

/**
 * A high-level interface for Carto Maps Service.<br>
 * The service can be used to automatically configure layers using<br>
 * anonymous map configurations or by using parametrized named maps.
 */
public class CartoMapsService {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public CartoMapsService(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(CartoMapsService obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CartoMapsServiceModuleJNI.delete_CartoMapsService(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof CartoMapsService) {
      return ((CartoMapsService)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs a new CartoMapsService instance with default settings.
 */
  public CartoMapsService() {
    this(CartoMapsServiceModuleJNI.new_CartoMapsService(), true);
  }

/**
 * Returns the user account name used when accessing the online service.<br>
 * @return The user account name used when accessing the online service.
 */
  public String getUsername() {
    return CartoMapsServiceModuleJNI.CartoMapsService_getUsername(swigCPtr, this);
  }

/**
 * Sets the user account name used when accessing the online service.<br>
 * @param username The user account name used when accessing the online service.
 */
  public void setUsername(String username) {
    CartoMapsServiceModuleJNI.CartoMapsService_setUsername(swigCPtr, this, username);
  }

/**
 * Returns the API key used when accessing the online service.<br>
 * @return The API key used when accessing the online service.
 */
  public String getAPIKey() {
    return CartoMapsServiceModuleJNI.CartoMapsService_getAPIKey(swigCPtr, this);
  }

/**
 * Sets the optional API key used when accessing the online service.<br>
 * Usually this is not needed and can be left blank.<br>
 * @param apiKey The optional API key used when accessing the online service.
 */
  public void setAPIKey(String apiKey) {
    CartoMapsServiceModuleJNI.CartoMapsService_setAPIKey(swigCPtr, this, apiKey);
  }

/**
 * Returns the API endpoint template of the online service.<br>
 * @return The API endpoint template of the online service.
 */
  public String getAPITemplate() {
    return CartoMapsServiceModuleJNI.CartoMapsService_getAPITemplate(swigCPtr, this);
  }

/**
 * Sets the API endpoint template of the online service.<br>
 * By default cartodb.com endpoint is used. This needs to be redefined only for on-premise services.<br>
 * @param apiTemplate The API endpoint template of the online service. For example, "https://{user}.cartodb.com"
 */
  public void setAPITemplate(String apiTemplate) {
    CartoMapsServiceModuleJNI.CartoMapsService_setAPITemplate(swigCPtr, this, apiTemplate);
  }

/**
 * Returns true is the service configures<br>
 * layers as interactive by using UTF grids for click detection.<br>
 * @return True if the service configures layers as interactive.
 */
  public boolean isInteractive() {
    return CartoMapsServiceModuleJNI.CartoMapsService_isInteractive(swigCPtr, this);
  }

/**
 * Sets the interactivity flag of the layers.<br>
 * @param interactive True if layers should be configured as interactive. The default is false.
 */
  public void setInteractive(boolean interactive) {
    CartoMapsServiceModuleJNI.CartoMapsService_setInteractive(swigCPtr, this, interactive);
  }

/**
 * Returns the list of layer indices that are created.<br>
 * If non-empty, only layers from this list are created.<br>
 * @return The list of layer indices that are created.
 */
  public IntVector getLayerIndices() { return new IntVector(CartoMapsServiceModuleJNI.CartoMapsService_getLayerIndices(swigCPtr, this), true); }

/**
 * Sets the list of layer indices that are created.<br>
 * If non-empty, only layers from this list are created.<br>
 * @param layerIndices The list of layer indices that are created.
 */
  public void setLayerIndices(IntVector layerIndices) {
    CartoMapsServiceModuleJNI.CartoMapsService_setLayerIndices(swigCPtr, this, IntVector.getCPtr(layerIndices), layerIndices);
  }

/**
 * Returns the list of authentication tokens used when accessing online service.<br>
 * @return The list of authentication tokens used when accessing online service.
 */
  public StringVector getAuthTokens() { return new StringVector(CartoMapsServiceModuleJNI.CartoMapsService_getAuthTokens(swigCPtr, this), true); }

/**
 * Sets the list of authentication tokens used when accessing online service.<br>
 * @param authTokens The list of authentication tokens used when accessing online service.
 */
  public void setAuthTokens(StringVector authTokens) {
    CartoMapsServiceModuleJNI.CartoMapsService_setAuthTokens(swigCPtr, this, StringVector.getCPtr(authTokens), authTokens);
  }

/**
 * Returns true if the service configures layers as vector tile layers,<br>
 * when possible. By default this is false. Vector layers<br>
 * provide much better visual quality at the expense of performance.<br>
 * @return True if vector layers should be used. False is raster layers are used.
 */
  public boolean isDefaultVectorLayerMode() {
    return CartoMapsServiceModuleJNI.CartoMapsService_isDefaultVectorLayerMode(swigCPtr, this);
  }

/**
 * Sets the service to vector layer mode or raster layer mode.<br>
 * By default service creates raster layers, but vector layers may<br>
 * provide much better visual quality at the expense of performance.<br>
 * @param vectorLayerMode True if vector layers should be used. False is raster layers are used.
 */
  public void setDefaultVectorLayerMode(boolean vectorLayerMode) {
    CartoMapsServiceModuleJNI.CartoMapsService_setDefaultVectorLayerMode(swigCPtr, this, vectorLayerMode);
  }

/**
 * Returns the current vector tile buffer size.<br>
 * @return The current vector tile buffer size in pixels.
 */
  public float getVectorTileBufferSize() {
    return CartoMapsServiceModuleJNI.CartoMapsService_getVectorTileBufferSize(swigCPtr, this);
  }

/**
 * Sets the current vector tile buffer size.<br>
 * This can be used to tweak/improve performance or fix rendering artifacts.<br>
 * The lower values make tiles smaller and improve performance but may create rendering artifacts.<br>
 * The default value is 64 and should be good fit for most visualizations.<br>
 * @param bufferSize The new buffer size value.
 */
  public void setVectorTileBufferSize(float bufferSize) {
    CartoMapsServiceModuleJNI.CartoMapsService_setVectorTileBufferSize(swigCPtr, this, bufferSize);
  }

/**
 * Returns true if 'strict mode' is enabled (the service throws exceptions whenever an error is encountered).<br>
 * @return True if 'strict mode' is enabled.
 */
  public boolean isStrictMode() {
    return CartoMapsServiceModuleJNI.CartoMapsService_isStrictMode(swigCPtr, this);
  }

/**
 * Sets the 'strict mode' flag.<br>
 * @param strictMode True if all errors result in exceptions. The default is false.
 */
  public void setStrictMode(boolean strictMode) {
    CartoMapsServiceModuleJNI.CartoMapsService_setStrictMode(swigCPtr, this, strictMode);
  }

/**
 * Returns the asset package used when decoding vector tiles.<br>
 * By default, no asset package is used and null is returned.<br>
 * @return The asset package used when decoding vector tiles.
 */
  public AssetPackage getVectorTileAssetPackage() {
  long cPtr = CartoMapsServiceModuleJNI.CartoMapsService_getVectorTileAssetPackage(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.utils.AssetPackage.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the asset package used when decoding vector tiles.<br>
 * Asset package with fonts is needed when texts are used.<br>
 * @param assetPackage The asset package to use for vector tiles.
 */
  public void setVectorTileAssetPackage(AssetPackage assetPackage) {
    CartoMapsServiceModuleJNI.CartoMapsService_setVectorTileAssetPackage(swigCPtr, this, AssetPackage.getCPtr(assetPackage), assetPackage);
  }

/**
 * Builds a list of layers given anonymous map configuration.<br>
 * The map configuration specification can be found in CartoDB documentation page.<br>
 * @param mapConfig The map configuration JSON deserialized as Variant type.<br>
 * @return The list of created layers.<br>
 * @throws java.lang.Exception If IO error occured during the operation.
 */
  public LayerVector buildMap(Variant mapConfig) throws java.io.IOException { return new LayerVector(CartoMapsServiceModuleJNI.CartoMapsService_buildMap(swigCPtr, this, Variant.getCPtr(mapConfig), mapConfig), true); }

/**
 * Builds a list of layers given named map id and named map parameters.<br>
 * @param templateId The named map id.<br>
 * @param templateParams The map containing named map parameter names and their values.<br>
 * @return The list of created layers.<br>
 * @throws java.lang.Exception If IO error occured during the operation.
 */
  public LayerVector buildNamedMap(String templateId, StringVariantMap templateParams) throws java.io.IOException { return new LayerVector(CartoMapsServiceModuleJNI.CartoMapsService_buildNamedMap(swigCPtr, this, templateId, StringVariantMap.getCPtr(templateParams), templateParams), true); }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return CartoMapsServiceModuleJNI.CartoMapsService_swigGetRawPtr(swigCPtr, this);
  }

}
