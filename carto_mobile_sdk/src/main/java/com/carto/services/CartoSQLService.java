/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.services;

import com.carto.core.Variant;
import com.carto.geometry.FeatureCollection;
import com.carto.projections.Projection;

/**
 * A high-level interface for Carto SQL Service.<br>
 * The service can be used to query data from Carto databases<br>
 * using explicit SQL queries.
 */
public class CartoSQLService {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public CartoSQLService(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(CartoSQLService obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CartoSQLServiceModuleJNI.delete_CartoSQLService(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof CartoSQLService) {
      return ((CartoSQLService)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs a new CartoSQLService service instance with default settings.
 */
  public CartoSQLService() {
    this(CartoSQLServiceModuleJNI.new_CartoSQLService(), true);
  }

/**
 * Returns the user account name used when accessing the online service.<br>
 * @return The user account name used when accessing the online service.
 */
  public String getUsername() {
    return CartoSQLServiceModuleJNI.CartoSQLService_getUsername(swigCPtr, this);
  }

/**
 * Sets the user account name used when accessing the online service.<br>
 * @param username The user account name used when accessing the online service.
 */
  public void setUsername(String username) {
    CartoSQLServiceModuleJNI.CartoSQLService_setUsername(swigCPtr, this, username);
  }

/**
 * Returns the API key used when accessing the online service.<br>
 * @return The API key used when accessing the online service.
 */
  public String getAPIKey() {
    return CartoSQLServiceModuleJNI.CartoSQLService_getAPIKey(swigCPtr, this);
  }

/**
 * Sets the optional API key used when accessing the online service.<br>
 * Usually this is not needed and can be left blank.<br>
 * @param apiKey The optional API key used when accessing the online service.
 */
  public void setAPIKey(String apiKey) {
    CartoSQLServiceModuleJNI.CartoSQLService_setAPIKey(swigCPtr, this, apiKey);
  }

/**
 * Returns the API endpoint template of the online service.<br>
 * @return The API endpoint template of the online service.
 */
  public String getAPITemplate() {
    return CartoSQLServiceModuleJNI.CartoSQLService_getAPITemplate(swigCPtr, this);
  }

/**
 * Sets the API endpoint template of the online service.<br>
 * By default cartodb.com endpoint is used. This needs to be redefined only for on-premise services.<br>
 * @param apiTemplate The API endpoint template of the online service. For example, "https://{user}.cartodb.com"
 */
  public void setAPITemplate(String apiTemplate) {
    CartoSQLServiceModuleJNI.CartoSQLService_setAPITemplate(swigCPtr, this, apiTemplate);
  }

/**
 * Connects to the online service and performs the specified query,<br>
 * The resulting JSON is deserialized into a Variant that is returned.<br>
 * @param sql The SQL query to use.<br>
 * @return The query result. If query fails, null variant is returned.<br>
 * @throws java.lang.Exception If IO error occured during the operation.
 */
  public Variant queryData(String sql) throws java.io.IOException { return new Variant(CartoSQLServiceModuleJNI.CartoSQLService_queryData(swigCPtr, this, sql), true); }

/**
 * Connects to the online service and performs the specified query.<br>
 * The resulting JSON is deserialized into a FeatureCollection that is returned.<br>
 * @param sql The SQL query to use.<br>
 * @param proj The projection to use for transforming feature coordinates. Can be null for WGS84 coordinates.<br>
 * @return The query result as feature collection. If query fails, null feature collection is returned.<br>
 * @throws java.lang.Exception If IO error occured during the operation.
 */
  public FeatureCollection queryFeatures(String sql, Projection proj) throws java.io.IOException {
  long cPtr = CartoSQLServiceModuleJNI.CartoSQLService_queryFeatures(swigCPtr, this, sql, Projection.getCPtr(proj), proj);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.geometry.FeatureCollection.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return CartoSQLServiceModuleJNI.CartoSQLService_swigGetRawPtr(swigCPtr, this);
  }

}
