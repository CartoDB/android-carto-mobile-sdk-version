/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.renderers;

import com.carto.core.MapPos;
import com.carto.core.MapBounds;
import com.carto.core.ScreenPos;
import com.carto.graphics.ViewState;
import com.carto.renderers.MapRendererListener;
import com.carto.renderers.RendererCaptureListener;
import com.carto.renderers.RedrawRequestListener;

/**
 * The map renderer component.
 */
public class MapRenderer {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public MapRenderer(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(MapRenderer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MapRendererModuleJNI.delete_MapRenderer(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof MapRenderer) {
      return ((MapRenderer)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Returns the map renderer listener. Can be null.<br>
 * @return The map renderer listener.
 */
  public MapRendererListener getMapRendererListener() {
  long cPtr = MapRendererModuleJNI.MapRenderer_getMapRendererListener(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.renderers.MapRendererListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the map renderer listener.<br>
 * @param listener The new map renderer listener. Can be null.
 */
  public void setMapRendererListener(MapRendererListener listener) {
    MapRendererModuleJNI.MapRenderer_setMapRendererListener(swigCPtr, this, MapRendererListener.getCPtr(listener), listener);
  }

/**
 * Returns the current view state.<br>
 * @return The current view state.
 */
  public ViewState getViewState() { return new ViewState(MapRendererModuleJNI.MapRenderer_getViewState(swigCPtr, this), true); }

/**
 * Requests the renderer to refresh the view.<br>
 * Note that there is normally no need to do this manually,<br>
 * SDK automatically redraws the view when needed.
 */
  public void requestRedraw() {
    MapRendererModuleJNI.MapRenderer_requestRedraw(swigCPtr, this);
  }

/**
 * Captures map rendering as a bitmap. This operation is asynchronous and the result is returned via listener callback.<br>
 * @param listener The listener interface that will receive the callback once rendering is available.<br>
 * @param waitWhileUpdating If true, delay the capture until all asynchronous processes are finished (for example, until all tiles are loaded).
 */
  public void captureRendering(RendererCaptureListener listener, boolean waitWhileUpdating) {
    MapRendererModuleJNI.MapRenderer_captureRendering(swigCPtr, this, RendererCaptureListener.getCPtr(listener), listener, waitWhileUpdating);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return MapRendererModuleJNI.MapRenderer_swigGetRawPtr(swigCPtr, this);
  }

}
