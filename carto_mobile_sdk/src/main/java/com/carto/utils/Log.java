/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.utils;

import com.carto.utils.LogEventListener;

/**
 * A diagnostic log for various SDK events.
 */
public class Log {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public Log(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(Log obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LogModuleJNI.delete_Log(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

/**
 * Returns the state of error logging.<br>
 * @return True if errors are shown in the log.
 */
  public static boolean isShowError() {
    return LogModuleJNI.Log_isShowError();
  }

/**
 * Enables or disables writing error messages to the log.<br>
 * @param showError If true, then error messages will be written to the log.
 */
  public static void setShowError(boolean showError) {
    LogModuleJNI.Log_setShowError(showError);
  }

/**
 * Returns the state of warning logging.<br>
 * @return True if warnings are shown in the log.
 */
  public static boolean isShowWarn() {
    return LogModuleJNI.Log_isShowWarn();
  }

/**
 * Enables or disables writing warning messages to the log.<br>
 * @param showWarn If true, then warning messages will be written to the log.
 */
  public static void setShowWarn(boolean showWarn) {
    LogModuleJNI.Log_setShowWarn(showWarn);
  }

/**
 * Returns the state of general info logging.<br>
 * @return True if general info is shown in the log.
 */
  public static boolean isShowInfo() {
    return LogModuleJNI.Log_isShowInfo();
  }

/**
 * Enables or disables writing info messages to the log.<br>
 * @param showInfo If true, then info messages will be written to the log.
 */
  public static void setShowInfo(boolean showInfo) {
    LogModuleJNI.Log_setShowInfo(showInfo);
  }

/**
 * Returns the state of internal debug message logging.<br>
 * @return True if debug messages are shown in the log.
 */
  public static boolean isShowDebug() {
    return LogModuleJNI.Log_isShowDebug();
  }

/**
 * Enables or disables writing internal debug messages to the log.<br>
 * @param showDebug If true, then debug messages will be written to the log.
 */
  public static void setShowDebug(boolean showDebug) {
    LogModuleJNI.Log_setShowDebug(showDebug);
  }

/**
 * Returns the tag for the log events.<br>
 * @return The current tag for the log events.
 */
  public static String getTag() {
    return LogModuleJNI.Log_getTag();
  }

/**
 * Sets the tag for the log events. The tag will be visible in the log and log messages can be filtered by the tag.<br>
 * @param tag The tag to use in the log events.
 */
  public static void setTag(String tag) {
    LogModuleJNI.Log_setTag(tag);
  }

/**
 * Returns the current log listener.<br>
 * @return The current log event listener.
 */
  public static LogEventListener getLogEventListener() {
  long cPtr = LogModuleJNI.Log_getLogEventListener();
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.utils.LogEventListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the log listener that can be used to intercept log messages.<br>
 * @param listener The log event listener.
 */
  public static void setLogEventListener(LogEventListener listener) {
    LogModuleJNI.Log_setLogEventListener(LogEventListener.getCPtr(listener), listener);
  }

/**
 * Logs specified fatal error message and terminates.<br>
 * @param message The message to log.
 */
  public static void fatal(String message) {
    LogModuleJNI.Log_fatal(message);
  }

/**
 * Logs specified error message (if error logging is enabled).<br>
 * @param message The message to log.
 */
  public static void error(String message) {
    LogModuleJNI.Log_error(message);
  }

/**
 * Logs specified warning message (if warning logging is enabled).<br>
 * @param message The message to log.
 */
  public static void warn(String message) {
    LogModuleJNI.Log_warn(message);
  }

/**
 * Logs specified info message (if info logging is enabled).<br>
 * @param message The message to log.
 */
  public static void info(String message) {
    LogModuleJNI.Log_info(message);
  }

/**
 * Logs specified debug message (if debug logging is enabled).<br>
 * @param message The message to log.
 */
  public static void debug(String message) {
    LogModuleJNI.Log_debug(message);
  }

}
