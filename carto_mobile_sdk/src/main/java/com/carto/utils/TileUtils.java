/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.utils;

import com.carto.core.MapPos;
import com.carto.core.MapBounds;
import com.carto.core.MapTile;
import com.carto.projections.Projection;

/**
 * A helper class for mapping coordinates to tiles and back.
 */
public class TileUtils {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public TileUtils(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(TileUtils obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TileUtilsModuleJNI.delete_TileUtils(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

/**
 * Calculates the map tile corresponding to specified point and zoom level.<br>
 * @param mapPos Coordinates for the point.<br>
 * @param zoom Zoom level for the tile.<br>
 * @param proj The projection to use for tile and point.<br>
 * @return The corresponding map tile.
 */
  public static MapTile calculateMapTile(MapPos mapPos, int zoom, Projection proj) { return new MapTile(TileUtilsModuleJNI.TileUtils_calculateMapTile(MapPos.getCPtr(mapPos), mapPos, zoom, Projection.getCPtr(proj), proj), true); }

/**
 * Calculates the map tile corresponding to specified point and zoom level. If the resulting tile is outside the valid range, it will be clipped.<br>
 * @param mapPos Coordinates for the point.<br>
 * @param zoom Zoom level for the tile.<br>
 * @param proj The projection to use for tile and point.<br>
 * @return The corresponding map tile.
 */
  public static MapTile calculateClippedMapTile(MapPos mapPos, int zoom, Projection proj) { return new MapTile(TileUtilsModuleJNI.TileUtils_calculateClippedMapTile(MapPos.getCPtr(mapPos), mapPos, zoom, Projection.getCPtr(proj), proj), true); }

/**
 * Calculates origin coordinates for the given map tile.<br>
 * @param mapTile The map tile to use.<br>
 * @param proj The projection to use for origin.<br>
 * @return The corresponding tile origin.
 */
  public static MapPos calculateMapTileOrigin(MapTile mapTile, Projection proj) { return new MapPos(TileUtilsModuleJNI.TileUtils_calculateMapTileOrigin(MapTile.getCPtr(mapTile), mapTile, Projection.getCPtr(proj), proj), true); }

/**
 * Calculates bounds for the given map tile.<br>
 * @param mapTile The map tile to use.<br>
 * @param proj The projection to use for bounds.<br>
 * @return The corresponding tile bounds.
 */
  public static MapBounds calculateMapTileBounds(MapTile mapTile, Projection proj) { return new MapBounds(TileUtilsModuleJNI.TileUtils_calculateMapTileBounds(MapTile.getCPtr(mapTile), mapTile, Projection.getCPtr(proj), proj), true); }

}
