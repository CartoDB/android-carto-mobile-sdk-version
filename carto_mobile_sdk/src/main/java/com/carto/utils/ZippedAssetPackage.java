/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.utils;

import com.carto.core.BinaryData;
import com.carto.core.StringVector;
import com.carto.utils.AssetPackage;

/**
 * An asset package based on ZIP archived.<br>
 * Only deflate-based ZIP archives are supported.
 */
@com.carto.utils.DontObfuscate public class ZippedAssetPackage extends AssetPackage {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public ZippedAssetPackage(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(ZippedAssetPackage obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ZippedAssetPackageModuleJNI.delete_ZippedAssetPackage(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.utils.ZippedAssetPackage swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.utils.ZippedAssetPackageModuleJNI.ZippedAssetPackage_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.utils.ZippedAssetPackage) director;
    }

    String objClassName = com.carto.utils.ZippedAssetPackageModuleJNI.ZippedAssetPackage_swigGetClassName(cPtr, null);
    com.carto.utils.ZippedAssetPackage objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.utils." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.utils.ZippedAssetPackage) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a ZIP asset package from the archived binary data.<br>
 * @param zipData The ZIP archive.
 */
  public ZippedAssetPackage(BinaryData zipData) {
    this(ZippedAssetPackageModuleJNI.new_ZippedAssetPackage__SWIG_0(BinaryData.getCPtr(zipData), zipData), true);
  }

/**
 * Constructs a ZIP asset package from the archived binary data and a fallback asset package.<br>
 * @param zipData The ZIP archive.<br>
 * @param baseAssetPackage The base asset package. If an asset is not found in the ZIP archive, base asset package is used.
 */
  public ZippedAssetPackage(BinaryData zipData, AssetPackage baseAssetPackage) {
    this(ZippedAssetPackageModuleJNI.new_ZippedAssetPackage__SWIG_1(BinaryData.getCPtr(zipData), zipData, AssetPackage.getCPtr(baseAssetPackage), baseAssetPackage), true);
  }

  public StringVector getLocalAssetNames() { return new StringVector(ZippedAssetPackageModuleJNI.ZippedAssetPackage_getLocalAssetNames(swigCPtr, this), true); }

  public StringVector getAssetNames() { return new StringVector(ZippedAssetPackageModuleJNI.ZippedAssetPackage_getAssetNames(swigCPtr, this), true); }

  public BinaryData loadAsset(String name) {
    long cPtr = ZippedAssetPackageModuleJNI.ZippedAssetPackage_loadAsset(swigCPtr, this, name);
    return (cPtr == 0) ? null : new BinaryData(cPtr, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return ZippedAssetPackageModuleJNI.ZippedAssetPackage_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return ZippedAssetPackageModuleJNI.ZippedAssetPackage_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return ZippedAssetPackageModuleJNI.ZippedAssetPackage_swigGetDirectorObject(swigCPtr, this);
  }

}
