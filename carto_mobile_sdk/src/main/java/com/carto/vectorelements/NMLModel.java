/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.vectorelements;

import com.carto.core.BinaryData;
import com.carto.core.MapBounds;
import com.carto.core.MapPos;
import com.carto.core.MapVec;
import com.carto.geometry.Geometry;
import com.carto.styles.NMLModelStyle;
import com.carto.vectorelements.Billboard;

/**
 * A 3D model that can be displayed on the map.<br>
 * <br>
 * NML models can be created from Collada files directly and placed anywhere on the map or converted from KMZ files.<br>
 * NML models are optimized for fast loading and rendering.
 */
@com.carto.utils.DontObfuscate public class NMLModel extends Billboard {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public NMLModel(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(NMLModel obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        NMLModelModuleJNI.delete_NMLModel(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.vectorelements.NMLModel swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.vectorelements.NMLModelModuleJNI.NMLModel_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.vectorelements.NMLModel) director;
    }

    String objClassName = com.carto.vectorelements.NMLModelModuleJNI.NMLModel_swigGetClassName(cPtr, null);
    com.carto.vectorelements.NMLModel objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.vectorelements." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.vectorelements.NMLModel) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a NMLModel object with the specified style and attaches it to a billboard element.<br>
 * @param baseBillboard The billboard this model will be attached to.<br>
 * @param style The style for this model.
 */
  public NMLModel(Billboard baseBillboard, NMLModelStyle style) {
    this(NMLModelModuleJNI.new_NMLModel__SWIG_0(Billboard.getCPtr(baseBillboard), baseBillboard, NMLModelStyle.getCPtr(style), style), true);
  }

/**
 * Constructs a NMLModel object from a geometry object and a source model.<br>
 * @param geometry The geometry object that defines the location of this model.<br>
 * @param style The style for this model.
 */
  public NMLModel(Geometry geometry, NMLModelStyle style) {
    this(NMLModelModuleJNI.new_NMLModel__SWIG_1(Geometry.getCPtr(geometry), geometry, NMLModelStyle.getCPtr(style), style), true);
  }

/**
 * Constructs a NMLModel object from a map position and a source model.<br>
 * @param pos The map position that defines the location of this model.<br>
 * @param style The style for this model.
 */
  public NMLModel(MapPos pos, NMLModelStyle style) {
    this(NMLModelModuleJNI.new_NMLModel__SWIG_2(MapPos.getCPtr(pos), pos, NMLModelStyle.getCPtr(style), style), true);
  }

/**
 * Returns the rotation angle of this model. This is deprecated. Use getRotation instead.<br>
 * @return The rotation angle of this model in degrees.<br>
 * @deprecated 
 */
  public float getRotationAngle() {
    return NMLModelModuleJNI.NMLModel_getRotationAngle(swigCPtr, this);
  }

/**
 * Sets the rotation angle of this model. This is deprecated. Use setRotation instead.<br>
 * @param angle The new rotation angle in degrees.<br>
 * @deprecated 
 */
  public void setRotationAngle(float angle) {
    NMLModelModuleJNI.NMLModel_setRotationAngle(swigCPtr, this, angle);
  }

/**
 * Returns the rotation axis of this model. If rotation angle is 0, then the axis is irrelevant.<br>
 * @return The rotation axis vector.
 */
  public MapVec getRotationAxis() { return new MapVec(NMLModelModuleJNI.NMLModel_getRotationAxis(swigCPtr, this), true); }

/**
 * Sets the rotation axis of this model.<br>
 * @param axis The new axis of rotation.
 */
  public void setRotationAxis(MapVec axis) {
    NMLModelModuleJNI.NMLModel_setRotationAxis(swigCPtr, this, MapVec.getCPtr(axis), axis);
  }

/**
 * Sets the rotation of this model using an axis and an angle.<br>
 * @param axis The axis of rotation.<br>
 * @param angle The rotation angle in degrees.
 */
  public void setRotation(MapVec axis, float angle) {
    NMLModelModuleJNI.NMLModel_setRotation(swigCPtr, this, MapVec.getCPtr(axis), axis, angle);
  }

/**
 * Returns the scale of this model.<br>
 * @return model The relative scale.
 */
  public float getScale() {
    return NMLModelModuleJNI.NMLModel_getScale(swigCPtr, this);
  }

/**
 * Sets the scale of this model. The default is 1.<br>
 * @param scale The relative scale of this model.
 */
  public void setScale(float scale) {
    NMLModelModuleJNI.NMLModel_setScale(swigCPtr, this, scale);
  }

/**
 * Returns the style of this object.<br>
 * @return The style that defines what this object looks like.
 */
  public NMLModelStyle getStyle() {
  long cPtr = NMLModelModuleJNI.NMLModel_getStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.NMLModelStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets a style for this object.<br>
 * @param style The new style that defines what this object looks like.
 */
  public void setStyle(NMLModelStyle style) {
    NMLModelModuleJNI.NMLModel_setStyle(swigCPtr, this, NMLModelStyle.getCPtr(style), style);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return NMLModelModuleJNI.NMLModel_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return NMLModelModuleJNI.NMLModel_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return NMLModelModuleJNI.NMLModel_swigGetDirectorObject(swigCPtr, this);
  }

}
