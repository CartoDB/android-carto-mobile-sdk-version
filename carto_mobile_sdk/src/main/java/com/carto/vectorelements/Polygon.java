/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.vectorelements;

import com.carto.core.MapPosVector;
import com.carto.core.MapPosVectorVector;
import com.carto.geometry.PolygonGeometry;
import com.carto.styles.PolygonStyle;
import com.carto.vectorelements.VectorElement;

/**
 * A geometric polygon that can be displayed on the map.<br>
 * Polygons can be concave and have multiple overlapping holes.
 */
@com.carto.utils.DontObfuscate public class Polygon extends VectorElement {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public Polygon(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(Polygon obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        PolygonModuleJNI.delete_Polygon(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.vectorelements.Polygon swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.vectorelements.PolygonModuleJNI.Polygon_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.vectorelements.Polygon) director;
    }

    String objClassName = com.carto.vectorelements.PolygonModuleJNI.Polygon_swigGetClassName(cPtr, null);
    com.carto.vectorelements.Polygon objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.vectorelements." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.vectorelements.Polygon) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a Polygon object from a geometry object and a style.<br>
 * @param geometry The geometry object that defines the location and holes of this polygon.<br>
 * @param style The style that defines what this polygon looks like.
 */
  public Polygon(PolygonGeometry geometry, PolygonStyle style) {
    this(PolygonModuleJNI.new_Polygon__SWIG_0(PolygonGeometry.getCPtr(geometry), geometry, PolygonStyle.getCPtr(style), style), true);
  }

/**
 * Constructs a Polygon object from a vector of map positions and a style.<br>
 * @param poses The vector of map positions that defines the location of this polygon.<br>
 * @param style The style that defines what this polygon looks like.
 */
  public Polygon(MapPosVector poses, PolygonStyle style) {
    this(PolygonModuleJNI.new_Polygon__SWIG_1(MapPosVector.getCPtr(poses), poses, PolygonStyle.getCPtr(style), style), true);
  }

/**
 * Constructs a Polygon object from a vector of map positions, a vector of holes and a style.<br>
 * @param poses The vector of map positions that defines the location of this polygon.<br>
 * @param holes The vector of holes that defines the locations of holes of this polygon.<br>
 * @param style The style that defines what this polygon looks like.
 */
  public Polygon(MapPosVector poses, MapPosVectorVector holes, PolygonStyle style) {
    this(PolygonModuleJNI.new_Polygon__SWIG_2(MapPosVector.getCPtr(poses), poses, MapPosVectorVector.getCPtr(holes), holes, PolygonStyle.getCPtr(style), style), true);
  }

  public PolygonGeometry getGeometry() {
  long cPtr = PolygonModuleJNI.Polygon_getGeometry(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.geometry.PolygonGeometry.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the location for this polygon.<br>
 * @param geometry The new geometry object that defines the location and holes of this polygon.
 */
  public void setGeometry(PolygonGeometry geometry) {
    PolygonModuleJNI.Polygon_setGeometry(swigCPtr, this, PolygonGeometry.getCPtr(geometry), geometry);
  }

/**
 * Returns the vertices that define this polygon.<br>
 * @return The vector of map positions that define this polygon.
 */
  public MapPosVector getPoses() { return new MapPosVector(PolygonModuleJNI.Polygon_getPoses(swigCPtr, this), true); }

/**
 * Sets the vertices that define this polygon.<br>
 * Note: holes are not affected by this call.<br>
 * @param poses The new vector of map positions that define this polygon.
 */
  public void setPoses(MapPosVector poses) {
    PolygonModuleJNI.Polygon_setPoses(swigCPtr, this, MapPosVector.getCPtr(poses), poses);
  }

/**
 * Returns the holes of the polygon.<br>
 * @return The list of holes of the polygon.
 */
  public MapPosVectorVector getHoles() { return new MapPosVectorVector(PolygonModuleJNI.Polygon_getHoles(swigCPtr, this), true); }

/**
 * Sets the holes of the polygon.<br>
 * @param holes The list of holes of the polygon.
 */
  public void setHoles(MapPosVectorVector holes) {
    PolygonModuleJNI.Polygon_setHoles(swigCPtr, this, MapPosVectorVector.getCPtr(holes), holes);
  }

/**
 * Returns the style of this polygon.<br>
 * @return The style that defines what this polygon looks like.
 */
  public PolygonStyle getStyle() {
  long cPtr = PolygonModuleJNI.Polygon_getStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.PolygonStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the style for this polygon.<br>
 * @param style The new style that defines what this polygon looks like.
 */
  public void setStyle(PolygonStyle style) {
    PolygonModuleJNI.Polygon_setStyle(swigCPtr, this, PolygonStyle.getCPtr(style), style);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return PolygonModuleJNI.Polygon_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return PolygonModuleJNI.Polygon_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return PolygonModuleJNI.Polygon_swigGetDirectorObject(swigCPtr, this);
  }

}
