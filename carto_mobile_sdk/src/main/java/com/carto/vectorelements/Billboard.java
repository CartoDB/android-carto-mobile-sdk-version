/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.vectorelements;

import com.carto.core.MapBounds;
import com.carto.core.MapPos;
import com.carto.geometry.Geometry;
import com.carto.styles.BillboardStyle;
import com.carto.vectorelements.VectorElement;

/**
 * A base class for billboard elements that can be displayed on the map.<br>
 * Billboards can either be given a concrete position on the map or be attached to<br>
 * other billboards.
 */
@com.carto.utils.DontObfuscate public class Billboard extends VectorElement {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public Billboard(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(Billboard obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BillboardModuleJNI.delete_Billboard(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.vectorelements.Billboard swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.vectorelements.BillboardModuleJNI.Billboard_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.vectorelements.Billboard) director;
    }

    String objClassName = com.carto.vectorelements.BillboardModuleJNI.Billboard_swigGetClassName(cPtr, null);
    com.carto.vectorelements.Billboard objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.vectorelements." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.vectorelements.Billboard) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Returns the base billboard this billboard is attached to.<br>
 * @return The base billboard this billboard is attached to. Null if not attached to a billboard.
 */
  public Billboard getBaseBillboard() {
  long cPtr = BillboardModuleJNI.Billboard_getBaseBillboard(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.vectorelements.Billboard.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Attaches this billboard to another billboard, so it will always be drawn relative to the base billboard.<br>
 * If this billboard has a geometry object assigned to it, it will first be set to null.<br>
 * @param baseBillboard The billboard this billboard will be attached to.
 */
  public void setBaseBillboard(Billboard baseBillboard) {
    BillboardModuleJNI.Billboard_setBaseBillboard(swigCPtr, this, Billboard.getCPtr(baseBillboard), baseBillboard);
  }

/**
 * Returns the bounds of this billboard or the base billboard, if there is one.<br>
 * @return The bounds of this billboard.
 */
  public MapBounds getBounds() { return new MapBounds(BillboardModuleJNI.Billboard_getBounds(swigCPtr, this), true); }

/**
 * Returns the location of the root billboard. If this billboard has a location,<br>
 * this method is equavalent to the Billboard::getGeometry method. If this billboard is attached <br>
 * to another billboard, the hierarchy is traveled recursively and the location of the root <br>
 * billboard is returned. <br>
 * @return The geometry object that defines the location of the root billboard. Null if there's no root billboard.
 */
  public Geometry getRootGeometry() {
  long cPtr = BillboardModuleJNI.Billboard_getRootGeometry(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.geometry.Geometry.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the geometry object that defines the location of this billboard.<br>
 * @return The geometry object of this billboard.
 */
  public Geometry getGeometry() {
  long cPtr = BillboardModuleJNI.Billboard_getGeometry(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.geometry.Geometry.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the location for this billboard. If this billboard is attached<br>
 * to another billboard, it will first be detached.<br>
 * @param geometry The new geometry object that defines the location of this billboard.
 */
  public void setGeometry(Geometry geometry) {
    BillboardModuleJNI.Billboard_setGeometry(swigCPtr, this, Geometry.getCPtr(geometry), geometry);
  }

/**
 * Sets the location for this billboard. If this billboard is attached<br>
 * to another billboard, it will first be detached.<br>
 * @param pos The new map position that defines the location of this billboard.
 */
  public void setPos(MapPos pos) {
    BillboardModuleJNI.Billboard_setPos(swigCPtr, this, MapPos.getCPtr(pos), pos);
  }

/**
 * Returns the rotation angle of this billboard.<br>
 * @return The rotation angle of this billboard in degrees.
 */
  public float getRotation() {
    return BillboardModuleJNI.Billboard_getRotation(swigCPtr, this);
  }

/**
 * Sets the rotation angle of this billboard. The rotation angle is ignored if orientation mode is<br>
 * set to BillboardOrientation::FACE_CAMERA_BILLBOARD. If the orientation mode is set to <br>
 * BillboardOrientation::FACE_CAMERA_GROUND then the rotation angle is added to the calculated billboard <br>
 * angle. If the orientation mode is set to BillboardOrientation::GROUND then the rotation means absolute<br>
 * rotation, where 0 is points to the north.<br>
 * @param rotation The new rotation angle of this billboard in degrees.
 */
  public void setRotation(float rotation) {
    BillboardModuleJNI.Billboard_setRotation(swigCPtr, this, rotation);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return BillboardModuleJNI.Billboard_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return BillboardModuleJNI.Billboard_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return BillboardModuleJNI.Billboard_swigGetDirectorObject(swigCPtr, this);
  }

}
