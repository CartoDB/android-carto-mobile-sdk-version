/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.vectorelements;

import com.carto.core.MapPos;
import com.carto.graphics.Bitmap;
import com.carto.geometry.Geometry;
import com.carto.styles.TextStyle;
import com.carto.vectorelements.Label;

/**
 * A text element that can be displayed on the map.
 */
@com.carto.utils.DontObfuscate public class Text extends Label {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public Text(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(Text obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TextModuleJNI.delete_Text(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.vectorelements.Text swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.vectorelements.TextModuleJNI.Text_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.vectorelements.Text) director;
    }

    String objClassName = com.carto.vectorelements.TextModuleJNI.Text_swigGetClassName(cPtr, null);
    com.carto.vectorelements.Text objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.vectorelements." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.vectorelements.Text) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a Text object with the specified style and attaches it to a billboard element.<br>
 * @param baseBillboard The billboard this text label will be attached to.<br>
 * @param style The style that defines what this text label looks like.<br>
 * @param text The text to be displayed.
 */
  public Text(Billboard baseBillboard, TextStyle style, String text) {
    this(TextModuleJNI.new_Text__SWIG_0(Billboard.getCPtr(baseBillboard), baseBillboard, TextStyle.getCPtr(style), style, text), true);
  }

/**
 * Constructs a Text object from a geometry object and a style.<br>
 * @param geometry The geometry object that defines the location of this text label.<br>
 * @param style The style that defines what this text label looks like.<br>
 * @param text The text to be displayed.
 */
  public Text(Geometry geometry, TextStyle style, String text) {
    this(TextModuleJNI.new_Text__SWIG_1(Geometry.getCPtr(geometry), geometry, TextStyle.getCPtr(style), style, text), true);
  }

/**
 * Constructs a Text object from a map position and a style.<br>
 * @param pos The map position that defines the location of this text label.<br>
 * @param style The style that defines what this text label looks like.<br>
 * @param text The text to be displayed.
 */
  public Text(MapPos pos, TextStyle style, String text) {
    this(TextModuleJNI.new_Text__SWIG_2(MapPos.getCPtr(pos), pos, TextStyle.getCPtr(style), style, text), true);
  }

  public Bitmap drawBitmap(float dpToPX) {
    long cPtr = TextModuleJNI.Text_drawBitmap(swigCPtr, this, dpToPX);
    return (cPtr == 0) ? null : new Bitmap(cPtr, true);
  }

/**
 * Returns the display text.<br>
 * @return The display text.
 */
  public String getText() {
    return TextModuleJNI.Text_getText(swigCPtr, this);
  }

/**
 * Sets the display text.<br>
 * @param text The text to be displayed.
 */
  public void setText(String text) {
    TextModuleJNI.Text_setText(swigCPtr, this, text);
  }

/**
 * Returns the style of this text label.<br>
 * @return The style that defines what this text label looks like.
 */
  public TextStyle getStyle() {
  long cPtr = TextModuleJNI.Text_getStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.TextStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the style for this text label.<br>
 * @param style The new style that defines what this text label looks like.
 */
  public void setStyle(TextStyle style) {
    TextModuleJNI.Text_setStyle(swigCPtr, this, TextStyle.getCPtr(style), style);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return TextModuleJNI.Text_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return TextModuleJNI.Text_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return TextModuleJNI.Text_swigGetDirectorObject(swigCPtr, this);
  }

}
