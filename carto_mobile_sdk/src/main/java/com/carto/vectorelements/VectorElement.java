/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.vectorelements;

import com.carto.core.MapBounds;
import com.carto.core.Variant;
import com.carto.core.StringVariantMap;
import com.carto.geometry.Geometry;

/**
 * A base class for all vector elements (points, lines, texts, models, etc).
 */
@com.carto.utils.DontObfuscate public class VectorElement {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public VectorElement(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(VectorElement obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        VectorElementModuleJNI.delete_VectorElement(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.vectorelements.VectorElement swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.vectorelements.VectorElementModuleJNI.VectorElement_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.vectorelements.VectorElement) director;
    }

    String objClassName = com.carto.vectorelements.VectorElementModuleJNI.VectorElement_swigGetClassName(cPtr, null);
    com.carto.vectorelements.VectorElement objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.vectorelements." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.vectorelements.VectorElement) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof VectorElement) {
      return ((VectorElement)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Returns the bounds of this vector element.<br>
 * @return The bounds of this vector element.
 */
  public MapBounds getBounds() { return new MapBounds(VectorElementModuleJNI.VectorElement_getBounds(swigCPtr, this), true); }

/**
 * Returns the geometry object that defines the location of this vector element.<br>
 * @return The geometry object of this vector element.
 */
  public Geometry getGeometry() {
  long cPtr = VectorElementModuleJNI.VectorElement_getGeometry(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.geometry.Geometry.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the internal id of this vector element.<br>
 * @return The internal id of this vector element.
 */
  public long getId() {
    return VectorElementModuleJNI.VectorElement_getId(swigCPtr, this);
  }

/**
 * Sets the internal id for this vector element. The id is used for internal caching, and<br>
 * should not be changed by the user. User id can added to meta data as a key-value pair.<br>
 * @param id The new internal id for this vector element.
 */
  public void setId(long id) {
    VectorElementModuleJNI.VectorElement_setId(swigCPtr, this, id);
  }

/**
 * Returns a copy of the vector element meta data map. The changes you make to this map are NOT reflected in the actual meta data of the element.<br>
 * @return A copy of the vector element meta data map.
 */
  public StringVariantMap getMetaData() { return new StringVariantMap(VectorElementModuleJNI.VectorElement_getMetaData(swigCPtr, this), true); }

/**
 * Sets a new meta data map for the vector element. Old meta data values will be lost.<br>
 * @param metaData The new meta data map for this vector element.
 */
  public void setMetaData(StringVariantMap metaData) {
    VectorElementModuleJNI.VectorElement_setMetaData(swigCPtr, this, StringVariantMap.getCPtr(metaData), metaData);
  }

/**
 * Returns true if the specified key exists in the vector element meta data map.<br>
 * @param key The key to check.<br>
 * @return True if the vector element meta data element exists.
 */
  public boolean containsMetaDataKey(String key) {
    return VectorElementModuleJNI.VectorElement_containsMetaDataKey(swigCPtr, this, key);
  }

/**
 * Returns a meta data element corresponding to the key. If no value is found null variant is returned.<br>
 * @param key The key to use.<br>
 * @return The value corresponding to the key from the meta data map. If the key does not exists, empty variant is returned.
 */
  public Variant getMetaDataElement(String key) { return new Variant(VectorElementModuleJNI.VectorElement_getMetaDataElement(swigCPtr, this, key), true); }

/**
 * Adds a new key-value pair to the meta data map. If the key already exists in the map,<br>
 * it's value will be replaced by the new value.<br>
 * @param key The new key.<br>
 * @param element The new value.
 */
  public void setMetaDataElement(String key, Variant element) {
    VectorElementModuleJNI.VectorElement_setMetaDataElement(swigCPtr, this, key, Variant.getCPtr(element), element);
  }

/**
 * Returns the state of the visibility flag of this vector element.<br>
 * @return True if this vector element is visible.
 */
  public boolean isVisible() {
    return VectorElementModuleJNI.VectorElement_isVisible(swigCPtr, this);
  }

/**
 * Sets the state of the visibility flag for this vector element. If set to false the element will not be<br>
 * drawn.<br>
 * @param visible The new state of the visibility flag for the vector element.
 */
  public void setVisible(boolean visible) {
    VectorElementModuleJNI.VectorElement_setVisible(swigCPtr, this, visible);
  }

/**
 * Notifies this vector element's datasource about the change in this element.<br>
 * The data source may then notify the layer to update the view.
 */
  public void notifyElementChanged() {
    VectorElementModuleJNI.VectorElement_notifyElementChanged(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return VectorElementModuleJNI.VectorElement_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return VectorElementModuleJNI.VectorElement_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return VectorElementModuleJNI.VectorElement_swigGetDirectorObject(swigCPtr, this);
  }

}
