/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.vectorelements;

import com.carto.core.MapPos;
import com.carto.core.ScreenPos;
import com.carto.graphics.Bitmap;
import com.carto.geometry.Geometry;
import com.carto.styles.BalloonPopupStyle;
import com.carto.ui.ClickInfo;
import com.carto.vectorelements.BalloonPopupButton;
import com.carto.vectorelements.BalloonPopupEventListener;
import com.carto.vectorelements.Popup;
import com.carto.ui.ClickType;

/**
 * A highly configurable popup implementation that allows the user to specify a title, description, colors, images, font sizes etc.
 */
@com.carto.utils.DontObfuscate public class BalloonPopup extends Popup {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public BalloonPopup(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(BalloonPopup obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BalloonPopupModuleJNI.delete_BalloonPopup(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.vectorelements.BalloonPopup swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.vectorelements.BalloonPopupModuleJNI.BalloonPopup_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.vectorelements.BalloonPopup) director;
    }

    String objClassName = com.carto.vectorelements.BalloonPopupModuleJNI.BalloonPopup_swigGetClassName(cPtr, null);
    com.carto.vectorelements.BalloonPopup objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.vectorelements." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.vectorelements.BalloonPopup) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a BalloonPopup object with the specified style and attaches it to a billboard element.<br>
 * If an empty string is passed for the title, it will not be drawn. The same applies to the description.<br>
 * @param baseBillboard The billboard this balloon popup will be attached to.<br>
 * @param style The style that defines what this balloon popup looks like.<br>
 * @param title The text this balloon popup will display.<br>
 * @param desc The description this balloon popup will display.
 */
  public BalloonPopup(Billboard baseBillboard, BalloonPopupStyle style, String title, String desc) {
    this(BalloonPopupModuleJNI.new_BalloonPopup__SWIG_0(Billboard.getCPtr(baseBillboard), baseBillboard, BalloonPopupStyle.getCPtr(style), style, title, desc), true);
  }

/**
 * Constructs a BalloonPopup object from a geometry object and a style.<br>
 * If an empty string is passed for the title, it will not be drawn. The same applies to the description.<br>
 * @param geometry The geometry object that defines the location of this balloon popup.<br>
 * @param style The style that defines what this balloon popup looks like.<br>
 * @param title The text this balloon popup will display.<br>
 * @param desc The description this balloon popup will display.
 */
  public BalloonPopup(Geometry geometry, BalloonPopupStyle style, String title, String desc) {
    this(BalloonPopupModuleJNI.new_BalloonPopup__SWIG_1(Geometry.getCPtr(geometry), geometry, BalloonPopupStyle.getCPtr(style), style, title, desc), true);
  }

/**
 * Constructs a BalloonPopup object from a map position and a style.<br>
 * If an empty string is passed for the title, it will not be drawn. The same applies to the description.<br>
 * @param pos The map position that defines the location of this balloon popup.<br>
 * @param style The style that defines what this balloon popup looks like.<br>
 * @param title The text this balloon popup will display.<br>
 * @param desc The description this balloon popup will display.
 */
  public BalloonPopup(MapPos pos, BalloonPopupStyle style, String title, String desc) {
    this(BalloonPopupModuleJNI.new_BalloonPopup__SWIG_2(MapPos.getCPtr(pos), pos, BalloonPopupStyle.getCPtr(style), style, title, desc), true);
  }

/**
 * Returns the title of this balloon popup.<br>
 * @return The title of this balloon popup.
 */
  public String getTitle() {
    return BalloonPopupModuleJNI.BalloonPopup_getTitle(swigCPtr, this);
  }

/**
 * Sets the title this balloon popup will display. If an empty string is passed<br>
 * the title will not be drawn.<br>
 * @param title The new title this balloon popup will display.
 */
  public void setTitle(String title) {
    BalloonPopupModuleJNI.BalloonPopup_setTitle(swigCPtr, this, title);
  }

/**
 * Returns the description of this balloon popup.<br>
 * @return The description of this balloon popup.
 */
  public String getDescription() {
    return BalloonPopupModuleJNI.BalloonPopup_getDescription(swigCPtr, this);
  }

/**
 * Sets the description this balloon popup will display. If an empty string is passed<br>
 * the description will not be drawn.<br>
 * @param desc The new description this balloon popup will display.
 */
  public void setDescription(String desc) {
    BalloonPopupModuleJNI.BalloonPopup_setDescription(swigCPtr, this, desc);
  }

/**
 * Returns the style of this balloon popup.<br>
 * @return The style that defines what this balloon popup looks like.
 */
  public BalloonPopupStyle getStyle() {
  long cPtr = BalloonPopupModuleJNI.BalloonPopup_getStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.BalloonPopupStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the style for this balloon popup.<br>
 * @param style The new style that defines what this balloon popup looks like.
 */
  public void setStyle(BalloonPopupStyle style) {
    BalloonPopupModuleJNI.BalloonPopup_setStyle(swigCPtr, this, BalloonPopupStyle.getCPtr(style), style);
  }

/**
 * Removes all buttons from the balloon popup.
 */
  public void clearButtons() {
    BalloonPopupModuleJNI.BalloonPopup_clearButtons(swigCPtr, this);
  }

/**
 * Adds a new button to the balloon popup.<br>
 * If the button is already added, the call is ignored.<br>
 * @param button The button object to add. 
 */
  public void addButton(BalloonPopupButton button) {
    BalloonPopupModuleJNI.BalloonPopup_addButton(swigCPtr, this, BalloonPopupButton.getCPtr(button), button);
  }

/**
 * Replaces an old baloon popup button with a new button.<br>
 * @param oldButton The old button to replace.<br>
 * @param newButton The new button.
 */
  public void replaceButton(BalloonPopupButton oldButton, BalloonPopupButton newButton) {
    BalloonPopupModuleJNI.BalloonPopup_replaceButton(swigCPtr, this, BalloonPopupButton.getCPtr(oldButton), oldButton, BalloonPopupButton.getCPtr(newButton), newButton);
  }

/**
 * Removes a button from the balloon popup.<br>
 * If the button is not present, the call is ignored.<br>
 * @param button The button object to remove.
 */
  public void removeButton(BalloonPopupButton button) {
    BalloonPopupModuleJNI.BalloonPopup_removeButton(swigCPtr, this, BalloonPopupButton.getCPtr(button), button);
  }

/**
 * Returns the balloon popup event listener.<br>
 * @return The balloon popup event listener.
 */
  public BalloonPopupEventListener getBalloonPopupEventListener() {
  long cPtr = BalloonPopupModuleJNI.BalloonPopup_getBalloonPopupEventListener(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.vectorelements.BalloonPopupEventListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the balloon popup event listener.<br>
 * @param eventListener The balloon popup event listener.
 */
  public void setBalloonPopupEventListener(BalloonPopupEventListener eventListener) {
    BalloonPopupModuleJNI.BalloonPopup_setBalloonPopupEventListener(swigCPtr, this, BalloonPopupEventListener.getCPtr(eventListener), eventListener);
  }

  public boolean processClick(ClickInfo clickInfo, MapPos clickPos, ScreenPos elementClickPos) {
    return BalloonPopupModuleJNI.BalloonPopup_processClick(swigCPtr, this, ClickInfo.getCPtr(clickInfo), clickInfo, MapPos.getCPtr(clickPos), clickPos, ScreenPos.getCPtr(elementClickPos), elementClickPos);
  }

  public Bitmap drawBitmap(ScreenPos anchorScreenPos, float screenWidth, float screenHeight, float dpToPX) {
    long cPtr = BalloonPopupModuleJNI.BalloonPopup_drawBitmap(swigCPtr, this, ScreenPos.getCPtr(anchorScreenPos), anchorScreenPos, screenWidth, screenHeight, dpToPX);
    return (cPtr == 0) ? null : new Bitmap(cPtr, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return BalloonPopupModuleJNI.BalloonPopup_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return BalloonPopupModuleJNI.BalloonPopup_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return BalloonPopupModuleJNI.BalloonPopup_swigGetDirectorObject(swigCPtr, this);
  }

}
