/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.vectorelements;

import com.carto.core.MapPos;
import com.carto.core.ScreenPos;
import com.carto.graphics.Bitmap;
import com.carto.geometry.Geometry;
import com.carto.geometry.PointGeometry;
import com.carto.styles.PopupStyle;
import com.carto.ui.ClickInfo;
import com.carto.vectorelements.Billboard;
import com.carto.ui.ClickType;

/**
 * An abstract billboard element that can be displayed on the map. It<br>
 * always faces the camera and has a dynamically drawn bitmap.
 */
@com.carto.utils.DontObfuscate public class Popup extends Billboard {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public Popup(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(Popup obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        PopupModuleJNI.delete_Popup(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.vectorelements.Popup swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.vectorelements.PopupModuleJNI.Popup_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.vectorelements.Popup) director;
    }

    String objClassName = com.carto.vectorelements.PopupModuleJNI.Popup_swigGetClassName(cPtr, null);
    com.carto.vectorelements.Popup objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.vectorelements." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.vectorelements.Popup) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Returns the horizontal anchor point of this popup.<br>
 * @return The horizontal anchor point of this popup.
 */
  public float getAnchorPointX() {
    return PopupModuleJNI.Popup_getAnchorPointX(swigCPtr, this);
  }

/**
 * Sets the horizontal anchor point for the popup. It should only be called from<br>
 * Popup::drawBitmap method, to match the anchor point to the drawn bitmap. <br>
 * @param anchorPointX The new horizontal anchor point for the popup. -1 means the left side,<br>
 * 0 the center and 1 the right side of the popup. The default is 0.
 */
  public void setAnchorPointX(float anchorPointX) {
    PopupModuleJNI.Popup_setAnchorPointX(swigCPtr, this, anchorPointX);
  }

/**
 * Returns the vertical anchor point of this popup.<br>
 * @return The vertical anchor point of this popup.
 */
  public float getAnchorPointY() {
    return PopupModuleJNI.Popup_getAnchorPointY(swigCPtr, this);
  }

/**
 * Sets the vertical anchor point for the popup. It should only be called from<br>
 * Popup::drawBitmap method, to match the anchor point to the drawn bitmap. <br>
 * @param anchorPointY The vertical anchor point for the popup. -1 means the bottom,<br>
 * 0 the center and 1 the top of the popup. The default is -1.
 */
  public void setAnchorPointY(float anchorPointY) {
    PopupModuleJNI.Popup_setAnchorPointY(swigCPtr, this, anchorPointY);
  }

/**
 * Sets the anchor point for the popup. It should only be called from<br>
 * Popup::drawBitmap method, to match the anchor point to the drawn bitmap. <br>
 * Values will be clamped to [-1, 1] range.<br>
 * @param anchorPointX The new horizontal anchor point for the popup. -1 means the left side,<br>
 * 0 the center and 1 the right side of the popup. The default is 0.<br>
 * @param anchorPointY The vertical anchor point for the popup. -1 means the bottom,<br>
 * 0 the center and 1 the top of the popup. The default is -1.
 */
  public void setAnchorPoint(float anchorPointX, float anchorPointY) {
    PopupModuleJNI.Popup_setAnchorPoint(swigCPtr, this, anchorPointX, anchorPointY);
  }

/**
 * Returns the style of this Popup.<br>
 * @return The style that defines what this Popup looks like.
 */
  public PopupStyle getStyle() {
  long cPtr = PopupModuleJNI.Popup_getStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.PopupStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the style for this Popup.<br>
 * @param style The new style that defines what this popup looks like.
 */
  public void setStyle(PopupStyle style) {
    PopupModuleJNI.Popup_setStyle(swigCPtr, this, PopupStyle.getCPtr(style), style);
  }

/**
 * Handles the click events for this Popup.<br>
 * @param clickInfo The click attributes.<br>
 * @param clickPos The position of the click.<br>
 * @param elementClickPos The 2D position of the click on the popup.<br>
 * @return True if the click was handled. False otherwise.
 */
  public boolean processClick(ClickInfo clickInfo, MapPos clickPos, ScreenPos elementClickPos) {
    return PopupModuleJNI.Popup_processClick(swigCPtr, this, ClickInfo.getCPtr(clickInfo), clickInfo, MapPos.getCPtr(clickPos), clickPos, ScreenPos.getCPtr(elementClickPos), elementClickPos);
  }

/**
 * Draws a custom bitmap for this Popup that will be used for drawing the Popup on the map.<br>
 * The method is called each time the Popup gets reloaded internally.<br>
 * @param anchorScreenPos The screen position of the anchor point of this popup in pixels.<br>
 * @param screenWidth The current screen width in pixels.<br>
 * @param screenHeight The current screen height in pixels.<br>
 * @param dpToPX The value used for converting display independent pixels (dp) to pixels (px).<br>
 * @return The custom Popup bitmap.
 */
  public Bitmap drawBitmap(ScreenPos anchorScreenPos, float screenWidth, float screenHeight, float dpToPX) {
    long cPtr = PopupModuleJNI.Popup_drawBitmap(swigCPtr, this, ScreenPos.getCPtr(anchorScreenPos), anchorScreenPos, screenWidth, screenHeight, dpToPX);
    return (cPtr == 0) ? null : new Bitmap(cPtr, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return PopupModuleJNI.Popup_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return PopupModuleJNI.Popup_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return PopupModuleJNI.Popup_swigGetDirectorObject(swigCPtr, this);
  }

}
