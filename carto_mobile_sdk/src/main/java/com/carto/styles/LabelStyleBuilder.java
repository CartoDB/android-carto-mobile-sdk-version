/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

import com.carto.styles.BillboardStyleBuilder;
import com.carto.styles.LabelStyle;

/**
 * A builder class for LabelStyle.
 */
@com.carto.utils.DontObfuscate public class LabelStyleBuilder extends BillboardStyleBuilder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public LabelStyleBuilder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(LabelStyleBuilder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LabelStyleBuilderModuleJNI.delete_LabelStyleBuilder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.styles.LabelStyleBuilder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.styles.LabelStyleBuilderModuleJNI.LabelStyleBuilder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.styles.LabelStyleBuilder) director;
    }

    String objClassName = com.carto.styles.LabelStyleBuilderModuleJNI.LabelStyleBuilder_swigGetClassName(cPtr, null);
    com.carto.styles.LabelStyleBuilder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.styles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.styles.LabelStyleBuilder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a LabelStyleBuilder object with all parameters set to defaults.
 */
  public LabelStyleBuilder() {
    this(LabelStyleBuilderModuleJNI.new_LabelStyleBuilder(), true);
  }

/**
 * Returns the horizontal anchor point of the label.<br>
 * @return The horizontal anchor point of the label.
 */
  public float getAnchorPointX() {
    return LabelStyleBuilderModuleJNI.LabelStyleBuilder_getAnchorPointX(swigCPtr, this);
  }

/**
 * Sets the horizontal anchor point of the label.<br>
 * @param anchorPointX The new horizontal anchor point for the label. -1 means the left side,<br>
 *                     0 the center and 1 the right side of the label. The default is 0.
 */
  public void setAnchorPointX(float anchorPointX) {
    LabelStyleBuilderModuleJNI.LabelStyleBuilder_setAnchorPointX(swigCPtr, this, anchorPointX);
  }

/**
 * Returns the vertical anchor point of the label.<br>
 * @return The vertical anchor point of the label.
 */
  public float getAnchorPointY() {
    return LabelStyleBuilderModuleJNI.LabelStyleBuilder_getAnchorPointY(swigCPtr, this);
  }

/**
 * Sets the vertical anchor point of the label.<br>
 * @param anchorPointY The vertical anchor point for the label. -1 means the bottom,<br>
 *                     0 the center and 1 the top of the label. The default is -1.
 */
  public void setAnchorPointY(float anchorPointY) {
    LabelStyleBuilderModuleJNI.LabelStyleBuilder_setAnchorPointY(swigCPtr, this, anchorPointY);
  }

/**
 * Sets the anchor point for the label. Values will be clamped to [-1, 1] range.<br>
 * @param anchorPointX The new horizontal anchor point for the label. -1 means the left side,<br>
 *                     0 the center and 1 the right side of the label. The default is 0.<br>
 * @param anchorPointY The vertical anchor point for the label. -1 means the bottom,<br>
 *                     0 the center and 1 the top of the label. The default is -1.
 */
  public void setAnchorPoint(float anchorPointX, float anchorPointY) {
    LabelStyleBuilderModuleJNI.LabelStyleBuilder_setAnchorPoint(swigCPtr, this, anchorPointX, anchorPointY);
  }

/**
 * Returns the state of the flippable flag.<br>
 * @return True if the label is flippable.
 */
  public boolean isFlippable() {
    return LabelStyleBuilderModuleJNI.LabelStyleBuilder_isFlippable(swigCPtr, this);
  }

/**
 * Sets the state of the flippable flag. If set to true and the orientation mode is set to<br>
 * GROUND the label is allowed to flip 180 degrees to try and face the camera better. This is<br>
 * useful for street names and some other texts. The default is true.<br>
 * @param flippable The new state of the flippable flag.
 */
  public void setFlippable(boolean flippable) {
    LabelStyleBuilderModuleJNI.LabelStyleBuilder_setFlippable(swigCPtr, this, flippable);
  }

/**
 * Returns the orientation mode of the label.<br>
 * @return The orientation mode of the label.
 */
  public BillboardOrientation getOrientationMode() {
    return BillboardOrientation.swigToEnum(LabelStyleBuilderModuleJNI.LabelStyleBuilder_getOrientationMode(swigCPtr, this));
  }

/**
 * Sets the orientation mode for the label. The default is BillboardOrientation::FACE_CAMERA_BILLBOARD.<br>
 * @param orientationMode The new orientation mode for the label.
 */
  public void setOrientationMode(BillboardOrientation orientationMode) {
    LabelStyleBuilderModuleJNI.LabelStyleBuilder_setOrientationMode(swigCPtr, this, orientationMode.swigValue());
  }

/**
 * Returns the scaling mode of the label.<br>
 * @return The scaling mode of the label.
 */
  public BillboardScaling getScalingMode() {
    return BillboardScaling.swigToEnum(LabelStyleBuilderModuleJNI.LabelStyleBuilder_getScalingMode(swigCPtr, this));
  }

/**
 * Sets the scaling mode for the label. The default is BillboardScaling::CONST_SCREEN_SIZE.<br>
 * @param scalingMode The new scaling mode for the label.
 */
  public void setScalingMode(BillboardScaling scalingMode) {
    LabelStyleBuilderModuleJNI.LabelStyleBuilder_setScalingMode(swigCPtr, this, scalingMode.swigValue());
  }

/**
 * Returns the relative rendering scale for the label. <br>
 * @return The relative rendering scale for the label.
 */
  public float getRenderScale() {
    return LabelStyleBuilderModuleJNI.LabelStyleBuilder_getRenderScale(swigCPtr, this);
  }

/**
 * Sets the relative rendering scale for the label. The default is 1.0. For sharper labels, this should be larger.<br>
 * @param renderScale The new rendering scale value.
 */
  public void setRenderScale(float renderScale) {
    LabelStyleBuilderModuleJNI.LabelStyleBuilder_setRenderScale(swigCPtr, this, renderScale);
  }

/**
 * Builds a new instance of the LabelStyle object using previously set parameters.<br>
 * @return A new LabelStyle object.
 */
  public LabelStyle buildStyle() {
  long cPtr = LabelStyleBuilderModuleJNI.LabelStyleBuilder_buildStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.LabelStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return LabelStyleBuilderModuleJNI.LabelStyleBuilder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return LabelStyleBuilderModuleJNI.LabelStyleBuilder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return LabelStyleBuilderModuleJNI.LabelStyleBuilder_swigGetDirectorObject(swigCPtr, this);
  }

}
