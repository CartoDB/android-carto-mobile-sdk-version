/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

/**
 * Possible styles in which line segments are connected with each other.
 */
public enum LineJoinType {
/**
 * Line segments are not connected with each other. The fastest and ugliest.
 */
  LINE_JOIN_TYPE_NONE,
/**
 * Line segments are connected with each other using miter connections. This is the preferred mode (fast and good looking generally).
 */
  LINE_JOIN_TYPE_MITER,
/**
 * Line segments are connected with each other using bevel (straight line) connectors. Fast<br>
 * but results in an unnatural line.
 */
  LINE_JOIN_TYPE_BEVEL,
/**
 * Line segments are connected with each other using circle sectors resulting in <br>
 * round corners. Slowest and prettiest.
 */
  LINE_JOIN_TYPE_ROUND;

  public final int swigValue() {
    return swigValue;
  }

  public static LineJoinType swigToEnum(int swigValue) {
    LineJoinType[] swigValues = LineJoinType.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (LineJoinType swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + LineJoinType.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private LineJoinType() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private LineJoinType(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private LineJoinType(LineJoinType swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

