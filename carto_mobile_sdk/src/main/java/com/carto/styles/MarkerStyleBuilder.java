/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

import com.carto.graphics.Bitmap;
import com.carto.styles.BillboardStyleBuilder;
import com.carto.styles.MarkerStyle;

/**
 * A builder class for MarkerStyle.
 */
@com.carto.utils.DontObfuscate public class MarkerStyleBuilder extends BillboardStyleBuilder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public MarkerStyleBuilder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(MarkerStyleBuilder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MarkerStyleBuilderModuleJNI.delete_MarkerStyleBuilder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.styles.MarkerStyleBuilder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.styles.MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.styles.MarkerStyleBuilder) director;
    }

    String objClassName = com.carto.styles.MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_swigGetClassName(cPtr, null);
    com.carto.styles.MarkerStyleBuilder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.styles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.styles.MarkerStyleBuilder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a MarkerStyleBuilder object with all parameters set to defaults.
 */
  public MarkerStyleBuilder() {
    this(MarkerStyleBuilderModuleJNI.new_MarkerStyleBuilder(), true);
  }

/**
 * Returns the horizontal anchor point of the marker.<br>
 * @return The horizontal anchor point of the marker.
 */
  public float getAnchorPointX() {
    return MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_getAnchorPointX(swigCPtr, this);
  }

/**
 * Sets the horizontal anchor point of the marker.<br>
 * @param anchorPointX The new horizontal anchor point for the marker. -1 means the left side,<br>
 * 0 the center and 1 the right side of the marker. The default is 0.
 */
  public void setAnchorPointX(float anchorPointX) {
    MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_setAnchorPointX(swigCPtr, this, anchorPointX);
  }

/**
 * Returns the vertical anchor point of the marker.<br>
 * @return The vertical anchor point of the marker.
 */
  public float getAnchorPointY() {
    return MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_getAnchorPointY(swigCPtr, this);
  }

/**
 * Sets the vertical anchor point of the marker.<br>
 * @param anchorPointY The vertical anchor point for the marker. -1 means the bottom,<br>
 * 0 the center and 1 the top of the marker. The default is -1.
 */
  public void setAnchorPointY(float anchorPointY) {
    MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_setAnchorPointY(swigCPtr, this, anchorPointY);
  }

/**
 * Sets the anchor point for the marker. Values will be clamped to [-1, 1] range.<br>
 * @param anchorPointX The new horizontal anchor point for the marker. -1 means the left side,<br>
 * 0 the center and 1 the right side of the marker. The default is 0.<br>
 * @param anchorPointY The vertical anchor point for the marker. -1 means the bottom,<br>
 * 0 the center and 1 the top of the marker. The default is -1.
 */
  public void setAnchorPoint(float anchorPointX, float anchorPointY) {
    MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_setAnchorPoint(swigCPtr, this, anchorPointX, anchorPointY);
  }

/**
 * Returns the bitmap of the marker.<br>
 * @return The bitmap of the marker.
 */
  public Bitmap getBitmap() {
    long cPtr = MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_getBitmap(swigCPtr, this);
    return (cPtr == 0) ? null : new Bitmap(cPtr, true);
  }

/**
 * Sets the bitmap that will be used for drawing the marker. The default is "default_marker.png".<br>
 * @param bitmap The new bitmap for the marker.
 */
  public void setBitmap(Bitmap bitmap) {
    MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_setBitmap(swigCPtr, this, Bitmap.getCPtr(bitmap), bitmap);
  }

/**
 * Returns the orientation mode of the marker.<br>
 * @return The orientation mode of the marker.
 */
  public BillboardOrientation getOrientationMode() {
    return BillboardOrientation.swigToEnum(MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_getOrientationMode(swigCPtr, this));
  }

/**
 * Sets the orientation mode for the marker. The default is BillboardOrientation::FACE_CAMERA_BILLBOARD.<br>
 * @param orientationMode The new orientation mode for the marker.
 */
  public void setOrientationMode(BillboardOrientation orientationMode) {
    MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_setOrientationMode(swigCPtr, this, orientationMode.swigValue());
  }

/**
 * Returns the scaling mode of the marker.<br>
 * @return The scaling mode of the marker.
 */
  public BillboardScaling getScalingMode() {
    return BillboardScaling.swigToEnum(MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_getScalingMode(swigCPtr, this));
  }

/**
 * Sets the scaling mode for the marker. The default is BillboardScaling::CONST_SCREEN_SIZE.<br>
 * @param scalingMode The new scaling mode for the marker.
 */
  public void setScalingMode(BillboardScaling scalingMode) {
    MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_setScalingMode(swigCPtr, this, scalingMode.swigValue());
  }

/**
 * Returns the size of the marker used for click detection.<br>
 * @return The size of the marker used for click detection.
 */
  public float getClickSize() {
    return MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_getClickSize(swigCPtr, this);
  }

/**
 * Sets the size for the marker that will be used for click detection.<br>
 * Units are screen density independent pixels (DP or DIP). If set to -1 the click size will be<br>
 * calculated automatically. The default is -1.<br>
 * @param size The new point size in dp.
 */
  public void setClickSize(float size) {
    MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_setClickSize(swigCPtr, this, size);
  }

/**
 * Returns the size of the marker.<br>
 * @return The size of the marker, units depend on the scaling mode.
 */
  public float getSize() {
    return MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_getSize(swigCPtr, this);
  }

/**
 * Sets the size for the marker. The units depend on the scaling mode, if it's set to BillboardScaling::WORLD_SIZE,<br>
 * the size is in meters near the equator, the size will not be stretched near the poles. If it's set to<br>
 * BillboardScaling::SCREEN_SIZE or BillboardScaling::CONST_SCREEN_SIZE then the size is in screen density<br>
 * independent pixels (dp or dip) or normal pixels, depending whether setScaleWithDPI was set to true or false<br>
 * respectively. If set to -1, unpadded bitmap width will be used instead. The default is -1.<br>
 * @param size The new marker size.
 */
  public void setSize(float size) {
    MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_setSize(swigCPtr, this, size);
  }

/**
 * Builds a new instance of the MarkerStyle object using previously set parameters.<br>
 * @return A new MarkerStyle object.
 */
  public MarkerStyle buildStyle() {
  long cPtr = MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_buildStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.MarkerStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return MarkerStyleBuilderModuleJNI.MarkerStyleBuilder_swigGetDirectorObject(swigCPtr, this);
  }

}
