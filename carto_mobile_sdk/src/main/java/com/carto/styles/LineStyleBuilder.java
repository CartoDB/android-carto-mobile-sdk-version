/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

import com.carto.graphics.Bitmap;
import com.carto.styles.LineStyle;
import com.carto.styles.StyleBuilder;

/**
 * A builder class for LineStyle.
 */
@com.carto.utils.DontObfuscate public class LineStyleBuilder extends StyleBuilder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public LineStyleBuilder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(LineStyleBuilder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LineStyleBuilderModuleJNI.delete_LineStyleBuilder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.styles.LineStyleBuilder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.styles.LineStyleBuilderModuleJNI.LineStyleBuilder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.styles.LineStyleBuilder) director;
    }

    String objClassName = com.carto.styles.LineStyleBuilderModuleJNI.LineStyleBuilder_swigGetClassName(cPtr, null);
    com.carto.styles.LineStyleBuilder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.styles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.styles.LineStyleBuilder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a LineStyleBuilder object with all parameters set to defaults.
 */
  public LineStyleBuilder() {
    this(LineStyleBuilderModuleJNI.new_LineStyleBuilder(), true);
  }

/**
 * Returns the bitmap of the line.<br>
 * @return The bitmap of the line.
 */
  public Bitmap getBitmap() {
    long cPtr = LineStyleBuilderModuleJNI.LineStyleBuilder_getBitmap(swigCPtr, this);
    return (cPtr == 0) ? null : new Bitmap(cPtr, true);
  }

/**
 * Sets the bitmap that will be used for drawing the line. The bitmap will be stretched<br>
 * horizontally to match the width of the line and repeated vertically along the length of the line.<br>
 * The default is "default_line.png".<br>
 * @param bitmap The new bitmap for the line.
 */
  public void setBitmap(Bitmap bitmap) {
    LineStyleBuilderModuleJNI.LineStyleBuilder_setBitmap(swigCPtr, this, Bitmap.getCPtr(bitmap), bitmap);
  }

/**
 * Returns the width of the line used for click detection.<br>
 * @return The width of the line used for click detection.
 */
  public float getClickWidth() {
    return LineStyleBuilderModuleJNI.LineStyleBuilder_getClickWidth(swigCPtr, this);
  }

/**
 * Sets the width for the line that will be used for click detection.<br>
 * Units are screen density independent pixels (DP or DIP). If set to -1 the click width will be<br>
 * calculated automatically. The default is -1.<br>
 * @param clickWidth The new point size in dp.
 */
  public void setClickWidth(float clickWidth) {
    LineStyleBuilderModuleJNI.LineStyleBuilder_setClickWidth(swigCPtr, this, clickWidth);
  }

/**
 * Returns the end point type of the line.<br>
 * @return The end point type of the line.
 */
  public LineEndType getLineEndType() {
    return LineEndType.swigToEnum(LineStyleBuilderModuleJNI.LineStyleBuilder_getLineEndType(swigCPtr, this));
  }

/**
 * Sets the style in which the end points of the line will be drawn. The default is LineEndType::ROUND.<br>
 * @param lineEndType The new line end point type.
 */
  public void setLineEndType(LineEndType lineEndType) {
    LineStyleBuilderModuleJNI.LineStyleBuilder_setLineEndType(swigCPtr, this, lineEndType.swigValue());
  }

/**
 * Returns the join type of the line.<br>
 * @return The join type of the line.
 */
  public LineJoinType getLineJoinType() {
    return LineJoinType.swigToEnum(LineStyleBuilderModuleJNI.LineStyleBuilder_getLineJoinType(swigCPtr, this));
  }

/**
 * Sets the style in which the line segments will be connected with each other. The default is LineJoinType::MITER.<br>
 * @param lineJoinType The new line join type.
 */
  public void setLineJoinType(LineJoinType lineJoinType) {
    LineStyleBuilderModuleJNI.LineStyleBuilder_setLineJoinType(swigCPtr, this, lineJoinType.swigValue());
  }

/**
 * Returns the stretch factor of the line.<br>
 * @return The stretch factor of the line.
 */
  public float getStretchFactor() {
    return LineStyleBuilderModuleJNI.LineStyleBuilder_getStretchFactor(swigCPtr, this);
  }

/**
 * Sets the relative stretching coefficient for the line. The bitmap of the line will be stretched <br>
 * vertically by the stretch factor and then repeated along the length of the line. For example, <br>
 * setting the stretch factor to 2.0 will stretch the bitmap vertically to double the original height <br>
 * and reduces the number of times the bitmap gets repeated by half. The default is 1.0.<br>
 * @param stretchFactor The new relative stretching coefficient for the line.
 */
  public void setStretchFactor(float stretchFactor) {
    LineStyleBuilderModuleJNI.LineStyleBuilder_setStretchFactor(swigCPtr, this, stretchFactor);
  }

/**
 * Returns the width of the line.<br>
 * @return The width of the line in dp.
 */
  public float getWidth() {
    return LineStyleBuilderModuleJNI.LineStyleBuilder_getWidth(swigCPtr, this);
  }

/**
 * Sets the width of line in screen density independent pixels (DP or DIP). The default is 12.<br>
 * @param width The new line width in dp.
 */
  public void setWidth(float width) {
    LineStyleBuilderModuleJNI.LineStyleBuilder_setWidth(swigCPtr, this, width);
  }

/**
 * Builds a new instance of the LineStyle object using previously set parameters.<br>
 * @return A new LineStyle object.
 */
  public LineStyle buildStyle() {
  long cPtr = LineStyleBuilderModuleJNI.LineStyleBuilder_buildStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.LineStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return LineStyleBuilderModuleJNI.LineStyleBuilder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return LineStyleBuilderModuleJNI.LineStyleBuilder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return LineStyleBuilderModuleJNI.LineStyleBuilder_swigGetDirectorObject(swigCPtr, this);
  }

}
