/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

/**
 * Possible animation types.
 */
public enum AnimationType {
/**
 * No animation is applied.
 */
  ANIMATION_TYPE_NONE,
/**
 * Step transition is applied at the middle of the animation.
 */
  ANIMATION_TYPE_STEP,
/**
 * Linear transition is used for animation.
 */
  ANIMATION_TYPE_LINEAR,
/**
 * Smooth transition with 2nd order continuity is used for animation.
 */
  ANIMATION_TYPE_SMOOTHSTEP,
/**
 * Spring-like transition is used for animation.
 */
  ANIMATION_TYPE_SPRING;

  public final int swigValue() {
    return swigValue;
  }

  public static AnimationType swigToEnum(int swigValue) {
    AnimationType[] swigValues = AnimationType.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (AnimationType swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + AnimationType.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private AnimationType() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private AnimationType(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private AnimationType(AnimationType swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

