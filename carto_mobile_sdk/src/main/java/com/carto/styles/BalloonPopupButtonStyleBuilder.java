/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

import com.carto.graphics.Color;
import com.carto.styles.StyleBuilder;
import com.carto.styles.BalloonPopupStyle;
import com.carto.styles.BalloonPopupButtonStyle;
import com.carto.styles.BalloonPopupMargins;

/**
 * A builder class for BalloonPopupButtonStyle.
 */
@com.carto.utils.DontObfuscate public class BalloonPopupButtonStyleBuilder extends StyleBuilder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public BalloonPopupButtonStyleBuilder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(BalloonPopupButtonStyleBuilder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BalloonPopupButtonStyleBuilderModuleJNI.delete_BalloonPopupButtonStyleBuilder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.styles.BalloonPopupButtonStyleBuilder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.styles.BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.styles.BalloonPopupButtonStyleBuilder) director;
    }

    String objClassName = com.carto.styles.BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_swigGetClassName(cPtr, null);
    com.carto.styles.BalloonPopupButtonStyleBuilder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.styles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.styles.BalloonPopupButtonStyleBuilder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a BalloonPopupButtonStyleBuilder object with all parameters set to defaults.
 */
  public BalloonPopupButtonStyleBuilder() {
    this(BalloonPopupButtonStyleBuilderModuleJNI.new_BalloonPopupButtonStyleBuilder(), true);
  }

/**
 * Returns the width of the button.<br>
 * If this value is -1, then button width is calculated automatically based on button text.<br>
 * @return The width of the button in dp.
 */
  public int getButtonWidth() {
    return BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_getButtonWidth(swigCPtr, this);
  }

/**
 * Sets the width of the button.<br>
 * The default is -1, which means that button width is calculated automatically based on button text.<br>
 * @param buttonWidth The button width in dp, or -1.
 */
  public void setButtonWidth(int buttonWidth) {
    BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_setButtonWidth(swigCPtr, this, buttonWidth);
  }

/**
 * Returns the corner radius of the button.<br>
 * @return The corner radius of the button in dp.
 */
  public int getCornerRadius() {
    return BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_getCornerRadius(swigCPtr, this);
  }

/**
 * Sets the corner radius of the button. Bigger values mean rounder corners, 0 creates<br>
 * a rectangular button. The default is 3.<br>
 * @param cornerRadius The new corner radius in dp.
 */
  public void setCornerRadius(int cornerRadius) {
    BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_setCornerRadius(swigCPtr, this, cornerRadius);
  }

/**
 * Returns the color of the text.<br>
 * @return The color of the text.
 */
  public Color getTextColor() { return new Color(BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_getTextColor(swigCPtr, this), true); }

/**
 * Sets the color of the text. The default is 0xFF000000.<br>
 * @param textColor The new color for the text.
 */
  public void setTextColor(Color textColor) {
    BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_setTextColor(swigCPtr, this, Color.getCPtr(textColor), textColor);
  }

/**
 * Returns the name of the text font.<br>
 * @return The name of the text font.
 */
  public String getTextFontName() {
    return BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_getTextFontName(swigCPtr, this);
  }

/**
 * Sets the name of the text font. It must be one of the fonts bundled with the platform.<br>
 * The default is HelveticaNeue-Light.<br>
 * @param textFontName The new name for the text font.
 */
  public void setTextFontName(String textFontName) {
    BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_setTextFontName(swigCPtr, this, textFontName);
  }

/**
 * Returns the size of the text font.<br>
 * @return The size of the text font.
 */
  public int getTextFontSize() {
    return BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_getTextFontSize(swigCPtr, this);
  }

/**
 * Sets the size of the text font. The default is 16.<br>
 * @param textFontSize The new size for the text font in pts.
 */
  public void setTextFontSize(int textFontSize) {
    BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_setTextFontSize(swigCPtr, this, textFontSize);
  }

/**
 * Returns the margins of the text.<br>
 * @return The margins of the text.
 */
  public BalloonPopupMargins getTextMargins() { return new BalloonPopupMargins(BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_getTextMargins(swigCPtr, this), true); }

/**
 * Sets the margins for the text. The margins will determine how much<br>
 * empty space should surround the text. The default is BalloonPopupMargins(8, 4, 8, 8).<br>
 * @param textMargins The new margins for the text in dp.
 */
  public void setTextMargins(BalloonPopupMargins textMargins) {
    BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_setTextMargins(swigCPtr, this, BalloonPopupMargins.getCPtr(textMargins), textMargins);
  }

/**
 * Returns the color of the stroke surrounding the button.<br>
 * @return The color of the stroke surrounding the button.
 */
  public Color getStrokeColor() { return new Color(BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_getStrokeColor(swigCPtr, this), true); }

/**
 * Sets the color of the stroke surrounding the button. The default is 0xFF000000.<br>
 * @param strokeColor The new color of the stroke surrounding the button.
 */
  public void setStrokeColor(Color strokeColor) {
    BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_setStrokeColor(swigCPtr, this, Color.getCPtr(strokeColor), strokeColor);
  }

/**
 * Returns the width of the stroke surrounding the button.<br>
 * @return The width of the stroke surrounding the button in dp.
 */
  public int getStrokeWidth() {
    return BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_getStrokeWidth(swigCPtr, this);
  }

/**
 * Sets the width of the stroke surrounding the button. The default is 1.<br>
 * @param strokeWidth The new width of the stroke surrounding the button.
 */
  public void setStrokeWidth(int strokeWidth) {
    BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_setStrokeWidth(swigCPtr, this, strokeWidth);
  }

/**
 * Builds a new instance of the BalloonPopupButtonStyle object using previously set parameters.<br>
 * @return A new BalloonPopupButtonStyle object.
 */
  public BalloonPopupButtonStyle buildStyle() {
  long cPtr = BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_buildStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.BalloonPopupButtonStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return BalloonPopupButtonStyleBuilderModuleJNI.BalloonPopupButtonStyleBuilder_swigGetDirectorObject(swigCPtr, this);
  }

}
