/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

import com.carto.graphics.Color;
import com.carto.graphics.Bitmap;
import com.carto.styles.PopupStyleBuilder;
import com.carto.styles.BalloonPopupStyle;

/**
 * A builder class for BalloonPopupStyle.
 */
@com.carto.utils.DontObfuscate public class BalloonPopupStyleBuilder extends PopupStyleBuilder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public BalloonPopupStyleBuilder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(BalloonPopupStyleBuilder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BalloonPopupStyleBuilderModuleJNI.delete_BalloonPopupStyleBuilder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.styles.BalloonPopupStyleBuilder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.styles.BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.styles.BalloonPopupStyleBuilder) director;
    }

    String objClassName = com.carto.styles.BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_swigGetClassName(cPtr, null);
    com.carto.styles.BalloonPopupStyleBuilder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.styles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.styles.BalloonPopupStyleBuilder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a BalloonPopupStyleBuilder object with all parameters set to defaults.
 */
  public BalloonPopupStyleBuilder() {
    this(BalloonPopupStyleBuilderModuleJNI.new_BalloonPopupStyleBuilder(), true);
  }

/**
 * Returns the corner radius of the popup.<br>
 * @return The corner radius of the popup in dp.
 */
  public int getCornerRadius() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getCornerRadius(swigCPtr, this);
  }

/**
 * Sets the corner radius of the popup. Bigger values mean rounder corners, 0 creates<br>
 * a rectangular popup. The default is 3.<br>
 * @param cornerRadius The new corner radius in dp.
 */
  public void setCornerRadius(int cornerRadius) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setCornerRadius(swigCPtr, this, cornerRadius);
  }

/**
 * Returns the background color of the left part of the popup.<br>
 * @return The background color of the left part of the popup.
 */
  public Color getLeftColor() { return new Color(BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getLeftColor(swigCPtr, this), true); }

/**
 * Sets the background color of the left part of the popup. The size of the colored area<br>
 * is determined by the left margins and the left image. The default is 0xFF00B483.<br>
 * @param leftColor The new color for the left part of the popup.
 */
  public void setLeftColor(Color leftColor) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setLeftColor(swigCPtr, this, Color.getCPtr(leftColor), leftColor);
  }

/**
 * Returns the image of the left part of the popup.<br>
 * @return The image of the left part of the popup.
 */
  public Bitmap getLeftImage() {
    long cPtr = BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getLeftImage(swigCPtr, this);
    return (cPtr == 0) ? null : new Bitmap(cPtr, true);
  }

/**
 * Sets the image for the left part of the popup. If null is passed no image will be drawn.<br>
 * The default is null.<br>
 * @param leftImage The new image for the left part of the popup.
 */
  public void setLeftImage(Bitmap leftImage) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setLeftImage(swigCPtr, this, Bitmap.getCPtr(leftImage), leftImage);
  }

/**
 * Returns the margins of the left part of the popup.<br>
 * @return The margins of the left part of the popup.
 */
  public BalloonPopupMargins getLeftMargins() { return new BalloonPopupMargins(BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getLeftMargins(swigCPtr, this), true); }

/**
 * Sets the margins for the left part of the popup. The margins will determine how much<br>
 * empty space should surround the left image. The default is BalloonPopupMargins(5, 0, 5, 0).<br>
 * @param leftMargins The new margins for the left part of the popup in dp.
 */
  public void setLeftMargins(BalloonPopupMargins leftMargins) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setLeftMargins(swigCPtr, this, BalloonPopupMargins.getCPtr(leftMargins), leftMargins);
  }

/**
 * Returns the background color of the right part of the popup.<br>
 * @return The background color of the right part of the popup.
 */
  public Color getRightColor() { return new Color(BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getRightColor(swigCPtr, this), true); }

/**
 * Sets the background color of the right part of the popup. The size of the colored area<br>
 * is determined by the right margins and the right image. The default is 0xFF00B483.<br>
 * @param rightColor The new color for the right part of the popup.
 */
  public void setRightColor(Color rightColor) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setRightColor(swigCPtr, this, Color.getCPtr(rightColor), rightColor);
  }

/**
 * Returns the image of the right part of the popup.<br>
 * @return The image of the right part of the popup.
 */
  public Bitmap getRightImage() {
    long cPtr = BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getRightImage(swigCPtr, this);
    return (cPtr == 0) ? null : new Bitmap(cPtr, true);
  }

/**
 * Sets the image for the right part of the popup. If null is passed no image will be drawn.<br>
 * The default is null.<br>
 * @param rightImage The new image for the right part of the popup.
 */
  public void setRightImage(Bitmap rightImage) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setRightImage(swigCPtr, this, Bitmap.getCPtr(rightImage), rightImage);
  }

/**
 * Returns the margins of the right part of the popup.<br>
 * @return The margins of the right part of the popup.
 */
  public BalloonPopupMargins getRightMargins() { return new BalloonPopupMargins(BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getRightMargins(swigCPtr, this), true); }

/**
 * Sets the margins for the right part of the popup. The margins will determine how much<br>
 * empty space should surround the right image. The default is BalloonPopupMargins(5, 0, 5, 0).<br>
 * @param rightMargins The new margins for the right part of the popup in dp.
 */
  public void setRightMargins(BalloonPopupMargins rightMargins) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setRightMargins(swigCPtr, this, BalloonPopupMargins.getCPtr(rightMargins), rightMargins);
  }

/**
 * Returns the color of the title.<br>
 * @return The color of the title.
 */
  public Color getTitleColor() { return new Color(BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getTitleColor(swigCPtr, this), true); }

/**
 * Sets the color of the title. The default is 0xFF000000.<br>
 * @param titleColor The new color for the title.
 */
  public void setTitleColor(Color titleColor) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setTitleColor(swigCPtr, this, Color.getCPtr(titleColor), titleColor);
  }

/**
 * Returns the name of the title font.<br>
 * @return The name of the title font.
 */
  public String getTitleFontName() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getTitleFontName(swigCPtr, this);
  }

/**
 * Sets the name of the title font. It must be one of the fonts bundled with the platform.<br>
 * The default is HelveticaNeue-Light.<br>
 * @param titleFontName The new name for the title font.
 */
  public void setTitleFontName(String titleFontName) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setTitleFontName(swigCPtr, this, titleFontName);
  }

/**
 * Returns the title field variable. If not empty, this variable is used to read actual text string from object meta info.<br>
 * @return The current title variable.
 */
  public String getTitleField() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getTitleField(swigCPtr, this);
  }

/**
 * Sets the title field variable. If not empty, this variable is used to read actual text string from object meta info.<br>
 * @param field The text field to use for displaying title from metainfo.
 */
  public void setTitleField(String field) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setTitleField(swigCPtr, this, field);
  }

/**
 * Returns the size of the title font.<br>
 * @return The size of the title font.
 */
  public int getTitleFontSize() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getTitleFontSize(swigCPtr, this);
  }

/**
 * Sets the size of the title font. The default is 16.<br>
 * @param titleFontSize The new size for the title font in pts.
 */
  public void setTitleFontSize(int titleFontSize) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setTitleFontSize(swigCPtr, this, titleFontSize);
  }

/**
 * Returns the margins of the title.<br>
 * @return The margins of the title.
 */
  public BalloonPopupMargins getTitleMargins() { return new BalloonPopupMargins(BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getTitleMargins(swigCPtr, this), true); }

/**
 * Sets the margins for the title. The margins will determine how much<br>
 * empty space should surround the title. The default is BalloonPopupMargins(8, 4, 8, 0).<br>
 * @param titleMargins The new margins for the title in dp.
 */
  public void setTitleMargins(BalloonPopupMargins titleMargins) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setTitleMargins(swigCPtr, this, BalloonPopupMargins.getCPtr(titleMargins), titleMargins);
  }

/**
 * Returns the state of the title wrap parameter.<br>
 * @return True if long titles are wrapped, false if it is truncated.
 */
  public boolean isTitleWrap() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_isTitleWrap(swigCPtr, this);
  }

/**
 * Sets the state of the title wrap parameter. If set to true, long titles that are<br>
 * wider than the sreen width will be wrapped to multiple lines, increasing the height of the popup. <br>
 * If set to false, long titles are truncated with three dots.<br>
 * @param titleWrap The new state of the title wrap parameter.
 */
  public void setTitleWrap(boolean titleWrap) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setTitleWrap(swigCPtr, this, titleWrap);
  }

/**
 * Returns the color of the description.<br>
 * @return The color of the description.
 */
  public Color getDescriptionColor() { return new Color(BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getDescriptionColor(swigCPtr, this), true); }

/**
 * Sets the color of the description. The default is 0xFF000000.<br>
 * @param descColor The new color for the description.
 */
  public void setDescriptionColor(Color descColor) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setDescriptionColor(swigCPtr, this, Color.getCPtr(descColor), descColor);
  }

/**
 * Returns the name of the description font.<br>
 * @return The name of the description font.
 */
  public String getDescriptionFontName() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getDescriptionFontName(swigCPtr, this);
  }

/**
 * Sets the name of the description font. It must be one of the fonts bundled with the platform.<br>
 * The default is HelveticaNeue-Light.<br>
 * @param descFontName The new name for the description font.
 */
  public void setDescriptionFontName(String descFontName) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setDescriptionFontName(swigCPtr, this, descFontName);
  }

/**
 * Returns the description field variable. If not empty, this variable is used to read actual text string from object meta info.<br>
 * @return The current description variable.
 */
  public String getDescriptionField() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getDescriptionField(swigCPtr, this);
  }

/**
 * Sets the description field variable. If not empty, this variable is used to read actual text string from object meta info.<br>
 * @param field The description field to use for displaying text from metainfo.
 */
  public void setDescriptionField(String field) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setDescriptionField(swigCPtr, this, field);
  }

/**
 * Returns the size of the description font.<br>
 * @return The size of the description font.
 */
  public int getDescriptionFontSize() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getDescriptionFontSize(swigCPtr, this);
  }

/**
 * Sets the size of the description font. The default is 14.<br>
 * @param descFontSize The new size for the description font in pts.
 */
  public void setDescriptionFontSize(int descFontSize) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setDescriptionFontSize(swigCPtr, this, descFontSize);
  }

/**
 * Returns the margins of the description.<br>
 * @return The margins of the description.
 */
  public BalloonPopupMargins getDescriptionMargins() { return new BalloonPopupMargins(BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getDescriptionMargins(swigCPtr, this), true); }

/**
 * Sets the margins for the description. The margins will determine how much<br>
 * empty space should surround the description. The default is BalloonPopupMargins(8, 0, 8, 6).<br>
 * @param descMargins The new margins for the description in dp.
 */
  public void setDescriptionMargins(BalloonPopupMargins descMargins) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setDescriptionMargins(swigCPtr, this, BalloonPopupMargins.getCPtr(descMargins), descMargins);
  }

/**
 * Returns the state of the description wrap parameter.<br>
 * @return True if long descriptions are wrapped, false if it is truncated.
 */
  public boolean isDescriptionWrap() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_isDescriptionWrap(swigCPtr, this);
  }

/**
 * Sets the state of the description wrap parameter. If set to true, long descriptions that are<br>
 * wider than the sreen width will be wrapped to multiple lines, increasing the height of the popup.<br>
 * If set to false, long descriptions are truncated with three dots.<br>
 * @param descWrap The new state of the description wrap parameter.
 */
  public void setDescriptionWrap(boolean descWrap) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setDescriptionWrap(swigCPtr, this, descWrap);
  }

/**
 * Returns the margins for popup buttons.<br>
 * @return The margins for popup buttons.
 */
  public BalloonPopupMargins getButtonMargins() { return new BalloonPopupMargins(BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getButtonMargins(swigCPtr, this), true); }

/**
 * Sets the margins for popup buttons. The margins will determine how much<br>
 * empty space should surround the buttons. The default is BalloonPopupMargins(8, 0, 8, 8).<br>
 * @param buttonMargins The new popup margins for the buttons in dp.
 */
  public void setButtonMargins(BalloonPopupMargins buttonMargins) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setButtonMargins(swigCPtr, this, BalloonPopupMargins.getCPtr(buttonMargins), buttonMargins);
  }

/**
 * Returns the color of the stroke surrounding the popup.<br>
 * @return The color of the stroke surrounding the popup.
 */
  public Color getStrokeColor() { return new Color(BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getStrokeColor(swigCPtr, this), true); }

/**
 * Sets the color of the stroke surrounding the popup. The default is 0xFF000000.<br>
 * @param strokeColor The new color of the stroke surrounding the popup.
 */
  public void setStrokeColor(Color strokeColor) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setStrokeColor(swigCPtr, this, Color.getCPtr(strokeColor), strokeColor);
  }

/**
 * Returns the width of the stroke surrounding the popup.<br>
 * @return The width of the stroke surrounding the popup in dp.
 */
  public int getStrokeWidth() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getStrokeWidth(swigCPtr, this);
  }

/**
 * Sets the width of the stroke surrounding the popup. The default is 1.<br>
 * @param strokeWidth The new width of the stroke surrounding the popup.
 */
  public void setStrokeWidth(int strokeWidth) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setStrokeWidth(swigCPtr, this, strokeWidth);
  }

/**
 * Returns the width of the triangle at the bottom of the popup.<br>
 * @return The width of the triangle at the bottom of the popup in dp.
 */
  public int getTriangleWidth() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getTriangleWidth(swigCPtr, this);
  }

/**
 * Sets the width of the triangle at the bottom of the popup. The default is 20.<br>
 * @param triangleWidth The new width of the triangle at the bottom of the popup.
 */
  public void setTriangleWidth(int triangleWidth) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setTriangleWidth(swigCPtr, this, triangleWidth);
  }

/**
 * Returns the height of the triangle at the bottom of the popup.<br>
 * @return The height of the triangle at the bottom of the popup in dp.
 */
  public int getTriangleHeight() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_getTriangleHeight(swigCPtr, this);
  }

/**
 * Sets the height of the triangle at the bottom of the popup. The default is 10.<br>
 * @param triangleHeight The new height of the triangle at the bottom of the popup.
 */
  public void setTriangleHeight(int triangleHeight) {
    BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_setTriangleHeight(swigCPtr, this, triangleHeight);
  }

/**
 * Builds a new instance of the BalloonPopupStyle object using previously set parameters.<br>
 * @return A new BalloonPopupStyle object.
 */
  public BalloonPopupStyle buildStyle() {
  long cPtr = BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_buildStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.BalloonPopupStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return BalloonPopupStyleBuilderModuleJNI.BalloonPopupStyleBuilder_swigGetDirectorObject(swigCPtr, this);
  }

}
