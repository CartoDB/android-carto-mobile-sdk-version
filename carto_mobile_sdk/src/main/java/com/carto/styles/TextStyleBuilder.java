/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

import com.carto.graphics.Color;
import com.carto.graphics.Bitmap;
import com.carto.styles.LabelStyleBuilder;
import com.carto.styles.TextStyle;

/**
 * A builder class for TextStyle.
 */
@com.carto.utils.DontObfuscate public class TextStyleBuilder extends LabelStyleBuilder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public TextStyleBuilder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(TextStyleBuilder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TextStyleBuilderModuleJNI.delete_TextStyleBuilder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.styles.TextStyleBuilder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.styles.TextStyleBuilderModuleJNI.TextStyleBuilder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.styles.TextStyleBuilder) director;
    }

    String objClassName = com.carto.styles.TextStyleBuilderModuleJNI.TextStyleBuilder_swigGetClassName(cPtr, null);
    com.carto.styles.TextStyleBuilder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.styles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.styles.TextStyleBuilder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a TextStyleBuilder object with all parameters set to defaults.
 */
  public TextStyleBuilder() {
    this(TextStyleBuilderModuleJNI.new_TextStyleBuilder(), true);
  }

/**
 * Returns the font name for the text label.<br>
 * @return The platform dependent font name for the text label.
 */
  public String getFontName() {
    return TextStyleBuilderModuleJNI.TextStyleBuilder_getFontName(swigCPtr, this);
  }

/**
 * Sets the font name for the text label.<br>
 * @param fontName The new platform dependent font name for the text label.
 */
  public void setFontName(String fontName) {
    TextStyleBuilderModuleJNI.TextStyleBuilder_setFontName(swigCPtr, this, fontName);
  }

/**
 * Returns the text field variable. If not empty, this variable is used to read actual text string from object meta info.<br>
 * @return The current text variable.
 */
  public String getTextField() {
    return TextStyleBuilderModuleJNI.TextStyleBuilder_getTextField(swigCPtr, this);
  }

/**
 * Sets the text field variable. If not empty, this variable is used to read actual text string from object meta info.<br>
 * @param field The text field to use for displaying text from metainfo.
 */
  public void setTextField(String field) {
    TextStyleBuilderModuleJNI.TextStyleBuilder_setTextField(swigCPtr, this, field);
  }

/**
 * Returns the font size for the text label.<br>
 * @return The font size for the text label in points.
 */
  public float getFontSize() {
    return TextStyleBuilderModuleJNI.TextStyleBuilder_getFontSize(swigCPtr, this);
  }

/**
 * Sets the font size for the text label.<br>
 * @param size The new font size for the text label in points.
 */
  public void setFontSize(float size) {
    TextStyleBuilderModuleJNI.TextStyleBuilder_setFontSize(swigCPtr, this, size);
  }

/**
 * Returns the state of the 'break lines' flag.<br>
 * @return The state of the 'break lines' flag.
 */
  public boolean isBreakLines() {
    return TextStyleBuilderModuleJNI.TextStyleBuilder_isBreakLines(swigCPtr, this);
  }

/**
 * Sets the state of the 'break lines' flag.<br>
 * If enabled, texts containing CR or NL characters are split into multiple lines.<br>
 * By default the flag is false, due to backward compatibility reasons.
 */
  public void setBreakLines(boolean enable) {
    TextStyleBuilderModuleJNI.TextStyleBuilder_setBreakLines(swigCPtr, this, enable);
  }

/**
 * Returns the margins for the text.<br>
 * @return The margins for the text.
 */
  public TextMargins getTextMargins() { return new TextMargins(TextStyleBuilderModuleJNI.TextStyleBuilder_getTextMargins(swigCPtr, this), true); }

/**
 * Sets the margins for the text. The margins will determine how much<br>
 * empty space should surround the text. The default is TextMargins(0, 0, 0, 0).<br>
 * @param textMargins The new margins for the text in dp.
 */
  public void setTextMargins(TextMargins textMargins) {
    TextStyleBuilderModuleJNI.TextStyleBuilder_setTextMargins(swigCPtr, this, TextMargins.getCPtr(textMargins), textMargins);
  }

/**
 * Returns the stroke color for the text label.<br>
 * @return The stroke color for the text label.
 */
  public Color getStrokeColor() { return new Color(TextStyleBuilderModuleJNI.TextStyleBuilder_getStrokeColor(swigCPtr, this), true); }

/**
 * Sets the stroke color for the text label.<br>
 * @param strokeColor The new stroke color for the text label.
 */
  public void setStrokeColor(Color strokeColor) {
    TextStyleBuilderModuleJNI.TextStyleBuilder_setStrokeColor(swigCPtr, this, Color.getCPtr(strokeColor), strokeColor);
  }

/**
 * Returns the stroke width for the text label.<br>
 * @return The stroke width for the text label in screen density independent pixels.
 */
  public float getStrokeWidth() {
    return TextStyleBuilderModuleJNI.TextStyleBuilder_getStrokeWidth(swigCPtr, this);
  }

/**
 * Sets the stroke width for the text label.<br>
 * @param strokeWidth The new stroke width for the text label in screen density independent pixels.
 */
  public void setStrokeWidth(float strokeWidth) {
    TextStyleBuilderModuleJNI.TextStyleBuilder_setStrokeWidth(swigCPtr, this, strokeWidth);
  }

/**
 * Returns the border color for the text label.<br>
 * @return The border color for the text label.
 */
  public Color getBorderColor() { return new Color(TextStyleBuilderModuleJNI.TextStyleBuilder_getBorderColor(swigCPtr, this), true); }

/**
 * Sets the border color for the text label.<br>
 * @param borderColor The new border color for the text label. By default the border color is transparent.
 */
  public void setBorderColor(Color borderColor) {
    TextStyleBuilderModuleJNI.TextStyleBuilder_setBorderColor(swigCPtr, this, Color.getCPtr(borderColor), borderColor);
  }

/**
 * Returns the border width for the text label.<br>
 * @return The border width for the text label in screen density independent pixels.
 */
  public float getBorderWidth() {
    return TextStyleBuilderModuleJNI.TextStyleBuilder_getBorderWidth(swigCPtr, this);
  }

/**
 * Sets the border width for the text label.<br>
 * @param borderWidth The new border width for the text label in screen density independent pixels. By default the border width is 0.
 */
  public void setBorderWidth(float borderWidth) {
    TextStyleBuilderModuleJNI.TextStyleBuilder_setBorderWidth(swigCPtr, this, borderWidth);
  }

/**
 * Returns the background color for the text label.<br>
 * @return The background color for the text label.
 */
  public Color getBackgroundColor() { return new Color(TextStyleBuilderModuleJNI.TextStyleBuilder_getBackgroundColor(swigCPtr, this), true); }

/**
 * Sets the background color for the text label.<br>
 * @param backgroundColor The new background color for the text label. By default the background color is transparent.
 */
  public void setBackgroundColor(Color backgroundColor) {
    TextStyleBuilderModuleJNI.TextStyleBuilder_setBackgroundColor(swigCPtr, this, Color.getCPtr(backgroundColor), backgroundColor);
  }

/**
 * Builds a new instance of the TextStyle object using previously set parameters.<br>
 * @return A new TextStyle object.
 */
  public TextStyle buildStyle() {
  long cPtr = TextStyleBuilderModuleJNI.TextStyleBuilder_buildStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.TextStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return TextStyleBuilderModuleJNI.TextStyleBuilder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return TextStyleBuilderModuleJNI.TextStyleBuilder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return TextStyleBuilderModuleJNI.TextStyleBuilder_swigGetDirectorObject(swigCPtr, this);
  }

}
