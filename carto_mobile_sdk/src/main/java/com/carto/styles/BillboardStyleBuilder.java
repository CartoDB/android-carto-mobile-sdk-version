/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

import com.carto.styles.AnimationStyle;
import com.carto.styles.StyleBuilder;

/**
 * A base class for BillboardStyleBuilder subclasses.
 */
@com.carto.utils.DontObfuscate public class BillboardStyleBuilder extends StyleBuilder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public BillboardStyleBuilder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(BillboardStyleBuilder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BillboardStyleBuilderModuleJNI.delete_BillboardStyleBuilder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.styles.BillboardStyleBuilder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.styles.BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.styles.BillboardStyleBuilder) director;
    }

    String objClassName = com.carto.styles.BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_swigGetClassName(cPtr, null);
    com.carto.styles.BillboardStyleBuilder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.styles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.styles.BillboardStyleBuilder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Returns the horizontal attaching anchor point of the billboard.<br>
 * @return The horizontal attaching anchor point of the billboard.
 */
  public float getAttachAnchorPointX() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_getAttachAnchorPointX(swigCPtr, this);
  }

/**
 * Sets the horizontal attaching anchor point of the billboard.<br>
 * @param attachAnchorPointX The new horizontal attaching anchor point for the billboard. -1 means the left side,<br>
 * 0 the center and 1 the right side. The default is 0.
 */
  public void setAttachAnchorPointX(float attachAnchorPointX) {
    BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_setAttachAnchorPointX(swigCPtr, this, attachAnchorPointX);
  }

/**
 * Returns the vertical attaching anchor point of the billboard.<br>
 * @return The vertical attaching anchor point of the billboard.
 */
  public float getAttachAnchorPointY() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_getAttachAnchorPointY(swigCPtr, this);
  }

/**
 * Sets the vertical attaching anchor point of the billboard.<br>
 * @param attachAnchorPointY The new vertical attaching anchor point for the billboard. -1 means the bottom,<br>
 * 0 the center and 1 the top. The default is 1.
 */
  public void setAttachAnchorPointY(float attachAnchorPointY) {
    BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_setAttachAnchorPointY(swigCPtr, this, attachAnchorPointY);
  }

/**
 * Sets the attaching anchor point for the billboard. The attaching anchor point is<br>
 * only used if the billboard is attached to another (base) billboard. It defines the point<br>
 * on the base billboard where the attachable billboard will be placed.<br>
 * @param attachAnchorPointX The new horizontal attaching anchor point for the billboard. -1 means the left side,<br>
 * 0 the center and 1 the right side. The default is 0.<br>
 * @param attachAnchorPointY The new vertical attaching anchor point for the billboard. -1 means the bottom,<br>
 * 0 the center and 1 the top. The default is 1.
 */
  public void setAttachAnchorPoint(float attachAnchorPointX, float attachAnchorPointY) {
    BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_setAttachAnchorPoint(swigCPtr, this, attachAnchorPointX, attachAnchorPointY);
  }

/**
 * Returns the state of the causes overlap flag.<br>
 * @return True if this billboard causes overlapping with other billboards behind it.
 */
  public boolean isCausesOverlap() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_isCausesOverlap(swigCPtr, this);
  }

/**
 * Sets the state of the causes overlap flag. If set to false the billboard will<br>
 * never hide other billboards, even if they are overlapping and have the hide if overlapped flag<br>
 * set to true. If set to true the billboard may hide other overlapping billboards that have the<br>
 * hide if overlapped flag set to true and are located behind this billboard. This billboard may still<br>
 * be hidden by other billboards in front of it, regardless of this parameter.<br>
 * The default depends on the subclass.<br>
 * @param causesOverlap The new state of the allow overlap flag.
 */
  public void setCausesOverlap(boolean causesOverlap) {
    BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_setCausesOverlap(swigCPtr, this, causesOverlap);
  }

/**
 * Returns the state of the allow overlap flag.<br>
 * @return True if this billboard can be hidden by overlapping billboards in front of it.
 */
  public boolean isHideIfOverlapped() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_isHideIfOverlapped(swigCPtr, this);
  }

/**
 * Sets the state of the hide if overlapped flag. If set to false the billboard may be<br>
 * hidden by other billboards that are overlapping with it and are located<br>
 * in front of this billboard. If set to true the billboard will never<br>
 * be hidden by other overlapping billboards. The default depends on the subclass.<br>
 * @param hideIfOverlapped The new state of the allow overlap flag.
 */
  public void setHideIfOverlapped(boolean hideIfOverlapped) {
    BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_setHideIfOverlapped(swigCPtr, this, hideIfOverlapped);
  }

/**
 * Returns the horizontal offset of the billboard.<br>
 * @return The horizontal offset of the billboard, units depend on the scaling mode.
 */
  public float getHorizontalOffset() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_getHorizontalOffset(swigCPtr, this);
  }

/**
 * Sets the horizontal offset for the billboard. Horizontal offset is used to offset the bitmap <br>
 * of the billboard horizontally relative to the billboard rotation. The units are the same as the<br>
 * units used in the setSize method. Negative values offset the bitmap to the left and<br>
 * positive values to the right. The default is 0.<br>
 * @param horizontalOffset The new horizontal offset for the billboard.
 */
  public void setHorizontalOffset(float horizontalOffset) {
    BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_setHorizontalOffset(swigCPtr, this, horizontalOffset);
  }

/**
 * Returns the vertical offset of the billboard.<br>
 * @return The vertical offset of the billboard, units depend on the scaling mode.
 */
  public float getVerticalOffset() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_getVerticalOffset(swigCPtr, this);
  }

/**
 * Sets the vertical offset for the billboard. Vertical offset is used to offset the bitmap<br>
 * of the billboard vertically relative to the billboard rotation. The units are the same as the<br>
 * units used in the setSize method. Negative values offset the bitmap to the bottom and positive values to the top.<br>
 * The default is 0.<br>
 * @param verticalOffset The new vertical offset for the billboard.
 */
  public void setVerticalOffset(float verticalOffset) {
    BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_setVerticalOffset(swigCPtr, this, verticalOffset);
  }

/**
 * Returns the placement priority of the billboard.<br>
 * @return The placement priority of the billboard.
 */
  public int getPlacementPriority() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_getPlacementPriority(swigCPtr, this);
  }

/**
 * Sets the placement priority for the billboard. Higher priority billboard get drawn in front of lower<br>
 * priority billboards regardless of their distance to the camera. If billboards are not allowed to overlap then<br>
 * higher priority billboards hide overlapping lower priority billboards. The default is 0.<br>
 * @param placementPriority The new placement priority for the billboard.
 */
  public void setPlacementPriority(int placementPriority) {
    BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_setPlacementPriority(swigCPtr, this, placementPriority);
  }

/**
 * Returns the state of the scale with DPI flag.<br>
 * @return True if this billboard's size will be scaled using the screen dot's per inch.
 */
  public boolean isScaleWithDPI() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_isScaleWithDPI(swigCPtr, this);
  }

/**
 * Sets the state of the scale with DPI flag. If set to true the billboard's size will scale using the screen<br>
 * dots per inch parameter. This means that billboards will look the same size regardless of the device screen size<br>
 * and density. If set to false the billboards will not be scaled with the screen density parameter, which means <br>
 * that billboard will look smaller on on higher density screens. Custom Label and Popup implementations may,<br>
 * but are not guaranteed to compensate for this by generating higher resolution images. The default depends on the subclass.<br>
 * @param scaleWithDPI The new state of the scale with DPI flag.
 */
  public void setScaleWithDPI(boolean scaleWithDPI) {
    BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_setScaleWithDPI(swigCPtr, this, scaleWithDPI);
  }

/**
 * Returns the animation style of the billboard.<br>
 * @return The animation style of the billboard. Can be null if animations are not used.
 */
  public AnimationStyle getAnimationStyle() {
  long cPtr = BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_getAnimationStyle(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.styles.AnimationStyle.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the animation style of the billboard.<br>
 * @param animStyle The new animation style of the billboard. Can be null if animations are not needed (the default).
 */
  public void setAnimationStyle(AnimationStyle animStyle) {
    BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_setAnimationStyle(swigCPtr, this, AnimationStyle.getCPtr(animStyle), animStyle);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return BillboardStyleBuilderModuleJNI.BillboardStyleBuilder_swigGetDirectorObject(swigCPtr, this);
  }

}
