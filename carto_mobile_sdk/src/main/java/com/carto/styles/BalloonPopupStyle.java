/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

import com.carto.graphics.Color;
import com.carto.graphics.Bitmap;
import com.carto.styles.PopupStyle;

/**
 * A style for balloon popups. Contains attributes for configuring how the balloon popup is drawn on the screen.
 */
@com.carto.utils.DontObfuscate public class BalloonPopupStyle extends PopupStyle {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public BalloonPopupStyle(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(BalloonPopupStyle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BalloonPopupStyleModuleJNI.delete_BalloonPopupStyle(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.styles.BalloonPopupStyle swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.styles.BalloonPopupStyleModuleJNI.BalloonPopupStyle_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.styles.BalloonPopupStyle) director;
    }

    String objClassName = com.carto.styles.BalloonPopupStyleModuleJNI.BalloonPopupStyle_swigGetClassName(cPtr, null);
    com.carto.styles.BalloonPopupStyle objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.styles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.styles.BalloonPopupStyle) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Returns the background color of the popup.<br>
 * @return The background color of the popup.
 */
  public Color getBackgroundColor() { return new Color(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getBackgroundColor(swigCPtr, this), true); }

/**
 * Returns the corner radius of the popup.<br>
 * @return The corner radius of the popup.
 */
  public int getCornerRadius() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_getCornerRadius(swigCPtr, this);
  }

/**
 * Returns the background color of the left part of the popup.<br>
 * @return The background color of the left part of the popup.
 */
  public Color getLeftColor() { return new Color(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getLeftColor(swigCPtr, this), true); }

/**
 * Returns the image of the left part of the popup.<br>
 * @return The image of the left part of the popup.
 */
  public Bitmap getLeftImage() {
    long cPtr = BalloonPopupStyleModuleJNI.BalloonPopupStyle_getLeftImage(swigCPtr, this);
    return (cPtr == 0) ? null : new Bitmap(cPtr, true);
  }

/**
 * Returns the margins of the left part of the popup.<br>
 * @return The margins of the left part of the popup.
 */
  public BalloonPopupMargins getLeftMargins() { return new BalloonPopupMargins(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getLeftMargins(swigCPtr, this), true); }

/**
 * Returns the background color of the right part of the popup.<br>
 * @return The background color of the right part of the popup.
 */
  public Color getRightColor() { return new Color(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getRightColor(swigCPtr, this), true); }

/**
 * Returns the image of the right part of the popup.<br>
 * @return The image of the right part of the popup.
 */
  public Bitmap getRightImage() {
    long cPtr = BalloonPopupStyleModuleJNI.BalloonPopupStyle_getRightImage(swigCPtr, this);
    return (cPtr == 0) ? null : new Bitmap(cPtr, true);
  }

/**
 * Returns the margins of the right part of the popup.<br>
 * @return The margins of the right part of the popup.
 */
  public BalloonPopupMargins getRightMargins() { return new BalloonPopupMargins(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getRightMargins(swigCPtr, this), true); }

/**
 * Returns the color of the title.<br>
 * @return The color of the title.
 */
  public Color getTitleColor() { return new Color(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getTitleColor(swigCPtr, this), true); }

/**
 * Returns the name of the title font.<br>
 * @return The name of the title font.
 */
  public String getTitleFontName() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_getTitleFontName(swigCPtr, this);
  }

/**
 * Returns the title field variable to use.<br>
 * @return The title field variable.
 */
  public String getTitleField() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_getTitleField(swigCPtr, this);
  }

/**
 * Returns the size of the title font.<br>
 * @return The size of the title font.
 */
  public int getTitleFontSize() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_getTitleFontSize(swigCPtr, this);
  }

/**
 * Returns the margins of the title.<br>
 * @return The margins of the title.
 */
  public BalloonPopupMargins getTitleMargins() { return new BalloonPopupMargins(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getTitleMargins(swigCPtr, this), true); }

/**
 * Returns the state of the title wrap parameter.<br>
 * @return True if long titles are wrapped, false if it is truncated.
 */
  public boolean isTitleWrap() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_isTitleWrap(swigCPtr, this);
  }

/**
 * Returns the color of the description.<br>
 * @return The color of the description.
 */
  public Color getDescriptionColor() { return new Color(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getDescriptionColor(swigCPtr, this), true); }

/**
 * Returns the name of the description font.<br>
 * @return The name of the description font.
 */
  public String getDescriptionFontName() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_getDescriptionFontName(swigCPtr, this);
  }

/**
 * Returns the description field variable to use.<br>
 * @return The description field variable.
 */
  public String getDescriptionField() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_getDescriptionField(swigCPtr, this);
  }

/**
 * Returns the size of the description font.<br>
 * @return The size of the description font.
 */
  public int getDescriptionFontSize() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_getDescriptionFontSize(swigCPtr, this);
  }

/**
 * Returns the margins of the description.<br>
 * @return The margins of the description.
 */
  public BalloonPopupMargins getDescriptionMargins() { return new BalloonPopupMargins(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getDescriptionMargins(swigCPtr, this), true); }

/**
 * Returns the state of the description wrap parameter.<br>
 * @return True if long descriptions are wrapped, false if it is truncated.
 */
  public boolean isDescriptionWrap() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_isDescriptionWrap(swigCPtr, this);
  }

/**
 * Returns the margins for the buttons of the popup.<br>
 * @return The margins for the buttons of the popup.
 */
  public BalloonPopupMargins getButtonMargins() { return new BalloonPopupMargins(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getButtonMargins(swigCPtr, this), true); }

/**
 * Returns the color of the stroke surrounding the popup.<br>
 * @return The color of the stroke surrounding the popup.
 */
  public Color getStrokeColor() { return new Color(BalloonPopupStyleModuleJNI.BalloonPopupStyle_getStrokeColor(swigCPtr, this), true); }

/**
 * Returns the width of the stroke surrounding the popup.<br>
 * @return The width of the stroke surrounding the popup in dp.
 */
  public int getStrokeWidth() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_getStrokeWidth(swigCPtr, this);
  }

/**
 * Returns the width of the triangle at the bottom of the popup.<br>
 * @return The width of the triangle at the bottom of the popup in dp.
 */
  public int getTriangleWidth() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_getTriangleWidth(swigCPtr, this);
  }

/**
 * Returns the height of the triangle at the bottom of the popup.<br>
 * @return The height of the triangle at the bottom of the popup in dp.
 */
  public int getTriangleHeight() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_getTriangleHeight(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return BalloonPopupStyleModuleJNI.BalloonPopupStyle_swigGetDirectorObject(swigCPtr, this);
  }

}
