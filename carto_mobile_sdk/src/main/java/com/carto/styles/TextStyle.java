/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.styles;

import com.carto.graphics.Color;
import com.carto.styles.LabelStyle;

/**
 * A style for text labels. Contains attributes for configuring how the text label is drawn on the screen.
 */
@com.carto.utils.DontObfuscate public class TextStyle extends LabelStyle {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public TextStyle(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(TextStyle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TextStyleModuleJNI.delete_TextStyle(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.styles.TextStyle swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.styles.TextStyleModuleJNI.TextStyle_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.styles.TextStyle) director;
    }

    String objClassName = com.carto.styles.TextStyleModuleJNI.TextStyle_swigGetClassName(cPtr, null);
    com.carto.styles.TextStyle objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.styles." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.styles.TextStyle) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Returns the font's color.<br>
 * @return The color of the font.
 */
  public Color getFontColor() { return new Color(TextStyleModuleJNI.TextStyle_getFontColor(swigCPtr, this), true); }

/**
 * Returns the font's name.<br>
 * @return The platform dependent name of the font.
 */
  public String getFontName() {
    return TextStyleModuleJNI.TextStyle_getFontName(swigCPtr, this);
  }

/**
 * Returns the text field variable to use.<br>
 * @return The text field variable.
 */
  public String getTextField() {
    return TextStyleModuleJNI.TextStyle_getTextField(swigCPtr, this);
  }

/**
 * Returns the font's size.<br>
 * @return The size of the font in points.
 */
  public float getFontSize() {
    return TextStyleModuleJNI.TextStyle_getFontSize(swigCPtr, this);
  }

/**
 * Returns the state of the 'break lines' flag.<br>
 * @return The state of the 'break lines' flag.
 */
  public boolean isBreakLines() {
    return TextStyleModuleJNI.TextStyle_isBreakLines(swigCPtr, this);
  }

/**
 * Returns the margins for the text.<br>
 * @return The margins for the text.
 */
  public TextMargins getTextMargins() { return new TextMargins(TextStyleModuleJNI.TextStyle_getTextMargins(swigCPtr, this), true); }

/**
 * Returns the color of the stroke.<br>
 * @return The color of the stroke around the text.
 */
  public Color getStrokeColor() { return new Color(TextStyleModuleJNI.TextStyle_getStrokeColor(swigCPtr, this), true); }

/**
 * Returns the width of the stroke.<br>
 * @return The width of the stroke around the text.
 */
  public float getStrokeWidth() {
    return TextStyleModuleJNI.TextStyle_getStrokeWidth(swigCPtr, this);
  }

/**
 * Returns the color of the border.<br>
 * @return The color of the border around the text.
 */
  public Color getBorderColor() { return new Color(TextStyleModuleJNI.TextStyle_getBorderColor(swigCPtr, this), true); }

/**
 * Returns the width of the border.<br>
 * @return The width of the border around the text.
 */
  public float getBorderWidth() {
    return TextStyleModuleJNI.TextStyle_getBorderWidth(swigCPtr, this);
  }

/**
 * Returns the background color of the text.<br>
 * @return The background color of the text.
 */
  public Color getBackgroundColor() { return new Color(TextStyleModuleJNI.TextStyle_getBackgroundColor(swigCPtr, this), true); }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return TextStyleModuleJNI.TextStyle_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return TextStyleModuleJNI.TextStyle_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return TextStyleModuleJNI.TextStyle_swigGetDirectorObject(swigCPtr, this);
  }

}
