/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.search;

import com.carto.geometry.Geometry;
import com.carto.projections.Projection;

/**
 * A search request description. Contains various search filters,<br>
 * including geometry proximity test, regular expression test for all attributes<br>
 * and a custom SQL-like search filter.
 */
public class SearchRequest {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public SearchRequest(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(SearchRequest obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        SearchRequestModuleJNI.delete_SearchRequest(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof SearchRequest) {
      return ((SearchRequest)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs an empty SearchRequest.
 */
  public SearchRequest() {
    this(SearchRequestModuleJNI.new_SearchRequest(), true);
  }

/**
 * Returns the string based search expression.<br>
 * If empty, then search expression is not used.<br>
 * @return The string based search expression.
 */
  public String getFilterExpression() {
    return SearchRequestModuleJNI.SearchRequest_getFilterExpression(swigCPtr, this);
  }

/**
 * Sets the string based search expression.<br>
 * A various conditions based on the fields and geometry can be used.<br>
 * For example, "name='X' OR (name='Y' AND gender IS NOT NULL)" is a valid expression,<br>
 * assuming elements contains fields 'name' and 'gender'.<br>
 * Note: This feature is currently in experimental state and may change in the future!<br>
 * @param expr The string based expression to use.
 */
  public void setFilterExpression(String expr) {
    SearchRequestModuleJNI.SearchRequest_setFilterExpression(swigCPtr, this, expr);
  }

/**
 * Returns the regular expression used to search all the fields.<br>
 * If empty, then the regular expression is not used.<br>
 * @return The regular expression used to search all the fields.
 */
  public String getRegexFilter() {
    return SearchRequestModuleJNI.SearchRequest_getRegexFilter(swigCPtr, this);
  }

/**
 * Sets the regular expression used to search all the fields.<br>
 * @param regex The regular expression to use.
 */
  public void setRegexFilter(String regex) {
    SearchRequestModuleJNI.SearchRequest_setRegexFilter(swigCPtr, this, regex);
  }

/**
 * Returns the geometry used for proximity search.<br>
 * @return The geometry used for proximity search.
 */
  public Geometry getGeometry() {
  long cPtr = SearchRequestModuleJNI.SearchRequest_getGeometry(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.geometry.Geometry.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the geometry used for proximity search.<br>
 * If geometry is set, then projection must be also defined.<br>
 * @param geometry The geometry used for proximity search.
 */
  public void setGeometry(Geometry geometry) {
    SearchRequestModuleJNI.SearchRequest_setGeometry(swigCPtr, this, Geometry.getCPtr(geometry), geometry);
  }

/**
 * Returns the projection to use for search geometry.<br>
 * @return The projection to use for search geometry.
 */
  public Projection getProjection() {
  long cPtr = SearchRequestModuleJNI.SearchRequest_getProjection(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.projections.Projection.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the projection to use for search geometry.<br>
 * @param projection The projection to use for search geometry.
 */
  public void setProjection(Projection projection) {
    SearchRequestModuleJNI.SearchRequest_setProjection(swigCPtr, this, Projection.getCPtr(projection), projection);
  }

/**
 * Returns the search radius for proximity search (in meters). The default is 0.<br>
 * @return The proximity search radius in meters.
 */
  public float getSearchRadius() {
    return SearchRequestModuleJNI.SearchRequest_getSearchRadius(swigCPtr, this);
  }

/**
 * Sets the search radius for proximity search (in meters). The default is 0.<br>
 * @param radius The proximity search radius in meters.
 */
  public void setSearchRadius(float radius) {
    SearchRequestModuleJNI.SearchRequest_setSearchRadius(swigCPtr, this, radius);
  }

/**
 * Creates a string representation of this request object, useful for logging.<br>
 * @return The string representation of this request object.
 */
  public String toString() {
    return SearchRequestModuleJNI.SearchRequest_toString(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return SearchRequestModuleJNI.SearchRequest_swigGetRawPtr(swigCPtr, this);
  }

}
