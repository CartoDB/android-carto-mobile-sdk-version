/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.search;

import com.carto.search.SearchRequest;
import com.carto.datasources.VectorDataSource;
import com.carto.vectorelements.VectorElement;
import com.carto.vectorelements.VectorElementVector;
import com.carto.projections.Projection;

/**
 * A search service for finding vector elements from the specified vector data source.<br>
 * Depending on the datasource, searching may perform network requests and must be executed in non-UI background thread.
 */
@com.carto.utils.DontObfuscate public class VectorElementSearchService {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public VectorElementSearchService(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(VectorElementSearchService obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        VectorElementSearchServiceModuleJNI.delete_VectorElementSearchService(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    VectorElementSearchServiceModuleJNI.VectorElementSearchService_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    VectorElementSearchServiceModuleJNI.VectorElementSearchService_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.search.VectorElementSearchService swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.search.VectorElementSearchServiceModuleJNI.VectorElementSearchService_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.search.VectorElementSearchService) director;
    }

    String objClassName = com.carto.search.VectorElementSearchServiceModuleJNI.VectorElementSearchService_swigGetClassName(cPtr, null);
    com.carto.search.VectorElementSearchService objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.search." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.search.VectorElementSearchService) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a VectorElementSearchService for the given vector data source.<br>
 * @param dataSource The vector data source to search from.
 */
  public VectorElementSearchService(VectorDataSource dataSource) {
    this(VectorElementSearchServiceModuleJNI.new_VectorElementSearchService(VectorDataSource.getCPtr(dataSource), dataSource), true);
    VectorElementSearchServiceModuleJNI.VectorElementSearchService_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

/**
 * Returns the vector data source of the search service.<br>
 * @return The vector data source of the search service.
 */
  public VectorDataSource getDataSource() {
  long cPtr = VectorElementSearchServiceModuleJNI.VectorElementSearchService_getDataSource(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.datasources.VectorDataSource.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the maximum number of results the search service returns.<br>
 * @return The maximum number of results the search service returns.
 */
  public int getMaxResults() {
    return VectorElementSearchServiceModuleJNI.VectorElementSearchService_getMaxResults(swigCPtr, this);
  }

/**
 * Sets the maximum number of results the search service returns.<br>
 * The default number of results is 1000.<br>
 * @param maxResults The new maximum number of results the geocoding service returns.
 */
  public void setMaxResults(int maxResults) {
    VectorElementSearchServiceModuleJNI.VectorElementSearchService_setMaxResults(swigCPtr, this, maxResults);
  }

/**
 * Searches for the vector elements specified by search request from the data source bound to the service.<br>
 * Depending on the data source, this method may perform slow IO operations and may need to be run in background thread.<br>
 * @param request The search request containing search filters.<br>
 * @return The resulting list of vector elements matching the request.
 */
  public VectorElementVector findElements(SearchRequest request) { return new VectorElementVector((getClass() == VectorElementSearchService.class) ? VectorElementSearchServiceModuleJNI.VectorElementSearchService_findElements(swigCPtr, this, SearchRequest.getCPtr(request), request) : VectorElementSearchServiceModuleJNI.VectorElementSearchService_findElementsSwigExplicitVectorElementSearchService(swigCPtr, this, SearchRequest.getCPtr(request), request), true); }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return VectorElementSearchServiceModuleJNI.VectorElementSearchService_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return VectorElementSearchServiceModuleJNI.VectorElementSearchService_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return VectorElementSearchServiceModuleJNI.VectorElementSearchService_swigGetDirectorObject(swigCPtr, this);
  }

}
