/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.packagemanager;

import com.carto.packagemanager.PackageMetaInfo;
import com.carto.packagemanager.PackageTileMask;
import com.carto.core.StringVector;

/**
 * Information about map package. This includes id, type, version, name, description and size.
 */
public class PackageInfo {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public PackageInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(PackageInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        PackageInfoModuleJNI.delete_PackageInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof PackageInfo) {
      return ((PackageInfo)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs a new package info instance.<br>
 * @param packageId The unique id of the package<br>
 * @param packageType The type of the package<br>
 * @param version The increasing version number of the package<br>
 * @param size Size of the package in bytes<br>
 * @param serverURL Location of the package<br>
 * @param tileMask The tile mask of the package<br>
 * @param metaInfo Package meta info
 */
  public PackageInfo(String packageId, PackageType packageType, int version, java.math.BigInteger size, String serverURL, PackageTileMask tileMask, PackageMetaInfo metaInfo) {
    this(PackageInfoModuleJNI.new_PackageInfo(packageId, packageType.swigValue(), version, size, serverURL, PackageTileMask.getCPtr(tileMask), tileMask, PackageMetaInfo.getCPtr(metaInfo), metaInfo), true);
  }

/**
 * Returns the internal package id. This should not be displayed to the user.<br>
 * @return The unique package id
 */
  public String getPackageId() {
    return PackageInfoModuleJNI.PackageInfo_getPackageId(swigCPtr, this);
  }

/**
 * Returns the package type.<br>
 * @return The package type (map, routing, etc)
 */
  public PackageType getPackageType() {
    return PackageType.swigToEnum(PackageInfoModuleJNI.PackageInfo_getPackageType(swigCPtr, this));
  }

/**
 * Returns the package version. This should not be displayed to the user.<br>
 * @return The increasing package version number
 */
  public int getVersion() {
    return PackageInfoModuleJNI.PackageInfo_getVersion(swigCPtr, this);
  }

/**
 * Returns the default name (short description) of the package. It is better to use getNames method instead, as each package may contain multiple names.<br>
 * The name returned is generic name or if that is not available, then English name.<br>
 * @return The list of names for the package in the specified language (if not available, generic/English names are returned)
 */
  public String getName() {
    return PackageInfoModuleJNI.PackageInfo_getName(swigCPtr, this);
  }

/**
 * Returns the names (short description) of the package. This can be displayed to the user. Each package may have multiple names, if the package has multiple classifications.<br>
 * Note: this information is dervied from package meta info, "name_XXX" fields.<br>
 * @param lang The language for the name<br>
 * @return The list of names for the package in the specified language (if not available, generic/English names are returned)
 */
  public StringVector getNames(String lang) { return new StringVector(PackageInfoModuleJNI.PackageInfo_getNames(swigCPtr, this, lang), true); }

/**
 * Returns the size of the package in bytes. This can be displayed to the user.<br>
 * @return The size of the package in bytes
 */
  public java.math.BigInteger getSize() {
    return PackageInfoModuleJNI.PackageInfo_getSize(swigCPtr, this);
  }

/**
 * Returns the encoded tile mask of the package. This is available for map packages but not for routing packages.<br>
 * This should not be displayed to the user.<br>
 * @return The tile mask of the package
 */
  public PackageTileMask getTileMask() {
    long cPtr = PackageInfoModuleJNI.PackageInfo_getTileMask(swigCPtr, this);
    return (cPtr == 0) ? null : new PackageTileMask(cPtr, true);
  }

/**
 * Returns package meta info. If package contains no meta info, null is returned.<br>
 * @return The package meta info.
 */
  public PackageMetaInfo getMetaInfo() {
    long cPtr = PackageInfoModuleJNI.PackageInfo_getMetaInfo(swigCPtr, this);
    return (cPtr == 0) ? null : new PackageMetaInfo(cPtr, true);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return PackageInfoModuleJNI.PackageInfo_swigGetRawPtr(swigCPtr, this);
  }

}
