/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.packagemanager;

import com.carto.packagemanager.PackageStatus;

/**
 * Base class for map package manager event listeners.<br>
 * Includes callbacks for package list events and individual package events.
 */
@com.carto.utils.DontObfuscate public class PackageManagerListener {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public PackageManagerListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(PackageManagerListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        PackageManagerListenerModuleJNI.delete_PackageManagerListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /** @hidden */
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  /** @hidden */
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    PackageManagerListenerModuleJNI.PackageManagerListener_change_ownership(this, swigCPtr, false);
  }

  /** @hidden */
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    PackageManagerListenerModuleJNI.PackageManagerListener_change_ownership(this, swigCPtr, true);
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.packagemanager.PackageManagerListener swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.packagemanager.PackageManagerListenerModuleJNI.PackageManagerListener_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.packagemanager.PackageManagerListener) director;
    }

    String objClassName = com.carto.packagemanager.PackageManagerListenerModuleJNI.PackageManagerListener_swigGetClassName(cPtr, null);
    com.carto.packagemanager.PackageManagerListener objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.packagemanager." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.packagemanager.PackageManagerListener) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Listener method that is called when server package list has been successfully updated.
 */
  public void onPackageListUpdated() {
    if (getClass() == PackageManagerListener.class) PackageManagerListenerModuleJNI.PackageManagerListener_onPackageListUpdated(swigCPtr, this); else PackageManagerListenerModuleJNI.PackageManagerListener_onPackageListUpdatedSwigExplicitPackageManagerListener(swigCPtr, this);
  }

/**
 * Listener method that is called when server package could not be downloaded or updated.
 */
  public void onPackageListFailed() {
    if (getClass() == PackageManagerListener.class) PackageManagerListenerModuleJNI.PackageManagerListener_onPackageListFailed(swigCPtr, this); else PackageManagerListenerModuleJNI.PackageManagerListener_onPackageListFailedSwigExplicitPackageManagerListener(swigCPtr, this);
  }

/**
 * Listener method that is called when a package status has changed.<br>
 * Information about the status of the package (current action, progress, etc) is explictly given with this event.<br>
 * @param id The id of the package whose status has changed<br>
 * @param version The version of the package whose status has changed<br>
 * @param status The current status of the package
 */
  public void onPackageStatusChanged(String id, int version, PackageStatus status) {
    if (getClass() == PackageManagerListener.class) PackageManagerListenerModuleJNI.PackageManagerListener_onPackageStatusChanged(swigCPtr, this, id, version, PackageStatus.getCPtr(status), status); else PackageManagerListenerModuleJNI.PackageManagerListener_onPackageStatusChangedSwigExplicitPackageManagerListener(swigCPtr, this, id, version, PackageStatus.getCPtr(status), status);
  }

/**
 * Listener method that is called when a package download has been cancelled.<br>
 * @param id The id of the package that has been cancelled<br>
 * @param version The version of the package that has been cancelled
 */
  public void onPackageCancelled(String id, int version) {
    if (getClass() == PackageManagerListener.class) PackageManagerListenerModuleJNI.PackageManagerListener_onPackageCancelled(swigCPtr, this, id, version); else PackageManagerListenerModuleJNI.PackageManagerListener_onPackageCancelledSwigExplicitPackageManagerListener(swigCPtr, this, id, version);
  }

/**
 * Listener method that is called when a package is successfully updated (downloaded or removed).<br>
 * @param id The id of the package that has been updated<br>
 * @param version The version of the package that has been updated
 */
  public void onPackageUpdated(String id, int version) {
    if (getClass() == PackageManagerListener.class) PackageManagerListenerModuleJNI.PackageManagerListener_onPackageUpdated(swigCPtr, this, id, version); else PackageManagerListenerModuleJNI.PackageManagerListener_onPackageUpdatedSwigExplicitPackageManagerListener(swigCPtr, this, id, version);
  }

/**
 * Listener method that is called when updating a package failed (network error, etc).<br>
 * @param id The id of the package that failed<br>
 * @param version The version of the package that failed<br>
 * @param errorType Reason or type of the failure
 */
  public void onPackageFailed(String id, int version, PackageErrorType errorType) {
    if (getClass() == PackageManagerListener.class) PackageManagerListenerModuleJNI.PackageManagerListener_onPackageFailed(swigCPtr, this, id, version, errorType.swigValue()); else PackageManagerListenerModuleJNI.PackageManagerListener_onPackageFailedSwigExplicitPackageManagerListener(swigCPtr, this, id, version, errorType.swigValue());
  }

/**
 * Listener method that is called when map style has been successfully updated.<br>
 * @param styleName The name of the style that was updated.
 */
  public void onStyleUpdated(String styleName) {
    if (getClass() == PackageManagerListener.class) PackageManagerListenerModuleJNI.PackageManagerListener_onStyleUpdated(swigCPtr, this, styleName); else PackageManagerListenerModuleJNI.PackageManagerListener_onStyleUpdatedSwigExplicitPackageManagerListener(swigCPtr, this, styleName);
  }

/**
 * Listener method that is called when map style could not be downloaded or updated.<br>
 * @param styleName The name of the style that could not be updated.
 */
  public void onStyleFailed(String styleName) {
    if (getClass() == PackageManagerListener.class) PackageManagerListenerModuleJNI.PackageManagerListener_onStyleFailed(swigCPtr, this, styleName); else PackageManagerListenerModuleJNI.PackageManagerListener_onStyleFailedSwigExplicitPackageManagerListener(swigCPtr, this, styleName);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return PackageManagerListenerModuleJNI.PackageManagerListener_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return PackageManagerListenerModuleJNI.PackageManagerListener_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return PackageManagerListenerModuleJNI.PackageManagerListener_swigGetDirectorObject(swigCPtr, this);
  }

  public PackageManagerListener() {
    this(PackageManagerListenerModuleJNI.new_PackageManagerListener(), true);
    PackageManagerListenerModuleJNI.PackageManagerListener_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

}
