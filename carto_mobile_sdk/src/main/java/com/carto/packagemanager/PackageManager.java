/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.packagemanager;

import com.carto.core.MapPos;
import com.carto.core.MapBounds;
import com.carto.packagemanager.PackageInfo;
import com.carto.packagemanager.PackageMetaInfo;
import com.carto.packagemanager.PackageStatus;
import com.carto.packagemanager.PackageManagerListener;
import com.carto.packagemanager.PackageInfoVector;
import com.carto.projections.Projection;

/**
 * Base class for offline map package manager. Package manager supports downloading/removing packages.<br>
 * It can be queried about available packages and status of the packages. It works asynchronously in<br>
 * the background and can inform app when packages have been updated.<br>
 * It works persistently. If a package download is started and app is closed, the download will resume<br>
 * when the package manager is started next time.
 */
@com.carto.utils.DontObfuscate public class PackageManager {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public PackageManager(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(PackageManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        PackageManagerModuleJNI.delete_PackageManager(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.packagemanager.PackageManager swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.packagemanager.PackageManagerModuleJNI.PackageManager_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.packagemanager.PackageManager) director;
    }

    String objClassName = com.carto.packagemanager.PackageManagerModuleJNI.PackageManager_swigGetClassName(cPtr, null);
    com.carto.packagemanager.PackageManager objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.packagemanager." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.packagemanager.PackageManager) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof PackageManager) {
      return ((PackageManager)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs a new package manager, given URL for package list and data folder.<br>
 * The data folder must exist before creating a new package manager and it is assumed to be persistent.<br>
 * Note: the package manager must be explicitly started using start() method!<br>
 * @param packageListURL The URL that defines all packages.<br>
 * @param dataFolder The folder where downloaded packages are kept. It must exist and must be writable.<br>
 * @param serverEncKey Encryption key for server packages<br>
 * @param localEncKey Encryption key for local packages<br>
 * @throws java.lang.Exception If package manager fails to open or create package database.
 */
  public PackageManager(String packageListURL, String dataFolder, String serverEncKey, String localEncKey) throws java.io.IOException {
    this(PackageManagerModuleJNI.new_PackageManager(packageListURL, dataFolder, serverEncKey, localEncKey), true);
  }

/**
 * Returns the current listener for package manager events.<br>
 * @return The current listener or null if none is set.
 */
  public PackageManagerListener getPackageManagerListener() {
  long cPtr = PackageManagerModuleJNI.PackageManager_getPackageManagerListener(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.packagemanager.PackageManagerListener.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the package manager listener.<br>
 * @param listener The new package manager listener to use.
 */
  public void setPackageManagerListener(PackageManagerListener listener) {
    PackageManagerModuleJNI.PackageManager_setPackageManagerListener(swigCPtr, this, PackageManagerListener.getCPtr(listener), listener);
  }

/**
 * Starts the package manager. All previous tasks will be resumed after this.<br>
 * @return True if package manager was successfully started. False otherwise (can not create/access database).
 */
  public boolean start() {
    return PackageManagerModuleJNI.PackageManager_start(swigCPtr, this);
  }

/**
 * Stops the package manager. The stopping can be asynchronous or synchronous.<br>
 * @param wait If set to true, then synchronous stopping is performed and the operation may take a while.
 */
  public void stop(boolean wait) {
    PackageManagerModuleJNI.PackageManager_stop(swigCPtr, this, wait);
  }

/**
 * Returns the list of available server packages.<br>
 * Note that the list must be retrieved from the server first, using startPackageListDownload.<br>
 * @return The list of available server packages.
 */
  public PackageInfoVector getServerPackages() { return new PackageInfoVector(PackageManagerModuleJNI.PackageManager_getServerPackages(swigCPtr, this), true); }

/**
 * Returns the list of available local downloaded packages.<br>
 * @return The list of available local downloaded packages.
 */
  public PackageInfoVector getLocalPackages() { return new PackageInfoVector(PackageManagerModuleJNI.PackageManager_getLocalPackages(swigCPtr, this), true); }

/**
 * Returns the metainfo of server packages.<br>
 * @return The metainfo data about server packages, or null if no metainfo is available.
 */
  public PackageMetaInfo getServerPackageListMetaInfo() {
    long cPtr = PackageManagerModuleJNI.PackageManager_getServerPackageListMetaInfo(swigCPtr, this);
    return (cPtr == 0) ? null : new PackageMetaInfo(cPtr, true);
  }

/**
 * Returns the age of server package list. This method can be used to measure the time of the download and check whether the list should be updated.<br>
 * @return The age of server package list in seconds.
 */
  public int getServerPackageListAge() {
    return PackageManagerModuleJNI.PackageManager_getServerPackageListAge(swigCPtr, this);
  }

/**
 * Returns the specified server package.<br>
 * Note that the list must be retrieved from the server first, using startPackageListDownload.<br>
 * @param packageId The id of the package.<br>
 * @return The specified server package or null if it is not in the server package list.
 */
  public PackageInfo getServerPackage(String packageId) {
    long cPtr = PackageManagerModuleJNI.PackageManager_getServerPackage(swigCPtr, this, packageId);
    return (cPtr == 0) ? null : new PackageInfo(cPtr, true);
  }

/**
 * Returns the specified local package.<br>
 * @param packageId The id of the package.<br>
 * @return The specified local package or null if it can not be found in the local package list. Note that if the package is being downloaded, null is returned.
 */
  public PackageInfo getLocalPackage(String packageId) {
    long cPtr = PackageManagerModuleJNI.PackageManager_getLocalPackage(swigCPtr, this, packageId);
    return (cPtr == 0) ? null : new PackageInfo(cPtr, true);
  }

/**
 * Returns the status of the specified package.<br>
 * @param packageId The id of the package.<br>
 * @param version The version of the package. Use -1 for the latest version.<br>
 * @return The status of the package or null if it is not yet downloaded. If the package is currently being downloaded, its status is returned.
 */
  public PackageStatus getLocalPackageStatus(String packageId, int version) {
    long cPtr = PackageManagerModuleJNI.PackageManager_getLocalPackageStatus(swigCPtr, this, packageId, version);
    return (cPtr == 0) ? null : new PackageStatus(cPtr, true);
  }

/**
 * Suggests packages for given map position. Note that in order this to work, local package list must be available first.<br>
 * @param mapPos The map position.<br>
 * @param projection The projection for the map position.<br>
 * @return The sorted list of suggested packages (from the best to the worst). The list may contain downloaded packages.
 */
  public PackageInfoVector suggestPackages(MapPos mapPos, Projection projection) { return new PackageInfoVector(PackageManagerModuleJNI.PackageManager_suggestPackages(swigCPtr, this, MapPos.getCPtr(mapPos), mapPos, Projection.getCPtr(projection), projection), true); }

/**
 * Tests if the specified map area at specified zoom level is downloaded.<br>
 * @param mapBounds The area bounding box.<br>
 * @param zoom The zoom level to check.<br>
 * @param projection The projection for the bounding box.<br>
 * @return True if all required tiles are downloaded and available. False otherwise.
 */
  public boolean isAreaDownloaded(MapBounds mapBounds, int zoom, Projection projection) {
    return PackageManagerModuleJNI.PackageManager_isAreaDownloaded(swigCPtr, this, MapBounds.getCPtr(mapBounds), mapBounds, zoom, Projection.getCPtr(projection), projection);
  }

/**
 * Starts downloading package list asynchronously. When this task finishes, listener is called and server package list is updated.<br>
 * @return True if the package list will be downloaded and listener will be notified (if set). False if it can not be downloaded.
 */
  public boolean startPackageListDownload() {
    return PackageManagerModuleJNI.PackageManager_startPackageListDownload(swigCPtr, this);
  }

/**
 * Starts importing the specified package asynchronously. When this task finishes, listener is called and local package list is updated.<br>
 * Note 1: In general, package manager may need temporary storage equal to the size of the package during import. It is the responsibility of the app to perform such checks.<br>
 * Note 2: the package may not be deleted after this call, as the import is asynchronous operation. It is safe to delete the original file once import is complete (this is notified via manager listener).<br>
 * @param packageId The id of the package to download.<br>
 * @param version The version of the package.<br>
 * @param packageFileName The fully qualified path of the package. The file name may also refer to URL or asset (using 'asset://' prefix).<br>
 * @return True is the package will be imported.
 */
  public boolean startPackageImport(String packageId, int version, String packageFileName) {
    return PackageManagerModuleJNI.PackageManager_startPackageImport(swigCPtr, this, packageId, version, packageFileName);
  }

/**
 * Starts downloading specified package asynchronously. When this task finishes, listener is called and local package list is updated.<br>
 * Note: In general, package manager may need temporary storage equal to the size of the package during download. It is the responsibility of the app to perform such checks.<br>
 * @param packageId The id of the package to download.<br>
 * @return True is the package is available and will be downloaded. False if the package was not found.
 */
  public boolean startPackageDownload(String packageId) {
    return PackageManagerModuleJNI.PackageManager_startPackageDownload(swigCPtr, this, packageId);
  }

/**
 * Starts the removal of specified package asynchronously. When this task finishes, listener is called and local package list is updated.<br>
 * @param packageId The id of the package to remove.<br>
 * @return True is the package was found and will be removed. False if the package was not found.
 */
  public boolean startPackageRemove(String packageId) {
    return PackageManagerModuleJNI.PackageManager_startPackageRemove(swigCPtr, this, packageId);
  }

/**
 * Cancels the current/pending tasks involving of the specified package.<br>
 * @param packageId The id of the package to cancel.
 */
  public void cancelPackageTasks(String packageId) {
    PackageManagerModuleJNI.PackageManager_cancelPackageTasks(swigCPtr, this, packageId);
  }

/**
 * Sets the priority of the specific package.<br>
 * If the given priority is higher than priority of any other package, other operations will be paused and this package is processed immediately.<br>
 * If the given priority is set to negative value, package download will be paused until priority is reset to non-negative value.<br>
 * @param packageId The id of the download package.<br>
 * @param priority The priority of the download package. If it is less than zero, package download is paused.
 */
  public void setPackagePriority(String packageId, int priority) {
    PackageManagerModuleJNI.PackageManager_setPackagePriority(swigCPtr, this, packageId, priority);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return PackageManagerModuleJNI.PackageManager_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return PackageManagerModuleJNI.PackageManager_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return PackageManagerModuleJNI.PackageManager_swigGetDirectorObject(swigCPtr, this);
  }

}
