/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.routing;

import com.carto.core.MapPos;
import com.carto.core.MapPosVector;
import com.carto.core.Variant;
import com.carto.projections.Projection;

/**
 * A class that defines required attributes for route matching.
 */
public class RouteMatchingRequest {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public RouteMatchingRequest(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(RouteMatchingRequest obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RouteMatchingRequestModuleJNI.delete_RouteMatchingRequest(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof RouteMatchingRequest) {
      return ((RouteMatchingRequest)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs a new RouteMatchingRequest instance from projection, measured points and accuracy.<br>
 * @param projection The projection of the points.<br>
 * @param points The list of points to match. Must contains at least 1 element.<br>
 * @param accuracy Accuracy of the points in meters.
 */
  public RouteMatchingRequest(Projection projection, MapPosVector points, float accuracy) {
    this(RouteMatchingRequestModuleJNI.new_RouteMatchingRequest(Projection.getCPtr(projection), projection, MapPosVector.getCPtr(points), points, accuracy), true);
  }

/**
 * Returns the projection of the points in the request.<br>
 * @return The projection of the request.
 */
  public Projection getProjection() {
  long cPtr = RouteMatchingRequestModuleJNI.RouteMatchingRequest_getProjection(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.projections.Projection.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the measured points of the request.<br>
 * @return The measured points of the request.
 */
  public MapPosVector getPoints() { return new MapPosVector(RouteMatchingRequestModuleJNI.RouteMatchingRequest_getPoints(swigCPtr, this), true); }

/**
 * Returns the accuracy of the points in the request.<br>
 * @return The accuracy of the points in the request.
 */
  public float getAccuracy() {
    return RouteMatchingRequestModuleJNI.RouteMatchingRequest_getAccuracy(swigCPtr, this);
  }

/**
 * Returns the parameter value for the given routing point.<br>
 * @param index The routing point index.<br>
 * @param param The name of the parameter.<br>
 * @return The value of the specified parameter of the given routing point. If the parameter does not exist, empty variant is returned.
 */
  public Variant getPointParameter(int index, String param) { return new Variant(RouteMatchingRequestModuleJNI.RouteMatchingRequest_getPointParameter(swigCPtr, this, index, param), true); }

/**
 * Sets the parameter value for the given routing point.<br>
 * This is currently supported by Valhalla routing engine and can be used to specify initial or final heading, for example.<br>
 * @param index The routing point index.<br>
 * @param param The name of the parameter to set.<br>
 * @param value The new value for the parameter of the given routing point.
 */
  public void setPointParameter(int index, String param, Variant value) {
    RouteMatchingRequestModuleJNI.RouteMatchingRequest_setPointParameter(swigCPtr, this, index, param, Variant.getCPtr(value), value);
  }

/**
 * Returns the custom parameter value of the request.<br>
 * @param param The name of the parameter to return.<br>
 * @return The value of the parameter. If the parameter does not exist, empty variant is returned.
 */
  public Variant getCustomParameter(String param) { return new Variant(RouteMatchingRequestModuleJNI.RouteMatchingRequest_getCustomParameter(swigCPtr, this, param), true); }

/**
 * Sets a custom parameter for the the request.<br>
 * @param param The name of the parameter. For example, "trace_options.search_radius".<br>
 * @param value The new value for the parameter.
 */
  public void setCustomParameter(String param, Variant value) {
    RouteMatchingRequestModuleJNI.RouteMatchingRequest_setCustomParameter(swigCPtr, this, param, Variant.getCPtr(value), value);
  }

/**
 * Creates a string representation of this request object, useful for logging.<br>
 * @return The string representation of this request object.
 */
  public String toString() {
    return RouteMatchingRequestModuleJNI.RouteMatchingRequest_toString(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return RouteMatchingRequestModuleJNI.RouteMatchingRequest_swigGetRawPtr(swigCPtr, this);
  }

}
