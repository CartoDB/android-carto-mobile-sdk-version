/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.routing;

import com.carto.core.MapPos;
import com.carto.core.Variant;

/**
 * A class that defines a routing instruction at specified position in the path.
 */
public class RoutingInstruction {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public RoutingInstruction(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(RoutingInstruction obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RoutingInstructionModuleJNI.delete_RoutingInstruction(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof RoutingInstruction) {
      return ((RoutingInstruction)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs a new RoutingInstruction instance with all values set to default.
 */
  public RoutingInstruction() {
    this(RoutingInstructionModuleJNI.new_RoutingInstruction__SWIG_0(), true);
  }

/**
 * Constructs a new RoutingInstruction instance given all instruction attributes.<br>
 * @param action Action to take.<br>
 * @param pointIndex Instruction starting point index in the point list.<br>
 * @param streetName Street name.<br>
 * @param instruction The optional instruction description.<br>
 * @param turnAngle Turn angle in degrees.<br>
 * @param azimuth Azimuth in degrees.<br>
 * @param distance The distance to move along the given street in meters.<br>
 * @param time The approximate duration of the instruction in seconds.<br>
 * @param geometryTag The geometry tag associated with the instruction.
 */
  public RoutingInstruction(RoutingAction action, int pointIndex, String streetName, String instruction, float turnAngle, float azimuth, double distance, double time, Variant geometryTag) {
    this(RoutingInstructionModuleJNI.new_RoutingInstruction__SWIG_1(action.swigValue(), pointIndex, streetName, instruction, turnAngle, azimuth, distance, time, Variant.getCPtr(geometryTag), geometryTag), true);
  }

/**
 * Returns the action of the instruction.<br>
 * @return The action to take.
 */
  public RoutingAction getAction() {
    return RoutingAction.swigToEnum(RoutingInstructionModuleJNI.RoutingInstruction_getAction(swigCPtr, this));
  }

/**
 * Returns the index of the first geometry point in external point array.<br>
 * @return The point index.
 */
  public int getPointIndex() {
    return RoutingInstructionModuleJNI.RoutingInstruction_getPointIndex(swigCPtr, this);
  }

/**
 * Returns the name of street.<br>
 * @return The name of the street.
 */
  public String getStreetName() {
    return RoutingInstructionModuleJNI.RoutingInstruction_getStreetName(swigCPtr, this);
  }

/**
 * Returns the optional instruction description. This info is dependent on the routing engine (can be empty) and may be localized.<br>
 * @return The optional instruction description.
 */
  public String getInstruction() {
    return RoutingInstructionModuleJNI.RoutingInstruction_getInstruction(swigCPtr, this);
  }

/**
 * Returns the turn angle of the action.<br>
 * @return The turn angle in degrees.
 */
  public float getTurnAngle() {
    return RoutingInstructionModuleJNI.RoutingInstruction_getTurnAngle(swigCPtr, this);
  }

/**
 * Returns the azimuth of the initial position.<br>
 * @return The azimuth in degrees.
 */
  public float getAzimuth() {
    return RoutingInstructionModuleJNI.RoutingInstruction_getAzimuth(swigCPtr, this);
  }

/**
 * Returns the distance to move along the given street.<br>
 * @return The distance to move in meters.
 */
  public double getDistance() {
    return RoutingInstructionModuleJNI.RoutingInstruction_getDistance(swigCPtr, this);
  }

/**
 * Returns the time approximate duration of the instruction.<br>
 * @return The approximate duration of the instruction in seconds.
 */
  public double getTime() {
    return RoutingInstructionModuleJNI.RoutingInstruction_getTime(swigCPtr, this);
  }

/**
 * Returns the geometry tag associated with the instructions.<br>
 * @return The geometry tag associated with the instructions.
 */
  public Variant getGeometryTag() { return new Variant(RoutingInstructionModuleJNI.RoutingInstruction_getGeometryTag(swigCPtr, this), true); }

/**
 * Creates a string representation of this instruction, useful for logging.<br>
 * @return The string representation of this instruction.
 */
  public String toString() {
    return RoutingInstructionModuleJNI.RoutingInstruction_toString(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return RoutingInstructionModuleJNI.RoutingInstruction_swigGetRawPtr(swigCPtr, this);
  }

}
