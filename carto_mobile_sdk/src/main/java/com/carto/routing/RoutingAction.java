/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.routing;

/**
 * Routing action type.
 */
public enum RoutingAction {
/**
 * Head on, start the route.
 */
  ROUTING_ACTION_HEAD_ON,
/**
 * Finish the route.
 */
  ROUTING_ACTION_FINISH,
/**
 * Continue along the given street, do not turn.
 */
  ROUTING_ACTION_NO_TURN,
/**
 * Go straight.
 */
  ROUTING_ACTION_GO_STRAIGHT,
/**
 * Turn right.
 */
  ROUTING_ACTION_TURN_RIGHT,
/**
 * Do an u-turn.
 */
  ROUTING_ACTION_UTURN,
/**
 * Turn left.
 */
  ROUTING_ACTION_TURN_LEFT,
/**
 * Reached given via point. If this is the final point, FINISH action is used instead.
 */
  ROUTING_ACTION_REACH_VIA_LOCATION,
/**
 * Enter roundabout. Used by Valhalla and OSRM.
 */
  ROUTING_ACTION_ENTER_ROUNDABOUT,
/**
 * Leave roundabout. Used by Valhalla and OSRM.
 */
  ROUTING_ACTION_LEAVE_ROUNDABOUT,
/**
 * Continue along the roundabout. Only used by OSRM.
 */
  ROUTING_ACTION_STAY_ON_ROUNDABOUT,
/**
 * Start at the end of the street. Currently used only by OSRM.
 */
  ROUTING_ACTION_START_AT_END_OF_STREET,
/**
 * Enter street while moving against the allowed direction. Only used by OSRM.
 */
  ROUTING_ACTION_ENTER_AGAINST_ALLOWED_DIRECTION,
/**
 * Leave the street while moving aginst the allowed direction. Only used by OSRM.
 */
  ROUTING_ACTION_LEAVE_AGAINST_ALLOWED_DIRECTION,
/**
 * Go up. Only used by the SGRE.
 */
  ROUTING_ACTION_GO_UP,
/**
 * Go down. Only used by SGRE.
 */
  ROUTING_ACTION_GO_DOWN,
/**
 * Wait. Only used by SGRE.
 */
  ROUTING_ACTION_WAIT,
/**
 * Enter ferry. Only used by Valhalla.
 */
  ROUTING_ACTION_ENTER_FERRY,
/**
 * Leave ferry. Only used by Valhalla.
 */
  ROUTING_ACTION_LEAVE_FERRY;

  public final int swigValue() {
    return swigValue;
  }

  public static RoutingAction swigToEnum(int swigValue) {
    RoutingAction[] swigValues = RoutingAction.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (RoutingAction swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + RoutingAction.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private RoutingAction() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private RoutingAction(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private RoutingAction(RoutingAction swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

