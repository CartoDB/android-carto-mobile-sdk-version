/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.graphics;

/**
 * Possible image formats.
 */
public enum ColorFormat {
/**
 * Options for identifiny unsupported image formats.
 */
  COLOR_FORMAT_UNSUPPORTED(BitmapModuleJNI.COLOR_FORMAT_UNSUPPORTED_get()),
/**
 * An image format that describes images with a single color channel.
 */
  COLOR_FORMAT_GRAYSCALE(BitmapModuleJNI.COLOR_FORMAT_GRAYSCALE_get()),
/**
 * An image format that describes images with two channels, one for color and the other<br>
 * for alpha.
 */
  COLOR_FORMAT_GRAYSCALE_ALPHA(BitmapModuleJNI.COLOR_FORMAT_GRAYSCALE_ALPHA_get()),
/**
 * An image format that describes images with three channels, one for each color: red, green and blue.
 */
  COLOR_FORMAT_RGB(BitmapModuleJNI.COLOR_FORMAT_RGB_get()),
/**
 * An image format that describes images with four channels, one for each color: red, green and blue<br>
 * and one for alpha.
 */
  COLOR_FORMAT_RGBA(BitmapModuleJNI.COLOR_FORMAT_RGBA_get()),
/**
 * An image format that describes images with four channels, one for each color: blue, green and red<br>
 * and one for alpha. This color format will be converted to RGBA.
 */
  COLOR_FORMAT_BGRA(BitmapModuleJNI.COLOR_FORMAT_BGRA_get()),
/**
 * An image format that describes images with four channels, one for each color: red, green, and blue<br>
 * and one for alpha. Each color is only four bits. This color format will be converted to RGBA.
 */
  COLOR_FORMAT_RGBA_4444(BitmapModuleJNI.COLOR_FORMAT_RGBA_4444_get()),
/**
 * An image format that describes images with three channels, one for each color: red, green, and blue.<br>
 * Red and blue colors are each packed into 5 bits, green into 6 bits. This color format will be converted to RGB.
 */
  COLOR_FORMAT_RGB_565(BitmapModuleJNI.COLOR_FORMAT_RGB_565_get());

  public final int swigValue() {
    return swigValue;
  }

  public static ColorFormat swigToEnum(int swigValue) {
    ColorFormat[] swigValues = ColorFormat.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (ColorFormat swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + ColorFormat.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private ColorFormat() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private ColorFormat(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private ColorFormat(ColorFormat swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

