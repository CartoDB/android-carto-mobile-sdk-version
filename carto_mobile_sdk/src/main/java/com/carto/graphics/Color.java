/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.graphics;

/**
 * A color represented in RGBA space, alpha is expected to be non-premultiplied.
 */
public class Color {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public Color(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(Color obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ColorModuleJNI.delete_Color(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof Color) {
      return equalsInternal((Color)obj);
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return hashCodeInternal();
  }


/**
 * Constructs a completely opaque black color object.
 */
  public Color() {
    this(ColorModuleJNI.new_Color__SWIG_0(), true);
  }

/**
 * Constructs a map color object from the red, green, blue and alpha components.<br>
 * Alpha component is interpreted as non-premultiplied transparency value,<br>
 * thus to make half-transparent green, use Color(0, 255, 0, 128).<br>
 * @param r The red component. Must be between 0 and 255.<br>
 * @param g The green component. Must be between 0 and 255.<br>
 * @param b The blue component. Must be between 0 and 255.<br>
 * @param a The alpha component. Must be between 0 and 255.
 */
  public Color(short r, short g, short b, short a) {
    this(ColorModuleJNI.new_Color__SWIG_1(r, g, b, a), true);
  }

/**
 * Constructs a map color object from a 32-bit encoded integer. The format is expected to be ARGB.<br>
 * @param color The color encoded into 32-bit integer as ARGB.
 */
  public Color(int color) {
    this(ColorModuleJNI.new_Color__SWIG_2(color), true);
  }

/**
 * Checks for equality between this and another map color.<br>
 * @param color The other map vector.<br>
 * @return True if equal.
 */
  private boolean equalsInternal(Color color) {
    return ColorModuleJNI.Color_equalsInternal(swigCPtr, this, Color.getCPtr(color), color);
  }

/**
 * Returns the red component of this map color.<br>
 * @return The red component in the [0..255] range.
 */
  public short getR() {
    return ColorModuleJNI.Color_getR(swigCPtr, this);
  }

/**
 * Returns the green component of this map color.<br>
 * @return The green component in the [0..255] range.
 */
  public short getG() {
    return ColorModuleJNI.Color_getG(swigCPtr, this);
  }

/**
 * Returns the blue component of this map color.<br>
 * @return The blue component in the [0..255] range.
 */
  public short getB() {
    return ColorModuleJNI.Color_getB(swigCPtr, this);
  }

/**
 * Returns the alpha component of this map color.<br>
 * @return The alpha component in the [0..255] range.
 */
  public short getA() {
    return ColorModuleJNI.Color_getA(swigCPtr, this);
  }

/**
 * Encodes this map color into 32-bit integer value (ARGB format).<br>
 * @return The encoded 32-bit integer representation of this map color.
 */
  public int getARGB() {
    return ColorModuleJNI.Color_getARGB(swigCPtr, this);
  }

/**
 * Returns the hash value of this object.<br>
 * @return The hash value of this object.
 */
  private int hashCodeInternal() {
    return ColorModuleJNI.Color_hashCodeInternal(swigCPtr, this);
  }

/**
 * Creates a string representation of this map color, useful for logging.<br>
 * @return The string representation of this map color.
 */
  public String toString() {
    return ColorModuleJNI.Color_toString(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return ColorModuleJNI.Color_swigGetRawPtr(swigCPtr, this);
  }

}
