/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.graphics;

import com.carto.core.MapPos;
import com.carto.core.ScreenPos;
import com.carto.core.MapVec;
import com.carto.components.Options;
import com.carto.projections.Projection;

/**
 * A class containing various view parameters for a view state.
 */
public class ViewState {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public ViewState(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(ViewState obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ViewStateModuleJNI.delete_ViewState(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof ViewState) {
      return ((ViewState)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Returns the camera tilt angle.<br>
 * @return The camera tilt angle in degrees.
 */
  public float getTilt() {
    return ViewStateModuleJNI.ViewState_getTilt(swigCPtr, this);
  }

/**
 * Returns the camera zoom level.<br>
 * @return The camera zoom level.
 */
  public float getZoom() {
    return ViewStateModuleJNI.ViewState_getZoom(swigCPtr, this);
  }

/**
 * Returns the state of the camera changed flag.<br>
 * @return True if camera has changed since the last frame.
 */
  public boolean isCameraChanged() {
    return ViewStateModuleJNI.ViewState_isCameraChanged(swigCPtr, this);
  }

/**
 * Returns the camera rotation angle.<br>
 * @return The camera rotation angle in degrees.
 */
  public float getRotation() {
    return ViewStateModuleJNI.ViewState_getRotation(swigCPtr, this);
  }

/**
 * Returns the distance between the focus and the camera position, when the zoom level is set to 0.<br>
 * This parameter depends on the screen size, DPI, tile draw size and field of view settings.<br>
 * @return The distance between focus to camera position, when zoom level = 0.
 */
  public float getZoom0Distance() {
    return ViewStateModuleJNI.ViewState_getZoom0Distance(swigCPtr, this);
  }

/**
 * Returns the width of the map screen.<br>
 * @return The map screen width.
 */
  public int getWidth() {
    return ViewStateModuleJNI.ViewState_getWidth(swigCPtr, this);
  }

/**
 * Returns the height of the map screen.<br>
 * @return The map screen height.
 */
  public int getHeight() {
    return ViewStateModuleJNI.ViewState_getHeight(swigCPtr, this);
  }

/**
 * Returns the aspect ratio of the map screen. Equal to width / height.<br>
 * @return The aspect ratio of the map screen.
 */
  public float getAspectRatio() {
    return ViewStateModuleJNI.ViewState_getAspectRatio(swigCPtr, this);
  }

/**
 * Returns the near plane distance.<br>
 * @return The new plane distance.
 */
  public float getNear() {
    return ViewStateModuleJNI.ViewState_getNear(swigCPtr, this);
  }

/**
 * Returns the far plane distance.<br>
 * @return The far plane distance.
 */
  public float getFar() {
    return ViewStateModuleJNI.ViewState_getFar(swigCPtr, this);
  }

/**
 * Returns the vertical field of view angle.<br>
 * @return The vertical field of view angle in degrees.
 */
  public int getFOVY() {
    return ViewStateModuleJNI.ViewState_getFOVY(swigCPtr, this);
  }

/**
 * Returns a value that is used for converting display independent pixels (dp) to pixels (px).<br>
 * This values depends on the screen density.<br>
 * @return The dp to px value.
 */
  public float getDPToPX() {
    return ViewStateModuleJNI.ViewState_getDPToPX(swigCPtr, this);
  }

/**
 * Returns the dots per inch parameter of the screen.<br>
 * @return The screen DPI parameter.
 */
  public float getDPI() {
    return ViewStateModuleJNI.ViewState_getDPI(swigCPtr, this);
  }

/**
 * Returns the conversion ratio between internal map units and screen pixels. This parameter is dependent<br>
 * on the zoom level and other screen parameters.<br>
 * @return The conversion ratio between internal map units and screen pixels.
 */
  public float getUnitToPXCoef() {
    return ViewStateModuleJNI.ViewState_getUnitToPXCoef(swigCPtr, this);
  }

/**
 * Returns the conversion ratio between internal map units and screen density independent pixels (DP or DIP). <br>
 * This parameter is dependent on the zoom level, DPI and other screen parameters.<br>
 * @return The conversion ratio between internal map units and screen density independent pixels.
 */
  public float getUnitToDPCoef() {
    return ViewStateModuleJNI.ViewState_getUnitToDPCoef(swigCPtr, this);
  }

/**
 * Returns the screen width.<br>
 * @return The current screen width.
 */
  public int getScreenWidth() {
    return ViewStateModuleJNI.ViewState_getScreenWidth(swigCPtr, this);
  }

/**
 * Returns the screen height.<br>
 * @return The current screen height.
 */
  public int getScreenHeight() {
    return ViewStateModuleJNI.ViewState_getScreenHeight(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return ViewStateModuleJNI.ViewState_swigGetRawPtr(swigCPtr, this);
  }

}
