/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.geometry;

import com.carto.core.MapPos;
import com.carto.core.MapPosVector;
import com.carto.core.MapPosVectorVector;
import com.carto.geometry.Geometry;

/**
 * Polygon geometry defined by an outer ring and optional multiple inner rings (holes).
 */
@com.carto.utils.DontObfuscate public class PolygonGeometry extends Geometry {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public PolygonGeometry(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(PolygonGeometry obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        PolygonGeometryModuleJNI.delete_PolygonGeometry(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.geometry.PolygonGeometry swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.geometry.PolygonGeometryModuleJNI.PolygonGeometry_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.geometry.PolygonGeometry) director;
    }

    String objClassName = com.carto.geometry.PolygonGeometryModuleJNI.PolygonGeometry_swigGetClassName(cPtr, null);
    com.carto.geometry.PolygonGeometry objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.geometry." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.geometry.PolygonGeometry) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


/**
 * Constructs a PolygonGeometry objects from an outer ring.<br>
 * @param poses The list of map positions defining the outer ring.
 */
  public PolygonGeometry(MapPosVector poses) {
    this(PolygonGeometryModuleJNI.new_PolygonGeometry__SWIG_0(MapPosVector.getCPtr(poses), poses), true);
  }

/**
 * Constructs a PolygonGeometry objects from an outer ring and list of inner rings (holes).<br>
 * @param poses The list of map positions defining the outer ring.<br>
 * @param holes The list of map position lists defining the inner rings.
 */
  public PolygonGeometry(MapPosVector poses, MapPosVectorVector holes) {
    this(PolygonGeometryModuleJNI.new_PolygonGeometry__SWIG_1(MapPosVector.getCPtr(poses), poses, MapPosVectorVector.getCPtr(holes), holes), true);
  }

/**
 * Constructs a PolygonGeometry objects from a list of rings.<br>
 * It is assumed the the first ring is outer ring and all other rings are inner rings.<br>
 * @param rings The list of map position lists defining the rings
 */
  public PolygonGeometry(MapPosVectorVector rings) {
    this(PolygonGeometryModuleJNI.new_PolygonGeometry__SWIG_2(MapPosVectorVector.getCPtr(rings), rings), true);
  }

  public MapPos getCenterPos() { return new MapPos(PolygonGeometryModuleJNI.PolygonGeometry_getCenterPos(swigCPtr, this), true); }

/**
 * Returns the list of map positions defining the outer ring of the polygon.<br>
 * @return The list of map positions defining the outer ring of the polygon.
 */
  public MapPosVector getPoses() { return new MapPosVector(PolygonGeometryModuleJNI.PolygonGeometry_getPoses(swigCPtr, this), true); }

/**
 * Returns the list of map position lists defining the inner rings of the polygon (holes).<br>
 * @return The list of map position lists defining the inner rings of the polygon (holes).
 */
  public MapPosVectorVector getHoles() { return new MapPosVectorVector(PolygonGeometryModuleJNI.PolygonGeometry_getHoles(swigCPtr, this), true); }

/**
 * Returns the list of map position lists defining the rings of the polygon.<br>
 * @return The list of map position lists defining the rings of the polygon.
 */
  public MapPosVectorVector getRings() { return new MapPosVectorVector(PolygonGeometryModuleJNI.PolygonGeometry_getRings(swigCPtr, this), true); }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return PolygonGeometryModuleJNI.PolygonGeometry_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return PolygonGeometryModuleJNI.PolygonGeometry_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return PolygonGeometryModuleJNI.PolygonGeometry_swigGetDirectorObject(swigCPtr, this);
  }

}
