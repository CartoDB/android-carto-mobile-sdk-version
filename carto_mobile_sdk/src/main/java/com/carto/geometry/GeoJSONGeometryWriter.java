/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.geometry;

import com.carto.geometry.Feature;
import com.carto.geometry.FeatureCollection;
import com.carto.geometry.Geometry;
import com.carto.projections.Projection;

/**
 * A GeoJSON writer. Generates human-readable GeoJSON representation of the geometry, feature or feature collection.<br>
 * Supports both 2D and 3D coordinate serialization.
 */
public class GeoJSONGeometryWriter {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public GeoJSONGeometryWriter(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(GeoJSONGeometryWriter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GeoJSONGeometryWriterModuleJNI.delete_GeoJSONGeometryWriter(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

/**
 * Constructs a new GeoJSONGeometryWriter object with default settings.
 */
  public GeoJSONGeometryWriter() {
    this(GeoJSONGeometryWriterModuleJNI.new_GeoJSONGeometryWriter(), true);
  }

/**
 * Returns the current source projection. If source projection is set, all geometry<br>
 * coordinates will be converted from given coordinate system to WGS84.<br>
 * @return The current source projection or null.
 */
  public Projection getSourceProjection() {
  long cPtr = GeoJSONGeometryWriterModuleJNI.GeoJSONGeometryWriter_getSourceProjection(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.projections.Projection.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Sets the current source projection. If source projection is set, all geometry<br>
 * coordinates will be converted from given coordinate system to WGS84.<br>
 * @param proj The new source projection or null.
 */
  public void setSourceProjection(Projection proj) {
    GeoJSONGeometryWriterModuleJNI.GeoJSONGeometryWriter_setSourceProjection(swigCPtr, this, Projection.getCPtr(proj), proj);
  }

/**
 * Returns the state of Z coordinate serialization.<br>
 * @return True if Z coordinate is stored in GeoJSON output, false otherwise. The default is false.
 */
  public boolean getZ() {
    return GeoJSONGeometryWriterModuleJNI.GeoJSONGeometryWriter_getZ(swigCPtr, this);
  }

/**
 * Sets the state of Z coordinate serialization.<br>
 * @param z True when Z coordinate should be serialized, false otherwise.
 */
  public void setZ(boolean z) {
    GeoJSONGeometryWriterModuleJNI.GeoJSONGeometryWriter_setZ(swigCPtr, this, z);
  }

/**
 * Creates a GeoJSON string corresponding to the specified geometry.<br>
 * @param geometry The geometry to write.<br>
 * @return The corresponding GeoJSON string.<br>
 * @throws java.lang.Exception If string could not be generated.
 */
  public String writeGeometry(Geometry geometry) {
    return GeoJSONGeometryWriterModuleJNI.GeoJSONGeometryWriter_writeGeometry(swigCPtr, this, Geometry.getCPtr(geometry), geometry);
  }

/**
 * Creates a GeoJSON string corresponding to the specified feature.<br>
 * @param feature The feature to write.<br>
 * @return The corresponding GeoJSON string.<br>
 * @throws java.lang.Exception If string could not be generated.
 */
  public String writeFeature(Feature feature) {
    return GeoJSONGeometryWriterModuleJNI.GeoJSONGeometryWriter_writeFeature(swigCPtr, this, Feature.getCPtr(feature), feature);
  }

/**
 * Creates a GeoJSON string corresponding to the specified feature collection.<br>
 * @param featureCollection The feature collection to write.<br>
 * @return The corresponding GeoJSON string.<br>
 * @throws java.lang.Exception If string could not be generated.
 */
  public String writeFeatureCollection(FeatureCollection featureCollection) {
    return GeoJSONGeometryWriterModuleJNI.GeoJSONGeometryWriter_writeFeatureCollection(swigCPtr, this, FeatureCollection.getCPtr(featureCollection), featureCollection);
  }

}
