/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.geometry;

import com.carto.core.BinaryData;
import com.carto.geometry.Geometry;

/**
 * A WKB writer. Generates binary version of the Well Known Text (WKT) representation of the geometry.<br>
 * Supports both 2D and 3D coordinate serialization and big- and little-endian representations.
 */
public class WKBGeometryWriter {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public WKBGeometryWriter(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(WKBGeometryWriter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        WKBGeometryWriterModuleJNI.delete_WKBGeometryWriter(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

/**
 * Constructs a new WKBGeometryWriter objects with default settings.
 */
  public WKBGeometryWriter() {
    this(WKBGeometryWriterModuleJNI.new_WKBGeometryWriter(), true);
  }

/**
 * Returns the endianness of output format.<br>
 * @return True when big-endian representation is used, false if little-endian. The default is little-endian.
 */
  public boolean getBigEndian() {
    return WKBGeometryWriterModuleJNI.WKBGeometryWriter_getBigEndian(swigCPtr, this);
  }

/**
 * Sets the endianness of output format.<br>
 * @param bigEndian True if big-endian representation should be used, false if little-endian.
 */
  public void setBigEndian(boolean bigEndian) {
    WKBGeometryWriterModuleJNI.WKBGeometryWriter_setBigEndian(swigCPtr, this, bigEndian);
  }

/**
 * Returns the state of Z coordinate serialization.<br>
 * @return True if Z coordinate is stored in WKB output, false otherwise. The default is false.
 */
  public boolean getZ() {
    return WKBGeometryWriterModuleJNI.WKBGeometryWriter_getZ(swigCPtr, this);
  }

/**
 * Sets the state of Z coordinate serialization.<br>
 * @param z True when Z coordinate should be serialized, false otherwise.
 */
  public void setZ(boolean z) {
    WKBGeometryWriterModuleJNI.WKBGeometryWriter_setZ(swigCPtr, this, z);
  }

/**
 * Creates a WKB data corresponding to the specified geometry.<br>
 * @param geometry The geometry to write.<br>
 * @return The corresponding WKB data.<br>
 * @throws java.lang.Exception If writing fails.
 */
  public BinaryData writeGeometry(Geometry geometry) {
    long cPtr = WKBGeometryWriterModuleJNI.WKBGeometryWriter_writeGeometry(swigCPtr, this, Geometry.getCPtr(geometry), geometry);
    return (cPtr == 0) ? null : new BinaryData(cPtr, true);
  }

}
