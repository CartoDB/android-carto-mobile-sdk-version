/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.geometry;

import com.carto.core.MapTile;
import com.carto.core.Variant;
import com.carto.geometry.Feature;

/**
 * A vector tile feature consisting of id, layer, geometry and properties.
 */
@com.carto.utils.DontObfuscate public class VectorTileFeature extends Feature {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public VectorTileFeature(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(VectorTileFeature obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        VectorTileFeatureModuleJNI.delete_VectorTileFeature(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.geometry.VectorTileFeature swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.geometry.VectorTileFeatureModuleJNI.VectorTileFeature_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.geometry.VectorTileFeature) director;
    }

    String objClassName = com.carto.geometry.VectorTileFeatureModuleJNI.VectorTileFeature_swigGetClassName(cPtr, null);
    com.carto.geometry.VectorTileFeature objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.geometry." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.geometry.VectorTileFeature) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof VectorTileFeature) {
      return ((VectorTileFeature)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs a VectorTileFeature object from id, layer name, geometry and properties.<br>
 * @param id The id of the feature.<br>
 * @param mapTile The map tile of this feature<br>
 * @param layerName The name of the layer of the feature.<br>
 * @param geometry The geometry of the feature.<br>
 * @param properties The properties of the feature.
 */
  public VectorTileFeature(long id, MapTile mapTile, String layerName, Geometry geometry, Variant properties) {
    this(VectorTileFeatureModuleJNI.new_VectorTileFeature(id, MapTile.getCPtr(mapTile), mapTile, layerName, Geometry.getCPtr(geometry), geometry, Variant.getCPtr(properties), properties), true);
  }

/**
 * Returns the id of the feature.<br>
 * @return The id of the feature.
 */
  public long getId() {
    return VectorTileFeatureModuleJNI.VectorTileFeature_getId(swigCPtr, this);
  }

/**
 * Returns the map tile of the feature.<br>
 * @return The map tile of the feature.
 */
  public MapTile getMapTile() { return new MapTile(VectorTileFeatureModuleJNI.VectorTileFeature_getMapTile(swigCPtr, this), true); }

/**
 * Returns the layer name of the feature.<br>
 * @return The layer name of the feature.
 */
  public String getLayerName() {
    return VectorTileFeatureModuleJNI.VectorTileFeature_getLayerName(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return VectorTileFeatureModuleJNI.VectorTileFeature_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return VectorTileFeatureModuleJNI.VectorTileFeature_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return VectorTileFeatureModuleJNI.VectorTileFeature_swigGetDirectorObject(swigCPtr, this);
  }

}
