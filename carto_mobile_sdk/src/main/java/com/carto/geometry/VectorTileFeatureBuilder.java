/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.geometry;

import com.carto.core.MapTile;
import com.carto.core.Variant;
import com.carto.geometry.Feature;
import com.carto.geometry.FeatureBuilder;
import com.carto.geometry.VectorTileFeature;

/**
 * A vector tile feature consisting of id, layer, geometry and properties.
 */
@com.carto.utils.DontObfuscate public class VectorTileFeatureBuilder extends FeatureBuilder {
  /** @hidden */
  private transient long swigCPtr;

  /** @hidden */
  public VectorTileFeatureBuilder(long cPtr, boolean cMemoryOwn) {
    super(cPtr, cMemoryOwn);
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(VectorTileFeatureBuilder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        VectorTileFeatureBuilderModuleJNI.delete_VectorTileFeatureBuilder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }


  /**
   * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
   * @param cPtr The native pointer of the instance.
   * @param cMemoryOwn The ownership flag.
   * @return The created instance.
   */
  /** @hidden */
  public static com.carto.geometry.VectorTileFeatureBuilder swigCreatePolymorphicInstance(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0) {
      return null;
    }

    Object director = com.carto.geometry.VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_swigGetDirectorObject(cPtr, null);
    if (director != null) {
      return (com.carto.geometry.VectorTileFeatureBuilder) director;
    }

    String objClassName = com.carto.geometry.VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_swigGetClassName(cPtr, null);
    com.carto.geometry.VectorTileFeatureBuilder objInstance = null;
    try {
      Class<?> objClass = Class.forName("com.carto.geometry." + objClassName);
      Class<?>[] argTypes = new Class<?>[] {long.class, boolean.class};
      Object[] args = new Object[] {cPtr, cMemoryOwn};
      java.lang.reflect.Constructor<?> constructor = objClass.getDeclaredConstructor(argTypes);
      objInstance = (com.carto.geometry.VectorTileFeatureBuilder) constructor.newInstance(args);
    } catch (Exception e) {
      com.carto.utils.Log.error("Carto Mobile SDK: Could not instantiate class: " + objClassName + " error: " + e.getMessage());
    }
    return objInstance;
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof VectorTileFeatureBuilder) {
      return ((VectorTileFeatureBuilder)obj).swigGetRawPtr() == swigGetRawPtr();
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return (int)swigGetRawPtr();
  }


/**
 * Constructs a VectorTileFeatureBuilder with empty state.
 */
  public VectorTileFeatureBuilder() {
    this(VectorTileFeatureBuilderModuleJNI.new_VectorTileFeatureBuilder(), true);
  }

/**
 * Returns the id of the builder.<br>
 * @return The id of the builder.
 */
  public long getId() {
    return VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_getId(swigCPtr, this);
  }

/**
 * Sets the id of the builder.<br>
 * @param id The id of the builder.
 */
  public void setId(long id) {
    VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_setId(swigCPtr, this, id);
  }

/**
 * Returns the map tile of the builder.<br>
 * @return The map tile of the builder.
 */
  public MapTile getMapTile() { return new MapTile(VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_getMapTile(swigCPtr, this), true); }

/**
 * Sets the map tile of the builder.<br>
 * @param mapTile The map tile of the builder.
 */
  public void setMapTile(MapTile mapTile) {
    VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_setMapTile(swigCPtr, this, MapTile.getCPtr(mapTile), mapTile);
  }

/**
 * Returns the layer name of the builder.<br>
 * @return The layer name of the builder.
 */
  public String getLayerName() {
    return VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_getLayerName(swigCPtr, this);
  }

/**
 * Sets the layer name of the builder.<br>
 * @param layerName The layer name of the builder.
 */
  public void setLayerName(String layerName) {
    VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_setLayerName(swigCPtr, this, layerName);
  }

/**
 * Builds a new vector tile feature from the state.<br>
 * @return A new vector tile feature based on the builder state. Can be null if the geometry is not specified.
 */
  public VectorTileFeature buildVectorTileFeature() {
  long cPtr = VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_buildVectorTileFeature(swigCPtr, this);
  if (cPtr == 0) {
    return null;
  }
  /** @hidden */
  return com.carto.geometry.VectorTileFeature.swigCreatePolymorphicInstance(cPtr, true);
}

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_swigGetRawPtr(swigCPtr, this);
  }

/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
  /** @hidden */
  public String swigGetClassName() {
    return VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_swigGetClassName(swigCPtr, this);
  }

/**
 * Returns the connected director object. This is used internally by the SDK.<br>
 * @return The connected director object or null if director is not connected.
 */
  /** @hidden */
  public Object swigGetDirectorObject() {
    return VectorTileFeatureBuilderModuleJNI.VectorTileFeatureBuilder_swigGetDirectorObject(swigCPtr, this);
  }

}
