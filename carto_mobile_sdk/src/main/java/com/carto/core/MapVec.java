/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.core;

/**
 * A double precision map vector defined by 3 coordinates.
 */
public class MapVec {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public MapVec(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(MapVec obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MapVecModuleJNI.delete_MapVec(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof MapVec) {
      return equalsInternal((MapVec)obj);
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return hashCodeInternal();
  }


/**
 * Constructs a MapVec object. All coordinates will be 0.
 */
  public MapVec() {
    this(MapVecModuleJNI.new_MapVec__SWIG_0(), true);
  }

/**
 * Constructs a MapVec object from 2 coordinates. The z coordinate will be 0.<br>
 * @param x The x coordinate.<br>
 * @param y The y coordinate.
 */
  public MapVec(double x, double y) {
    this(MapVecModuleJNI.new_MapVec__SWIG_1(x, y), true);
  }

/**
 * Constructs a MapVec object from 3 coordinates.<br>
 * @param x The x coordinate.<br>
 * @param y The y coordinate.<br>
 * @param z The z coordinate.
 */
  public MapVec(double x, double y, double z) {
    this(MapVecModuleJNI.new_MapVec__SWIG_2(x, y, z), true);
  }

/**
 * Returns the x coordinate of this map vector.<br>
 * @return The x coordinate of this map vector.
 */
  public double getX() {
    return MapVecModuleJNI.MapVec_getX(swigCPtr, this);
  }

/**
 * Returns the y coordinate of this map vector.<br>
 * @return The y coordinate of this map vector.
 */
  public double getY() {
    return MapVecModuleJNI.MapVec_getY(swigCPtr, this);
  }

/**
 * Returns the z coordinate of this map vector.<br>
 * @return The z coordinate of this map vector.
 */
  public double getZ() {
    return MapVecModuleJNI.MapVec_getZ(swigCPtr, this);
  }

/**
 * Creates a new map vector by adding a map vector to this map vector.<br>
 * @param v The map vector to be added.<br>
 * @return The new map vector.
 */
  public MapVec add(MapVec v) { return new MapVec(MapVecModuleJNI.MapVec_add(swigCPtr, this, MapVec.getCPtr(v), v), true); }

/**
 * Creates a new map vector by subtracting a map vector from this map vector.<br>
 * @param v The map vector to be subtracted.<br>
 * @return The new map vector.
 */
  public MapVec sub(MapVec v) { return new MapVec(MapVecModuleJNI.MapVec_sub(swigCPtr, this, MapVec.getCPtr(v), v), true); }

/**
 * Creates a new map vector by multiplying this map vector with a multiplier.<br>
 * @param multiplier The multiplier.<br>
 * @return The new map vector.
 */
  public MapVec mul(double multiplier) { return new MapVec(MapVecModuleJNI.MapVec_mul(swigCPtr, this, multiplier), true); }

/**
 * Creates a new map vector by dividing this map vector with a divider.<br>
 * @param divider The divider.<br>
 * @return The new map vector.
 */
  public MapVec div(double divider) { return new MapVec(MapVecModuleJNI.MapVec_div(swigCPtr, this, divider), true); }

/**
 * Checks for equality between this and another map vector.<br>
 * @param v The other map vector.<br>
 * @return True if equal.
 */
  private boolean equalsInternal(MapVec v) {
    return MapVecModuleJNI.MapVec_equalsInternal(swigCPtr, this, MapVec.getCPtr(v), v);
  }

/**
 * Calculates the length of this map vector.<br>
 * @return The length of this map vector.
 */
  public double length() {
    return MapVecModuleJNI.MapVec_length(swigCPtr, this);
  }

/**
 * Creates a new map vector by normalizing this map vector.<br>
 * @return The new normalized map vector.
 */
  public MapVec getNormalized() { return new MapVec(MapVecModuleJNI.MapVec_getNormalized(swigCPtr, this), true); }

/**
 * Calculates the 2D cross product between this and another map vector. Defined as x1 * y2 - y1 * x2.<br>
 * @param v The other map vector.<br>
 * @return The 2D cross product between this and another map vector.
 */
  public double crossProduct2D(MapVec v) {
    return MapVecModuleJNI.MapVec_crossProduct2D(swigCPtr, this, MapVec.getCPtr(v), v);
  }

/**
 * Creates a new map vector that's perpendicular to the plane defined by this and another map vector.<br>
 * @param v The other map vector.<br>
 * @return The new perpendicular map vector.
 */
  public MapVec crossProduct3D(MapVec v) { return new MapVec(MapVecModuleJNI.MapVec_crossProduct3D(swigCPtr, this, MapVec.getCPtr(v), v), true); }

/**
 * Calculates the dot product between this and another map vector.<br>
 * @param v The other map vector.<br>
 * @return The dot product between this and another map vector.
 */
  public double dotProduct(MapVec v) {
    return MapVecModuleJNI.MapVec_dotProduct(swigCPtr, this, MapVec.getCPtr(v), v);
  }

/**
 * Returns the hash value of this object.<br>
 * @return The hash value of this object.
 */
  private int hashCodeInternal() {
    return MapVecModuleJNI.MapVec_hashCodeInternal(swigCPtr, this);
  }

/**
 * Creates a string representation of this map vector, useful for logging.<br>
 * @return The string representation of this map vector.
 */
  public String toString() {
    return MapVecModuleJNI.MapVec_toString(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return MapVecModuleJNI.MapVec_swigGetRawPtr(swigCPtr, this);
  }

}
