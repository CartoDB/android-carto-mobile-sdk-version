/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.core;

import com.carto.core.StringVector;
import com.carto.core.VariantVector;
import com.carto.core.StringVariantMap;

/**
 * JSON value. Can contain JSON-style structured data, including objects and arrays.
 */
public class Variant {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public Variant(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(Variant obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        VariantModuleJNI.delete_Variant(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof Variant) {
      return equalsInternal((Variant)obj);
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return hashCodeInternal();
  }


/**
 * Constructs a null Variant object.
 */
  public Variant() {
    this(VariantModuleJNI.new_Variant__SWIG_0(), true);
  }

/**
 * Constructs Variant object from a boolean.<br>
 * @param boolVal The boolean value.
 */
  public Variant(boolean boolVal) {
    this(VariantModuleJNI.new_Variant__SWIG_1(boolVal), true);
  }

/**
 * Constructs Variant object from an integer.<br>
 * @param longVal The integer value.
 */
  public Variant(long longVal) {
    this(VariantModuleJNI.new_Variant__SWIG_2(longVal), true);
  }

/**
 * Constructs Variant object from a double.<br>
 * @param doubleVal The double value.
 */
  public Variant(double doubleVal) {
    this(VariantModuleJNI.new_Variant__SWIG_3(doubleVal), true);
  }

/**
 * Constructs Variant object from a string.<br>
 * @param string The string value.
 */
  public Variant(String string) {
    this(VariantModuleJNI.new_Variant__SWIG_4(string), true);
  }

/**
 * Constructs Variant object from a list of values.<br>
 * @param array The array of JSON values.
 */
  public Variant(VariantVector array) {
    this(VariantModuleJNI.new_Variant__SWIG_5(VariantVector.getCPtr(array), array), true);
  }

/**
 * Constructs Variant object from a map of values.<br>
 * @param object The map of JSON values.
 */
  public Variant(StringVariantMap object) {
    this(VariantModuleJNI.new_Variant__SWIG_6(StringVariantMap.getCPtr(object), object), true);
  }

/**
 * Returns the type of this variant.<br>
 * @return The type of this variant.
 */
  public VariantType getType() {
    return VariantType.swigToEnum(VariantModuleJNI.Variant_getType(swigCPtr, this));
  }

/**
 * Returns the string value of this variant.<br>
 * @return The string value of the variant. If the variant is not string, empty string will be returned.
 */
  public String getString() {
    return VariantModuleJNI.Variant_getString(swigCPtr, this);
  }

/**
 * Returns the boolean value of this variant.<br>
 * @return The boolean value of the variant. If the variant is not boolean, false will be returned.
 */
  public boolean getBool() {
    return VariantModuleJNI.Variant_getBool(swigCPtr, this);
  }

/**
 * Returns the integer value of this variant.<br>
 * @return The integer value of the variant. If the variant is not integer, 0 will be returned.
 */
  public long getLong() {
    return VariantModuleJNI.Variant_getLong(swigCPtr, this);
  }

/**
 * Returns the floating point value of this variant.<br>
 * @return The floating point value of the variant. If the variant is integer, it will be converted to floating point. Otherwise 0.0 is be returned.
 */
  public double getDouble() {
    return VariantModuleJNI.Variant_getDouble(swigCPtr, this);
  }

/**
 * Returns the number of elements in the array.<br>
 * @return The number of elements in the array if the variant is of array type. Otherwise 0 is returned.
 */
  public int getArraySize() {
    return VariantModuleJNI.Variant_getArraySize(swigCPtr, this);
  }

/**
 * Returns the element of array at specified position.<br>
 * @param idx The index of the array element to return (starting from 0).<br>
 * @return The array element at specified position or null type if the element does not exist or the variant is not an array.
 */
  public Variant getArrayElement(int idx) { return new Variant(VariantModuleJNI.Variant_getArrayElement(swigCPtr, this, idx), true); }

/**
 * Returns all the keys in the object.<br>
 * @return The list containing all the keys of the object if the variant is of object type. Otherwise empty list is returned.
 */
  public StringVector getObjectKeys() { return new StringVector(VariantModuleJNI.Variant_getObjectKeys(swigCPtr, this), true); }

/**
 * Returns true if object elements contains the specified key.<br>
 * @param key The key of the object element to check.<br>
 * @return True if the specified key exists in the object. If the element is not an object or the key does not exist, false is returned.
 */
  public boolean containsObjectKey(String key) {
    return VariantModuleJNI.Variant_containsObjectKey(swigCPtr, this, key);
  }

/**
 * Returns the element of object with the specified key.<br>
 * @param key The key of the object element to return.<br>
 * @return The object element with the specified key or null type if the element does not exist or the variant is not an object.
 */
  public Variant getObjectElement(String key) { return new Variant(VariantModuleJNI.Variant_getObjectElement(swigCPtr, this, key), true); }

/**
 * Checks for equality between this and another variant object.<br>
 * @param var The other variant object.<br>
 * @return True if equal.
 */
  private boolean equalsInternal(Variant var) {
    return VariantModuleJNI.Variant_equalsInternal(swigCPtr, this, Variant.getCPtr(var), var);
  }

/**
 * Returns the hash value of this object.<br>
 * @return The hash value of this object.
 */
  private int hashCodeInternal() {
    return VariantModuleJNI.Variant_hashCodeInternal(swigCPtr, this);
  }

/**
 * Converts the variant to JSON string.<br>
 * @return The JSON string corresponding to the variant.
 */
  public String toString() {
    return VariantModuleJNI.Variant_toString(swigCPtr, this);
  }

/**
 * Creates a Variant object from a JSON string representation.<br>
 * @param str The JSON string to use for the variant.<br>
 * @return The corresponding Variant object.<br>
 * @throws java.lang.Exception If the string parsing fails.
 */
  public static Variant fromString(String str) { return new Variant(VariantModuleJNI.Variant_fromString(str), true); }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return VariantModuleJNI.Variant_swigGetRawPtr(swigCPtr, this);
  }

}
