/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.core;

import com.carto.core.ScreenPos;

/**
 * A container class that defines a bounding box on the screen using minimum and maximum screen positions.
 */
public class ScreenBounds {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public ScreenBounds(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(ScreenBounds obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ScreenBoundsModuleJNI.delete_ScreenBounds(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof ScreenBounds) {
      return equalsInternal((ScreenBounds)obj);
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return hashCodeInternal();
  }


/**
 * Constructs an empty ScreenBounds object. The coordinates of the minimum position will be<br>
 * set to positive infinity and the coordinates of the maximum position will be<br>
 * set to negative infinity.
 */
  public ScreenBounds() {
    this(ScreenBoundsModuleJNI.new_ScreenBounds__SWIG_0(), true);
  }

/**
 * Constructs a ScreenBounds object from a minimum and maximum position. If a coordinate of the<br>
 * minimum positon is larger than the same coordinate of the maximum position then those<br>
 * coordinates will be swapped.<br>
 * @param min The minimum position.<br>
 * @param max The maximum position.
 */
  public ScreenBounds(ScreenPos min, ScreenPos max) {
    this(ScreenBoundsModuleJNI.new_ScreenBounds__SWIG_1(ScreenPos.getCPtr(min), min, ScreenPos.getCPtr(max), max), true);
  }

/**
 * Calculates the center screen position of this screen envelope object.<br>
 * @return The center postion if this screen envelope object.
 */
  public ScreenPos getCenter() { return new ScreenPos(ScreenBoundsModuleJNI.ScreenBounds_getCenter(swigCPtr, this), true); }

/**
 * Returns the width of the bounds object.<br>
 * @return The width on the bounds object.
 */
  public float getWidth() {
    return ScreenBoundsModuleJNI.ScreenBounds_getWidth(swigCPtr, this);
  }

/**
 * Returns the height of the bounds object.<br>
 * @return The height on the bounds object.
 */
  public float getHeight() {
    return ScreenBoundsModuleJNI.ScreenBounds_getHeight(swigCPtr, this);
  }

/**
 * Returns the minimum screen position.<br>
 * @return The minimum screen position.
 */
  public ScreenPos getMin() { return new ScreenPos(ScreenBoundsModuleJNI.ScreenBounds_getMin(swigCPtr, this), true); }

/**
 * Returns the maximum screen position of this screen envelope object.<br>
 * @return The maximum screen position of this screen envelope object.
 */
  public ScreenPos getMax() { return new ScreenPos(ScreenBoundsModuleJNI.ScreenBounds_getMax(swigCPtr, this), true); }

/**
 * Tests whether this screen bounds object contains a screen position.<br>
 * @param pos The screen position.<br>
 * @return True if this screen bounds object contains the screen position.
 */
  public boolean contains(ScreenPos pos) {
    return ScreenBoundsModuleJNI.ScreenBounds_contains__SWIG_0(swigCPtr, this, ScreenPos.getCPtr(pos), pos);
  }

/**
 * Tests whether this screen bounds object contains a another screen bounds object.<br>
 * @param bounds The other screen bounds object.<br>
 * @return True if this screen bounds object contains the other screen bounds object.
 */
  public boolean contains(ScreenBounds bounds) {
    return ScreenBoundsModuleJNI.ScreenBounds_contains__SWIG_1(swigCPtr, this, ScreenBounds.getCPtr(bounds), bounds);
  }

/**
 * Tests whether this screen bounds object intersects with a another screen bounds object.<br>
 * @param bounds The other screen bounds object.<br>
 * @return True if this screen bounds object intersects with the other screen bounds object.
 */
  public boolean intersects(ScreenBounds bounds) {
    return ScreenBoundsModuleJNI.ScreenBounds_intersects(swigCPtr, this, ScreenBounds.getCPtr(bounds), bounds);
  }

/**
 * Checks for equality between this and another screen bounds object.<br>
 * @param ScreenBounds The other screen bounds object.<br>
 * @return True if equal.
 */
  private boolean equalsInternal(ScreenBounds ScreenBounds) {
    return ScreenBoundsModuleJNI.ScreenBounds_equalsInternal(swigCPtr, this, ScreenBounds.getCPtr(ScreenBounds), ScreenBounds);
  }

/**
 * Returns the hash value of this object.<br>
 * @return The hash value of this object.
 */
  private int hashCodeInternal() {
    return ScreenBoundsModuleJNI.ScreenBounds_hashCodeInternal(swigCPtr, this);
  }

/**
 * Creates a string representation of this screen bounds object, useful for logging.<br>
 * @return The string representation of this screen bounds object.
 */
  public String toString() {
    return ScreenBoundsModuleJNI.ScreenBounds_toString(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return ScreenBoundsModuleJNI.ScreenBounds_swigGetRawPtr(swigCPtr, this);
  }

}
