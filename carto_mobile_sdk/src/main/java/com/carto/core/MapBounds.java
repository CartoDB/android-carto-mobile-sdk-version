/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.core;

import com.carto.core.MapPos;
import com.carto.core.MapVec;

/**
 * A container class that defines an axis aligned cuboid on the map using minimum and maximum map positions.<br>
 * Valid ranges for map bounds depend on the projection used.
 */
public class MapBounds {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public MapBounds(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(MapBounds obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MapBoundsModuleJNI.delete_MapBounds(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof MapBounds) {
      return equalsInternal((MapBounds)obj);
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return hashCodeInternal();
  }


/**
 * Constructs an empty MapBounds object. The coordinates of the minimum map position will be <br>
 * set to positive infinity and the coordinates of the maximum map position will be<br>
 * set to negative infinity.
 */
  public MapBounds() {
    this(MapBoundsModuleJNI.new_MapBounds__SWIG_0(), true);
  }

/**
 * Constructs a MapBounds object from a minimum and maximum map position. If a coordinate of the <br>
 * minimum map positon is larger than the same coordinate of the maximum map position then those<br>
 * coordinates will be swapped.<br>
 * @param min The minimum map position (south-west).<br>
 * @param max The maximum map position (north-east).
 */
  public MapBounds(MapPos min, MapPos max) {
    this(MapBoundsModuleJNI.new_MapBounds__SWIG_1(MapPos.getCPtr(min), min, MapPos.getCPtr(max), max), true);
  }

/**
 * Checks for equality between this and another map bounds object.<br>
 * @param mapBounds The other map bounds object.<br>
 * @return True if equal.
 */
  private boolean equalsInternal(MapBounds mapBounds) {
    return MapBoundsModuleJNI.MapBounds_equalsInternal(swigCPtr, this, MapBounds.getCPtr(mapBounds), mapBounds);
  }

/**
 * Calculates the center map position of this map envelope object.<br>
 * @return The center postion if this map envelope object.
 */
  public MapPos getCenter() { return new MapPos(MapBoundsModuleJNI.MapBounds_getCenter(swigCPtr, this), true); }

/**
 * Calculates the difference vector between the maximum and minimum map positions of this map bounds object.<br>
 * @return The difference vector between maximum and minimum map positions of this map bounds object.
 */
  public MapVec getDelta() { return new MapVec(MapBoundsModuleJNI.MapBounds_getDelta(swigCPtr, this), true); }

/**
 * Returns the minimum (south west) map position of this map envelope object.<br>
 * @return The minimum (south west) map position of this map envelope object.
 */
  public MapPos getMin() { return new MapPos(MapBoundsModuleJNI.MapBounds_getMin(swigCPtr, this), true); }

/**
 * Returns the maximum (north east) map position of this map envelope object.<br>
 * @return The maximum (north east) map position of this map envelope object.
 */
  public MapPos getMax() { return new MapPos(MapBoundsModuleJNI.MapBounds_getMax(swigCPtr, this), true); }

/**
 * Tests whether this map bounds object contains a map position.<br>
 * @param pos The map position.<br>
 * @return True if this map bounds object contains the map position.
 */
  public boolean contains(MapPos pos) {
    return MapBoundsModuleJNI.MapBounds_contains__SWIG_0(swigCPtr, this, MapPos.getCPtr(pos), pos);
  }

/**
 * Tests whether this map bounds object contains a another map bounds object.<br>
 * @param bounds The other map bounds object.<br>
 * @return True if this map bounds object contains the other map bounds object.
 */
  public boolean contains(MapBounds bounds) {
    return MapBoundsModuleJNI.MapBounds_contains__SWIG_1(swigCPtr, this, MapBounds.getCPtr(bounds), bounds);
  }

/**
 * Tests whether this map bounds object intersects with a another map bounds object.<br>
 * @param bounds The other map bounds object.<br>
 * @return True if this map bounds object intersects with the other map bounds object.
 */
  public boolean intersects(MapBounds bounds) {
    return MapBoundsModuleJNI.MapBounds_intersects(swigCPtr, this, MapBounds.getCPtr(bounds), bounds);
  }

/**
 * Shrinks this map bounds object to the intersection of this bounds and given bounds object.<br>
 * @param bounds The other map bounds object.
 */
  public void shrinkToIntersection(MapBounds bounds) {
    MapBoundsModuleJNI.MapBounds_shrinkToIntersection(swigCPtr, this, MapBounds.getCPtr(bounds), bounds);
  }

/**
 * Returns the hash value of this object.<br>
 * @return The hash value of this object.
 */
  private int hashCodeInternal() {
    return MapBoundsModuleJNI.MapBounds_hashCodeInternal(swigCPtr, this);
  }

/**
 * Creates a string representation of this map bounds object, useful for logging.<br>
 * @return The string representation of this map bounds object.
 */
  public String toString() {
    return MapBoundsModuleJNI.MapBounds_toString(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return MapBoundsModuleJNI.MapBounds_swigGetRawPtr(swigCPtr, this);
  }

}
