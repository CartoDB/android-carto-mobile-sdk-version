/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.carto.core;

import com.carto.core.MapVec;

/**
 * A double precision map position defined using three coordinates. X and y coordinates denote positions on the map,<br>
 * while z coordinate is height from the ground plane. Actual units for x, y and z depend on map projection.<br>
 * For example, in EPSG:4326 x is used for latitude, y for longitude and z for height in meters.
 */
public class MapPos {
  /** @hidden */
  private transient long swigCPtr;
  /** @hidden */
  protected transient boolean swigCMemOwn;

  /** @hidden */
  public MapPos(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /** @hidden */
  public static long getCPtr(MapPos obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /** @hidden */
  protected void finalize() {
    delete();
  }

  /** @hidden */
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MapPosModuleJNI.delete_MapPos(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Checks if this object is equal to the specified object.
   * @param obj The reference object.
   * @return True when objects are equal, false otherwise.
   */
  public boolean equals(Object obj) {
    if (obj instanceof MapPos) {
      return equalsInternal((MapPos)obj);
    }
    return false;
  }

  /**
   * Returns the hash value of this object.
   * @return The hash value of this object.
   */
  public int hashCode() {
    return hashCodeInternal();
  }


/**
 * Constructs a MapPos object. All coordinates will be 0.
 */
  public MapPos() {
    this(MapPosModuleJNI.new_MapPos__SWIG_0(), true);
  }

/**
 * Constructs a MapPos object from 2 coordinates. The z coordinate will be 0.<br>
 * @param x The x coordinate.<br>
 * @param y The y coordinate.
 */
  public MapPos(double x, double y) {
    this(MapPosModuleJNI.new_MapPos__SWIG_1(x, y), true);
  }

/**
 * Constructs a MapPos object from 3 coordinates.<br>
 * @param x The x coordinate.<br>
 * @param y The y coordinate.<br>
 * @param z The z coordinate.
 */
  public MapPos(double x, double y, double z) {
    this(MapPosModuleJNI.new_MapPos__SWIG_2(x, y, z), true);
  }

/**
 * Returns the x coordinate of this map position.<br>
 * @return The x coordinate of this map position.
 */
  public double getX() {
    return MapPosModuleJNI.MapPos_getX(swigCPtr, this);
  }

/**
 * Returns the y coordinate of this map position.<br>
 * @return The y coordinate of this map position.
 */
  public double getY() {
    return MapPosModuleJNI.MapPos_getY(swigCPtr, this);
  }

/**
 * Returns the z coordinate of this map position.<br>
 * @return The z coordinate of this map position.
 */
  public double getZ() {
    return MapPosModuleJNI.MapPos_getZ(swigCPtr, this);
  }

/**
 * Creates a new map position by adding a map vector to this map position.<br>
 * @param v The map vector to be added.<br>
 * @return The new map position.
 */
  public MapPos add(MapVec v) { return new MapPos(MapPosModuleJNI.MapPos_add(swigCPtr, this, MapVec.getCPtr(v), v), true); }

/**
 * Creates a new map position by subtracting a map vector from this map position.<br>
 * @param v The map vector to be subtracted.<br>
 * @return The new map position.
 */
  public MapPos subVec(MapVec v) { return new MapPos(MapPosModuleJNI.MapPos_subVec(swigCPtr, this, MapVec.getCPtr(v), v), true); }

/**
 * Creates a new map vector by subtracting a map position from this map position.<br>
 * @param p The map position to be subtracted.<br>
 * @return The new map vector.
 */
  public MapVec subPos(MapPos p) { return new MapVec(MapPosModuleJNI.MapPos_subPos(swigCPtr, this, MapPos.getCPtr(p), p), true); }

/**
 * Checks for equality between this and another map position.<br>
 * @param p The other map position.<br>
 * @return True if equal.
 */
  private boolean equalsInternal(MapPos p) {
    return MapPosModuleJNI.MapPos_equalsInternal(swigCPtr, this, MapPos.getCPtr(p), p);
  }

/**
 * Returns the hash value of this object.<br>
 * @return The hash value of this object.
 */
  private int hashCodeInternal() {
    return MapPosModuleJNI.MapPos_hashCodeInternal(swigCPtr, this);
  }

/**
 * Creates a string representation of this map position, useful for logging.<br>
 * @return The string representation of this map position.
 */
  public String toString() {
    return MapPosModuleJNI.MapPos_toString(swigCPtr, this);
  }

/**
 * Returns the raw pointer to the object. This is used internally by the SDK.<br>
 * @return The internal pointer of the object.
 */
  /** @hidden */
  public long swigGetRawPtr() {
    return MapPosModuleJNI.MapPos_swigGetRawPtr(swigCPtr, this);
  }

}
